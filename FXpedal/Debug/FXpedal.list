
FXpedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002804  08002804  00003804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002844  08002844  00004064  2**0
                  CONTENTS
  4 .ARM          00000000  08002844  08002844  00004064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002844  08002844  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002844  08002844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002848  08002848  00003848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800284c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000064  080028b0  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080028b0  000042d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066d4  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001816  00000000  00000000  0000a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0000bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e6  00000000  00000000  0000c658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e72  00000000  00000000  0000cb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000932a  00000000  00000000  000329b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2bb0  00000000  00000000  0003bcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e88a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bd8  00000000  00000000  0011e8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001204a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080027ec 	.word	0x080027ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	080027ec 	.word	0x080027ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ADC_init>:
 * Single Conversion, initiated with SC Bit
 * Using sampler; Hold timer with sample time of 2.5 clocks
 * 12-bit Conversion using 3.3V Reference
 * Configure analog input pin
 */
void ADC_init() {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
	/* Configure Analog Input Pin for Channel 1 (PC0) */
	/* Enable GPIOC Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000a0a:	4b60      	ldr	r3, [pc, #384]	@ (8000b8c <ADC_init+0x188>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8000b8c <ADC_init+0x188>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* Configure PC0 to be PP, No PUPDR, and High-Speed */
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT0;
 8000a16:	4b5e      	ldr	r3, [pc, #376]	@ (8000b90 <ADC_init+0x18c>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8000b90 <ADC_init+0x18c>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD0;
 8000a22:	4b5b      	ldr	r3, [pc, #364]	@ (8000b90 <ADC_init+0x18c>)
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	4a5a      	ldr	r2, [pc, #360]	@ (8000b90 <ADC_init+0x18c>)
 8000a28:	f023 0303 	bic.w	r3, r3, #3
 8000a2c:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED0;
 8000a2e:	4b58      	ldr	r3, [pc, #352]	@ (8000b90 <ADC_init+0x18c>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	4a57      	ldr	r2, [pc, #348]	@ (8000b90 <ADC_init+0x18c>)
 8000a34:	f043 0303 	orr.w	r3, r3, #3
 8000a38:	6093      	str	r3, [r2, #8]
	/* Set GPIO to Analog Mode for ADC (11) */
	GPIOC->MODER |= GPIO_MODER_MODE0;
 8000a3a:	4b55      	ldr	r3, [pc, #340]	@ (8000b90 <ADC_init+0x18c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a54      	ldr	r2, [pc, #336]	@ (8000b90 <ADC_init+0x18c>)
 8000a40:	f043 0303 	orr.w	r3, r3, #3
 8000a44:	6013      	str	r3, [r2, #0]
	/* Connect Analog Switch to the ADC Input (1) */
	GPIOC->ASCR |= GPIO_ASCR_ASC0;
 8000a46:	4b52      	ldr	r3, [pc, #328]	@ (8000b90 <ADC_init+0x18c>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4a:	4a51      	ldr	r2, [pc, #324]	@ (8000b90 <ADC_init+0x18c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Enable 24MHz ADC Clock and set to Synchronous Mode */
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000a52:	4b4e      	ldr	r3, [pc, #312]	@ (8000b8c <ADC_init+0x188>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a4d      	ldr	r2, [pc, #308]	@ (8000b8c <ADC_init+0x188>)
 8000a58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	ADC123_COMMON->CCR |= ADC_CCR_CKMODE;
 8000a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8000b94 <ADC_init+0x190>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4a4c      	ldr	r2, [pc, #304]	@ (8000b94 <ADC_init+0x190>)
 8000a64:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000a68:	6093      	str	r3, [r2, #8]

	/* Power Up ADC (Turn off Deep Power Down Mode) */
	ADC1->CR &= ~ADC_CR_DEEPPWD;
 8000a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b98 <ADC_init+0x194>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8000b98 <ADC_init+0x194>)
 8000a70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000a74:	6093      	str	r3, [r2, #8]
	/* Enable Voltage Regulator */
	ADC1->CR |= ADC_CR_ADVREGEN;
 8000a76:	4b48      	ldr	r3, [pc, #288]	@ (8000b98 <ADC_init+0x194>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	4a47      	ldr	r2, [pc, #284]	@ (8000b98 <ADC_init+0x194>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	6093      	str	r3, [r2, #8]
	/* Wait 20 us to ensure regulator startup time has elapsed */
	for (uint8_t i = 0; i < TWENTYU_DELAY; i++);
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	e002      	b.n	8000a8e <ADC_init+0x8a>
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b4f      	cmp	r3, #79	@ 0x4f
 8000a92:	d9f9      	bls.n	8000a88 <ADC_init+0x84>
	while (!(ADC1->CR & ADC_CR_ADVREGEN));
 8000a94:	bf00      	nop
 8000a96:	4b40      	ldr	r3, [pc, #256]	@ (8000b98 <ADC_init+0x194>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <ADC_init+0x92>

	/* Ensure ADC is Disabled*/
	ADC1->CR &= ~ADC_CR_ADEN;
 8000aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8000b98 <ADC_init+0x194>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8000b98 <ADC_init+0x194>)
 8000aa8:	f023 0301 	bic.w	r3, r3, #1
 8000aac:	6093      	str	r3, [r2, #8]

	/* Select Input Mode for Calibration (Single-ended Input [0]) */
	ADC1->CR &= ~ADC_CR_ADCALDIF;
 8000aae:	4b3a      	ldr	r3, [pc, #232]	@ (8000b98 <ADC_init+0x194>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4a39      	ldr	r2, [pc, #228]	@ (8000b98 <ADC_init+0x194>)
 8000ab4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000ab8:	6093      	str	r3, [r2, #8]
	/* Calibrate ADC and Wait Until Complete (ADCAL returns to 0) */
	ADC1->CR |= ADC_CR_ADCAL;
 8000aba:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <ADC_init+0x194>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4a36      	ldr	r2, [pc, #216]	@ (8000b98 <ADC_init+0x194>)
 8000ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac4:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);
 8000ac6:	bf00      	nop
 8000ac8:	4b33      	ldr	r3, [pc, #204]	@ (8000b98 <ADC_init+0x194>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dbfb      	blt.n	8000ac8 <ADC_init+0xc4>

	/* Set Channel 1 (PC0) as Single-ended Mode (0) */
	ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_1;
 8000ad0:	4b31      	ldr	r3, [pc, #196]	@ (8000b98 <ADC_init+0x194>)
 8000ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000ad6:	4a30      	ldr	r2, [pc, #192]	@ (8000b98 <ADC_init+0x194>)
 8000ad8:	f023 0302 	bic.w	r3, r3, #2
 8000adc:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	/* Configure ADC1 (Clear ADSTART Initially) */
	ADC1->CR &= ~ADC_CR_ADSTART;
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <ADC_init+0x194>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8000b98 <ADC_init+0x194>)
 8000ae6:	f023 0304 	bic.w	r3, r3, #4
 8000aea:	6093      	str	r3, [r2, #8]
	/* Set to Continuous Conversion Mode (1) */
	ADC1->CFGR |= ADC_CFGR_CONT;
 8000aec:	4b2a      	ldr	r3, [pc, #168]	@ (8000b98 <ADC_init+0x194>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a29      	ldr	r2, [pc, #164]	@ (8000b98 <ADC_init+0x194>)
 8000af2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000af6:	60d3      	str	r3, [r2, #12]
	/* Set to Right-Aligned Data (0) */
	ADC1->CFGR &= ~ADC_CFGR_ALIGN;
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <ADC_init+0x194>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	4a26      	ldr	r2, [pc, #152]	@ (8000b98 <ADC_init+0x194>)
 8000afe:	f023 0320 	bic.w	r3, r3, #32
 8000b02:	60d3      	str	r3, [r2, #12]
	/* Set to 12-bit Resolution (00) */
	ADC1->CFGR &= ~ADC_CFGR_RES;
 8000b04:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <ADC_init+0x194>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <ADC_init+0x194>)
 8000b0a:	f023 0318 	bic.w	r3, r3, #24
 8000b0e:	60d3      	str	r3, [r2, #12]
	/* Set Channel 1 as a Single Regular Sequence (1) */
	ADC1->SQR1 |= ADC_SQR1_SQ1_0;
 8000b10:	4b21      	ldr	r3, [pc, #132]	@ (8000b98 <ADC_init+0x194>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4a20      	ldr	r2, [pc, #128]	@ (8000b98 <ADC_init+0x194>)
 8000b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b1a:	6313      	str	r3, [r2, #48]	@ 0x30
	/* Set Sample Time to 6.5 Clocks to Channel 1 (001) */
//	ADC1->SMPR1 |= ADC_SMPR1_SMP1;
//	ADC1->SMPR1 &= ~ADC_SMPR1_SMP1_0;
	ADC1->SMPR1 |= ADC_SMPR1_SMP1;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <ADC_init+0x194>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a1d      	ldr	r2, [pc, #116]	@ (8000b98 <ADC_init+0x194>)
 8000b22:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8000b26:	6153      	str	r3, [r2, #20]
	/* Allow Conversions to be Set by Software (00) */
	ADC1->CFGR &= ~ADC_CFGR_EXTEN;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <ADC_init+0x194>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000b98 <ADC_init+0x194>)
 8000b2e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000b32:	60d3      	str	r3, [r2, #12]
//	NVIC->IP[ADC1_IRQn] = ADC_NVIC_PRIORITY;
//	NVIC->ISER[ADC_NVIC] |= (0x1 << (ADC1_IRQn & 0x1F));
//	__enable_irq();

	/* Clear ADC Ready Flag (Write 1 to Bit), Then Enable ADC */
	ADC1->ISR |= ADC_ISR_ADRDY;
 8000b34:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <ADC_init+0x194>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <ADC_init+0x194>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]
	ADC1->CR &= ~ADC_CR_ADDIS;
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <ADC_init+0x194>)
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <ADC_init+0x194>)
 8000b46:	f023 0302 	bic.w	r3, r3, #2
 8000b4a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADEN;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <ADC_init+0x194>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <ADC_init+0x194>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6093      	str	r3, [r2, #8]
	/* Hardware Sets ADRDY Flag; Wait for Bit to be Set */
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8000b58:	bf00      	nop
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <ADC_init+0x194>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f9      	beq.n	8000b5a <ADC_init+0x156>

	/* Enable ADC DMA Transfer */
	ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <ADC_init+0x194>)
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <ADC_init+0x194>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= ADC_CFGR_DMACFG;
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <ADC_init+0x194>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <ADC_init+0x194>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	60d3      	str	r3, [r2, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000800 	.word	0x48000800
 8000b94:	50040300 	.word	0x50040300
 8000b98:	50040000 	.word	0x50040000

08000b9c <ADC_collect>:

/* Begin Continuous Conversion
 * Sets ADSTART to Begin a New Conversion Sample
 * ADSTART is cleared by hardware when initiated
 */
void ADC_collect(void) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	/* Begin ADC Conversion */
	ADC1->CR |= ADC_CR_ADSTART;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <ADC_collect+0x1c>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <ADC_collect+0x1c>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	6093      	str	r3, [r2, #8]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	50040000 	.word	0x50040000

08000bbc <DAC_init>:

/* Initialize and Configure DAC1 Peripheral */
/* Pins Used:
 * GPIOA - PA4
 */
void DAC_init() {
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	/* Enable Clock Register for GPIOA, TIM6, and DAC1 */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000bc0:	4b41      	ldr	r3, [pc, #260]	@ (8000cc8 <DAC_init+0x10c>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	4a40      	ldr	r2, [pc, #256]	@ (8000cc8 <DAC_init+0x10c>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM6EN;
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <DAC_init+0x10c>)
 8000bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc8 <DAC_init+0x10c>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->APB1ENR1 |= RCC_APB1ENR1_DAC1EN;
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <DAC_init+0x10c>)
 8000bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc8 <DAC_init+0x10c>)
 8000bde:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000be2:	6593      	str	r3, [r2, #88]	@ 0x58

	/* Initialize GPIOA for DAC1_CH1 */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT4;		// OTYPE - PP (0)
 8000be4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bee:	f023 0310 	bic.w	r3, r3, #16
 8000bf2:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD4;
 8000bf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c02:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD4_1; 	// PUPD - PD (10)
 8000c04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c12:	60d3      	str	r3, [r2, #12]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED4;	// OSPEED - High-Speed (11)
 8000c14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c1e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000c22:	6093      	str	r3, [r2, #8]
	GPIOA->MODER |= GPIO_MODER_MODE4;		// Alt. Func. - Analog (11)
 8000c24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c2e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000c32:	6013      	str	r3, [r2, #0]
	GPIOA->ASCR &= ~GPIO_ASCR_ASC4;			// ASC - Output (0)
 8000c34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c3e:	f023 0310 	bic.w	r3, r3, #16
 8000c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Initialize TIM6 for DAC1_CH1 Hardware Trigger */
	TIM6->PSC = 5;		// Prescaled to 4MHz
 8000c44:	4b21      	ldr	r3, [pc, #132]	@ (8000ccc <DAC_init+0x110>)
 8000c46:	2205      	movs	r2, #5
 8000c48:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 4;		// ARR Value to Produce 1MHz Update
 8000c4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <DAC_init+0x110>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure TIM6 to Generate TRGO on Update Event (010) */
	TIM6->CR2 &= ~TIM_CR2_MMS;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <DAC_init+0x110>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ccc <DAC_init+0x110>)
 8000c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000c5a:	6053      	str	r3, [r2, #4]
	TIM6->CR2 |= TIM_CR2_MMS_1;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <DAC_init+0x110>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	4a1a      	ldr	r2, [pc, #104]	@ (8000ccc <DAC_init+0x110>)
 8000c62:	f043 0320 	orr.w	r3, r3, #32
 8000c66:	6053      	str	r3, [r2, #4]
	/* Enable Trigger */
	TIM6->CR1 |= TIM_CR1_CEN;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <DAC_init+0x110>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <DAC_init+0x110>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6013      	str	r3, [r2, #0]

	/* Ensure DAC1_CH1 is Disabled */
	DAC1->CR &= ~DAC_CR_EN1;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <DAC_init+0x114>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a15      	ldr	r2, [pc, #84]	@ (8000cd0 <DAC_init+0x114>)
 8000c7a:	f023 0301 	bic.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]

	/* Enable DAC1_CH1 Output Buffer to Reduce Issues with Impedance Matching */
	DAC1->MCR &= ~DAC_MCR_MODE1;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <DAC_init+0x114>)
 8000c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c84:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <DAC_init+0x114>)
 8000c86:	f023 0307 	bic.w	r3, r3, #7
 8000c8a:	63d3      	str	r3, [r2, #60]	@ 0x3c

	/* Enable TIM6_TRGO Trigger on Channel 1 (000) */
	DAC1->CR &= ~DAC_CR_TSEL1;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <DAC_init+0x114>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd0 <DAC_init+0x114>)
 8000c92:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000c96:	6013      	str	r3, [r2, #0]

	/* Enable DAC1 Channel 1 */
	DAC1->CR |= DAC_CR_EN1;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd0 <DAC_init+0x114>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd0 <DAC_init+0x114>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6013      	str	r3, [r2, #0]
	DAC1->CR |= DAC_CR_TEN1;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <DAC_init+0x114>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a09      	ldr	r2, [pc, #36]	@ (8000cd0 <DAC_init+0x114>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6013      	str	r3, [r2, #0]

	/* Enable DAC1 Channel 1 DMA Transfer */
	DAC1->CR |= DAC_CR_DMAEN1;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <DAC_init+0x114>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <DAC_init+0x114>)
 8000cb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cba:	6013      	str	r3, [r2, #0]


}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40001000 	.word	0x40001000
 8000cd0:	40007400 	.word	0x40007400

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	@ (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	@ (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <DMA_init>:
/* Initialize DMA Peripheral-to-Memory
 * / Memory-to-Peripheral Transfer */
/* ADC to DAC DMA Transfer, using Circular Buffer
 * ADC1: Channel 1
 * DAC1: Channel 1*/
void DMA_init(int16_t *inBuff, int16_t *outBuff, uint16_t buff_size) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	80fb      	strh	r3, [r7, #6]
	/* Initialize Clock for DMA1/2 */
	RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN);
 8000d72:	4b6b      	ldr	r3, [pc, #428]	@ (8000f20 <DMA_init+0x1bc>)
 8000d74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d76:	4a6a      	ldr	r2, [pc, #424]	@ (8000f20 <DMA_init+0x1bc>)
 8000d78:	f043 0303 	orr.w	r3, r3, #3
 8000d7c:	6493      	str	r3, [r2, #72]	@ 0x48

	/* Disable DMA1 Channel 1/DMA2 Channel 4 to Configure */
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000d7e:	4b69      	ldr	r3, [pc, #420]	@ (8000f24 <DMA_init+0x1c0>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a68      	ldr	r2, [pc, #416]	@ (8000f24 <DMA_init+0x1c0>)
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~DMA_CCR_EN;
 8000d8a:	4b67      	ldr	r3, [pc, #412]	@ (8000f28 <DMA_init+0x1c4>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a66      	ldr	r2, [pc, #408]	@ (8000f28 <DMA_init+0x1c4>)
 8000d90:	f023 0301 	bic.w	r3, r3, #1
 8000d94:	6013      	str	r3, [r2, #0]

	/* Set Peripheral Register Address (ADC1) in DMA1_CPAR1 */
	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
 8000d96:	4b63      	ldr	r3, [pc, #396]	@ (8000f24 <DMA_init+0x1c0>)
 8000d98:	4a64      	ldr	r2, [pc, #400]	@ (8000f2c <DMA_init+0x1c8>)
 8000d9a:	609a      	str	r2, [r3, #8]
	/* Set Peripheral Register Address (DAC1) in DMA2_CPAR4 */
	DMA2_Channel4->CPAR = (uint32_t) &(DAC1->DHR12R1);
 8000d9c:	4b62      	ldr	r3, [pc, #392]	@ (8000f28 <DMA_init+0x1c4>)
 8000d9e:	4a64      	ldr	r2, [pc, #400]	@ (8000f30 <DMA_init+0x1cc>)
 8000da0:	609a      	str	r2, [r3, #8]

	/* Set Memory Address (inBuff) in DMA1_CMAR1 */
	DMA1_Channel1->CMAR = (uint32_t) inBuff;
 8000da2:	4a60      	ldr	r2, [pc, #384]	@ (8000f24 <DMA_init+0x1c0>)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	60d3      	str	r3, [r2, #12]
	/* Set Memory Address (outBuff) in DMA2_CMAR4 */
	DMA2_Channel4->CMAR = (uint32_t) outBuff;
 8000da8:	4a5f      	ldr	r2, [pc, #380]	@ (8000f28 <DMA_init+0x1c4>)
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	60d3      	str	r3, [r2, #12]

	/* Configure the Number of Data to Transfer in DMA_CNDTR1/4 */
	DMA1_Channel1->CNDTR = buff_size;
 8000dae:	4a5d      	ldr	r2, [pc, #372]	@ (8000f24 <DMA_init+0x1c0>)
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	6053      	str	r3, [r2, #4]
	DMA2_Channel4->CNDTR = buff_size;
 8000db4:	4a5c      	ldr	r2, [pc, #368]	@ (8000f28 <DMA_init+0x1c4>)
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	6053      	str	r3, [r2, #4]

	/* Configure Channel Select for DMA1/2 for ADC1/DAC_CH1 (C1S = 0x0/C4S = 0x3) */
	DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8000dba:	4b5e      	ldr	r3, [pc, #376]	@ (8000f34 <DMA_init+0x1d0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8000f34 <DMA_init+0x1d0>)
 8000dc0:	f023 030f 	bic.w	r3, r3, #15
 8000dc4:	6013      	str	r3, [r2, #0]
	DMA2_CSELR->CSELR &= ~DMA_CSELR_C4S;
 8000dc6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f38 <DMA_init+0x1d4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a5b      	ldr	r2, [pc, #364]	@ (8000f38 <DMA_init+0x1d4>)
 8000dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000dd0:	6013      	str	r3, [r2, #0]
	DMA2_CSELR->CSELR |= (0x3 << DMA_CSELR_C4S_Pos);
 8000dd2:	4b59      	ldr	r3, [pc, #356]	@ (8000f38 <DMA_init+0x1d4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a58      	ldr	r2, [pc, #352]	@ (8000f38 <DMA_init+0x1d4>)
 8000dd8:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000ddc:	6013      	str	r3, [r2, #0]
	 * Circular Mode: CIRC - Enabled (1)
	 * Peripheral and Memory Incremented Mode: MINC - Enabled (1), PINC - Disabled (0)
	 * Peripheral and Memory Data Size: MSIZE - 16 Bits (01), PSIZE - 16 Bits (01)
	 * Interrupt Enable: TCIE - Enabled (1), HTIE - Enabled (1)
	 * */
	DMA1_Channel1->CCR |= DMA_CCR_PL;
 8000dde:	4b51      	ldr	r3, [pc, #324]	@ (8000f24 <DMA_init+0x1c0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a50      	ldr	r2, [pc, #320]	@ (8000f24 <DMA_init+0x1c0>)
 8000de4:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000de8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM | DMA_CCR_DIR);
 8000dea:	4b4e      	ldr	r3, [pc, #312]	@ (8000f24 <DMA_init+0x1c0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a4d      	ldr	r2, [pc, #308]	@ (8000f24 <DMA_init+0x1c0>)
 8000df0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000df4:	f023 0310 	bic.w	r3, r3, #16
 8000df8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000dfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000f24 <DMA_init+0x1c0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a49      	ldr	r2, [pc, #292]	@ (8000f24 <DMA_init+0x1c0>)
 8000e00:	f043 0320 	orr.w	r3, r3, #32
 8000e04:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8000e06:	4b47      	ldr	r3, [pc, #284]	@ (8000f24 <DMA_init+0x1c0>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a46      	ldr	r2, [pc, #280]	@ (8000f24 <DMA_init+0x1c0>)
 8000e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e10:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8000e12:	4b44      	ldr	r3, [pc, #272]	@ (8000f24 <DMA_init+0x1c0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a43      	ldr	r2, [pc, #268]	@ (8000f24 <DMA_init+0x1c0>)
 8000e18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e1c:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 8000e1e:	4b41      	ldr	r3, [pc, #260]	@ (8000f24 <DMA_init+0x1c0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a40      	ldr	r2, [pc, #256]	@ (8000f24 <DMA_init+0x1c0>)
 8000e24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e28:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0);
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f24 <DMA_init+0x1c0>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f24 <DMA_init+0x1c0>)
 8000e30:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8000e34:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE | DMA_CCR_HTIE);
 8000e36:	4b3b      	ldr	r3, [pc, #236]	@ (8000f24 <DMA_init+0x1c0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f24 <DMA_init+0x1c0>)
 8000e3c:	f043 0306 	orr.w	r3, r3, #6
 8000e40:	6013      	str	r3, [r2, #0]
		 * Circular Mode: CIRC - Enabled (1)
		 * Peripheral and Memory Incremented Mode: MINC - Enabled (1), PINC - Disabled (0)
		 * Peripheral and Memory Data Size: MSIZE - 16 Bits (01), PSIZE - 16 Bits (01)
		 * Interrupt Enable: TCIE - Enabled (1), HTIE - Enabled (1)
		 * */
	DMA2_Channel4->CCR |= DMA_CCR_PL;
 8000e42:	4b39      	ldr	r3, [pc, #228]	@ (8000f28 <DMA_init+0x1c4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a38      	ldr	r2, [pc, #224]	@ (8000f28 <DMA_init+0x1c4>)
 8000e48:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000e4c:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~DMA_CCR_MEM2MEM;
 8000e4e:	4b36      	ldr	r3, [pc, #216]	@ (8000f28 <DMA_init+0x1c4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a35      	ldr	r2, [pc, #212]	@ (8000f28 <DMA_init+0x1c4>)
 8000e54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e58:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_DIR;
 8000e5a:	4b33      	ldr	r3, [pc, #204]	@ (8000f28 <DMA_init+0x1c4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a32      	ldr	r2, [pc, #200]	@ (8000f28 <DMA_init+0x1c4>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_CIRC;
 8000e66:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <DMA_init+0x1c4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f28 <DMA_init+0x1c4>)
 8000e6c:	f043 0320 	orr.w	r3, r3, #32
 8000e70:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_MINC;
 8000e72:	4b2d      	ldr	r3, [pc, #180]	@ (8000f28 <DMA_init+0x1c4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a2c      	ldr	r2, [pc, #176]	@ (8000f28 <DMA_init+0x1c4>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e7c:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~DMA_CCR_PINC;
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <DMA_init+0x1c4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a29      	ldr	r2, [pc, #164]	@ (8000f28 <DMA_init+0x1c4>)
 8000e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e88:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 8000e8a:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <DMA_init+0x1c4>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <DMA_init+0x1c4>)
 8000e90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e94:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= (DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0);
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <DMA_init+0x1c4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a23      	ldr	r2, [pc, #140]	@ (8000f28 <DMA_init+0x1c4>)
 8000e9c:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8000ea0:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= (DMA_CCR_TCIE | DMA_CCR_HTIE);
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <DMA_init+0x1c4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a20      	ldr	r2, [pc, #128]	@ (8000f28 <DMA_init+0x1c4>)
 8000ea8:	f043 0306 	orr.w	r3, r3, #6
 8000eac:	6013      	str	r3, [r2, #0]

	/* Enable NVIC for Interrupts */
	NVIC_SetPriority(DMA1_Channel1_IRQn, DMA1_CH1_NVIC_PRIORITY);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	200b      	movs	r0, #11
 8000eb2:	f7ff ff2d 	bl	8000d10 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eb6:	200b      	movs	r0, #11
 8000eb8:	f7ff ff0c 	bl	8000cd4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(DMA2_Channel4_IRQn, DMA2_CH4_NVIC_PRIORITY);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	203b      	movs	r0, #59	@ 0x3b
 8000ec0:	f7ff ff26 	bl	8000d10 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000ec4:	203b      	movs	r0, #59	@ 0x3b
 8000ec6:	f7ff ff05 	bl	8000cd4 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000eca:	b662      	cpsie	i
}
 8000ecc:	bf00      	nop
	__enable_irq();

	/* Clear Any Pending Interrupts Before Enabling DMA Channel */
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <DMA_init+0x1d8>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <DMA_init+0x1d8>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= DMA_IFCR_CHTIF1;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <DMA_init+0x1d8>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a17      	ldr	r2, [pc, #92]	@ (8000f3c <DMA_init+0x1d8>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= DMA_IFCR_CTCIF1;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	@ (8000f3c <DMA_init+0x1d8>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <DMA_init+0x1d8>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	6053      	str	r3, [r2, #4]
	DMA2->IFCR |= DMA_IFCR_CGIF4;
 8000ef2:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <DMA_init+0x1dc>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <DMA_init+0x1dc>)
 8000ef8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000efc:	6053      	str	r3, [r2, #4]
	DMA2->IFCR |= DMA_IFCR_CHTIF4;
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <DMA_init+0x1dc>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a0f      	ldr	r2, [pc, #60]	@ (8000f40 <DMA_init+0x1dc>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6053      	str	r3, [r2, #4]
	DMA2->IFCR |= DMA_IFCR_CTCIF4;
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <DMA_init+0x1dc>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f40 <DMA_init+0x1dc>)
 8000f10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f14:	6053      	str	r3, [r2, #4]
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020008 	.word	0x40020008
 8000f28:	40020444 	.word	0x40020444
 8000f2c:	50040040 	.word	0x50040040
 8000f30:	40007408 	.word	0x40007408
 8000f34:	400200a8 	.word	0x400200a8
 8000f38:	400204a8 	.word	0x400204a8
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400

08000f44 <DMA_enable>:


/* Enable DMA Channels */
void DMA_enable() {
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
	/* Activate Channel 1 and 4 */
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <DMA_enable+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <DMA_enable+0x28>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_EN;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <DMA_enable+0x2c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <DMA_enable+0x2c>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40020008 	.word	0x40020008
 8000f70:	40020444 	.word	0x40020444

08000f74 <DMA1_Channel1_IRQHandler>:


/* Interrupt Handlers */

/* Interrupt Handler for DMA1 Channel 1 (Input Data) */
void DMA1_Channel1_IRQHandler(void) {
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
	/* If Half of the Buffer is Filled (Ping) */
	if (DMA1->ISR & DMA_ISR_HTIF1) {
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00f      	beq.n	8000fa4 <DMA1_Channel1_IRQHandler+0x30>
		/* Reset Buffer Pointer to First Half to Process */
		inBuffPtr = &inBuff[0];
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <DMA1_Channel1_IRQHandler+0x68>)
 8000f86:	4a16      	ldr	r2, [pc, #88]	@ (8000fe0 <DMA1_Channel1_IRQHandler+0x6c>)
 8000f88:	601a      	str	r2, [r3, #0]
		outBuffPtr = &outBuff[0];
 8000f8a:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <DMA1_Channel1_IRQHandler+0x70>)
 8000f8c:	4a16      	ldr	r2, [pc, #88]	@ (8000fe8 <DMA1_Channel1_IRQHandler+0x74>)
 8000f8e:	601a      	str	r2, [r3, #0]

		/* Set Data Ready Flag */
		Data_Ready_Flag = SET;
 8000f90:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <DMA1_Channel1_IRQHandler+0x78>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]

		/* Clear Interrupt Flag */
		DMA1->IFCR |= DMA_IFCR_CHTIF1;
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x64>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x64>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6053      	str	r3, [r2, #4]
		/* Clear Interrupt Flag */
		DMA1->IFCR |= DMA_IFCR_CTCIF1;
	}


}
 8000fa2:	e014      	b.n	8000fce <DMA1_Channel1_IRQHandler+0x5a>
	else if (DMA1->ISR & DMA_ISR_TCIF1) {
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00e      	beq.n	8000fce <DMA1_Channel1_IRQHandler+0x5a>
		inBuffPtr = &inBuff[(BUFFER_SIZE / 2)];
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <DMA1_Channel1_IRQHandler+0x68>)
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff0 <DMA1_Channel1_IRQHandler+0x7c>)
 8000fb4:	601a      	str	r2, [r3, #0]
		outBuffPtr = &outBuff[(BUFFER_SIZE / 2)];
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <DMA1_Channel1_IRQHandler+0x70>)
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <DMA1_Channel1_IRQHandler+0x80>)
 8000fba:	601a      	str	r2, [r3, #0]
		Data_Ready_Flag = SET;
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000fec <DMA1_Channel1_IRQHandler+0x78>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
		DMA1->IFCR |= DMA_IFCR_CTCIF1;
 8000fc2:	4b05      	ldr	r3, [pc, #20]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x64>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x64>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6053      	str	r3, [r2, #4]
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000084 	.word	0x20000084
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	20000104 	.word	0x20000104
 8000fec:	20000081 	.word	0x20000081
 8000ff0:	200000c4 	.word	0x200000c4
 8000ff4:	20000144 	.word	0x20000144

08000ff8 <DMA2_Channel4_IRQHandler>:

/* Interrupt Handler for DMA2 Channel 4 (Output Data) */
void DMA2_Channel4_IRQHandler(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
	/* If Half of the Buffer is Filled (Ping) */
	if (DMA2->ISR & DMA_ISR_HTIF4) {
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <DMA2_Channel4_IRQHandler+0x44>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <DMA2_Channel4_IRQHandler+0x22>
		/* Debug: Toggle LED */
		LED_Debug_2_toggle();
 8001008:	f000 f912 	bl	8001230 <LED_Debug_2_toggle>

		/* Clear Interrupt Flag */
		DMA2->IFCR |= DMA_IFCR_CHTIF4;
 800100c:	4b0b      	ldr	r3, [pc, #44]	@ (800103c <DMA2_Channel4_IRQHandler+0x44>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <DMA2_Channel4_IRQHandler+0x44>)
 8001012:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001016:	6053      	str	r3, [r2, #4]
		LED_Debug_2_toggle();

		/* Clear Interrupt Flag */
		DMA2->IFCR |= DMA_IFCR_CTCIF4;
	}
}
 8001018:	e00d      	b.n	8001036 <DMA2_Channel4_IRQHandler+0x3e>
	else if (DMA2->ISR & DMA_ISR_TCIF4) {
 800101a:	4b08      	ldr	r3, [pc, #32]	@ (800103c <DMA2_Channel4_IRQHandler+0x44>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <DMA2_Channel4_IRQHandler+0x3e>
		LED_Debug_2_toggle();
 8001026:	f000 f903 	bl	8001230 <LED_Debug_2_toggle>
		DMA2->IFCR |= DMA_IFCR_CTCIF4;
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <DMA2_Channel4_IRQHandler+0x44>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a03      	ldr	r2, [pc, #12]	@ (800103c <DMA2_Channel4_IRQHandler+0x44>)
 8001030:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001034:	6053      	str	r3, [r2, #4]
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40020400 	.word	0x40020400

08001040 <Delay_Filter_init>:
 * attenuation (%) is used to adjust effect strength */


/* Initialize Delay Filter
 * cutoff is in percentage (%) */
void Delay_Filter_init(DelayFilter_t *dft, uint16_t size, float cutoff) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	460b      	mov	r3, r1
 800104a:	ed87 0a01 	vstr	s0, [r7, #4]
 800104e:	817b      	strh	r3, [r7, #10]

	/* Dynamically Create Empty Memory Buffer */
	float *memBuff = (float*) calloc(size, sizeof(float));
 8001050:	897b      	ldrh	r3, [r7, #10]
 8001052:	2104      	movs	r1, #4
 8001054:	4618      	mov	r0, r3
 8001056:	f001 fabb 	bl	80025d0 <calloc>
 800105a:	4603      	mov	r3, r0
 800105c:	617b      	str	r3, [r7, #20]

	/* Instantiate Delay Filter Object */
	dft->memBuffPtr = memBuff;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	601a      	str	r2, [r3, #0]
	dft->memBuffSize = size;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	897a      	ldrh	r2, [r7, #10]
 8001068:	809a      	strh	r2, [r3, #4]
	dft->attenuation = 0.1f;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4a02      	ldr	r2, [pc, #8]	@ (8001078 <Delay_Filter_init+0x38>)
 800106e:	609a      	str	r2, [r3, #8]
//	dft->attenuation = (((PEAK_ATTENUATION - cutoff) / (size - 1)) / 100);
}
 8001070:	bf00      	nop
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	3dcccccd 	.word	0x3dcccccd

0800107c <Delay_Filter_store>:

/* Accumulate Data in Memory */
void Delay_Filter_store(DelayFilter_t *dft, float data) {
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	ed87 0a00 	vstr	s0, [r7]

	/* Right Shift Memory Buffer */
	for (uint16_t i = (dft->memBuffSize - 1); i > 0; i--) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	889b      	ldrh	r3, [r3, #4]
 800108c:	3b01      	subs	r3, #1
 800108e:	81fb      	strh	r3, [r7, #14]
 8001090:	e011      	b.n	80010b6 <Delay_Filter_store+0x3a>
		(dft->memBuffPtr)[i] = (dft->memBuffPtr)[i - 1];
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800109c:	3b01      	subs	r3, #1
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	441a      	add	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6819      	ldr	r1, [r3, #0]
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	601a      	str	r2, [r3, #0]
	for (uint16_t i = (dft->memBuffSize - 1); i > 0; i--) {
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	81fb      	strh	r3, [r7, #14]
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1ea      	bne.n	8001092 <Delay_Filter_store+0x16>
	}

	/* Store Data in Queue Memory Buffer */
	*(dft->memBuffPtr) = data;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	601a      	str	r2, [r3, #0]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <Delay_Filter_output>:

/* Output Delay Effect */
float Delay_Filter_output(DelayFilter_t *dft) {
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

	/* Accumulate Attenuated Signal from Memory Buffer */
	float *tempPtr = dft->memBuffPtr;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	617b      	str	r3, [r7, #20]
	float output = 0x0;
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
	for (uint16_t i = 0x0; i < dft->memBuffSize; i++) {
 80010e4:	2300      	movs	r3, #0
 80010e6:	81fb      	strh	r3, [r7, #14]
 80010e8:	e01d      	b.n	8001126 <Delay_Filter_output+0x56>
		output += ((*tempPtr++) * (PEAK_ATTENUATION -
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	1d1a      	adds	r2, r3, #4
 80010ee:	617a      	str	r2, [r7, #20]
 80010f0:	ed93 7a00 	vldr	s14, [r3]
				  (i * dft->attenuation)));
 80010f4:	89fb      	ldrh	r3, [r7, #14]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edd3 7a02 	vldr	s15, [r3, #8]
 8001104:	ee66 7aa7 	vmul.f32	s15, s13, s15
		output += ((*tempPtr++) * (PEAK_ATTENUATION -
 8001108:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001144 <Delay_Filter_output+0x74>
 800110c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	ed97 7a04 	vldr	s14, [r7, #16]
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (uint16_t i = 0x0; i < dft->memBuffSize; i++) {
 8001120:	89fb      	ldrh	r3, [r7, #14]
 8001122:	3301      	adds	r3, #1
 8001124:	81fb      	strh	r3, [r7, #14]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	889b      	ldrh	r3, [r3, #4]
 800112a:	89fa      	ldrh	r2, [r7, #14]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3dc      	bcc.n	80010ea <Delay_Filter_output+0x1a>
	}

	/* Output Delayed Signal */
	return output;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	ee07 3a90 	vmov	s15, r3
}
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	42c80000 	.word	0x42c80000

08001148 <Delay_Filter_apply>:

/* Apply Delay Effect to Signal */
float Delay_Filter_apply(DelayFilter_t *dft, float data) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	ed87 0a00 	vstr	s0, [r7]

	/* Store Data to Memory Buffer */
	Delay_Filter_store(dft, data);
 8001154:	ed97 0a00 	vldr	s0, [r7]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff8f 	bl	800107c <Delay_Filter_store>

	/* Output Data */
	return Delay_Filter_output(dft);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffb6 	bl	80010d0 <Delay_Filter_output>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
}
 8001168:	eeb0 0a67 	vmov.f32	s0, s15
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <LED_Debug_init>:


/* Initialize GPIO Pin for LED Debug
 * Pins Used: PC2, PC3
 * */
void LED_Debug_init() {
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
	/* Enable GPIOC Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8001178:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <LED_Debug_init+0x94>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	4a22      	ldr	r2, [pc, #136]	@ (8001208 <LED_Debug_init+0x94>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Configure PC0 to be PP, PD, and Low-Speed */
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT3 |GPIO_OTYPER_OT2);
 8001184:	4b21      	ldr	r3, [pc, #132]	@ (800120c <LED_Debug_init+0x98>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a20      	ldr	r2, [pc, #128]	@ (800120c <LED_Debug_init+0x98>)
 800118a:	f023 030c 	bic.w	r3, r3, #12
 800118e:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD3 | GPIO_PUPDR_PUPD2);
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <LED_Debug_init+0x98>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <LED_Debug_init+0x98>)
 8001196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800119a:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD3_1 | GPIO_PUPDR_PUPD2_1);
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <LED_Debug_init+0x98>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	@ (800120c <LED_Debug_init+0x98>)
 80011a2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80011a6:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED3 | GPIO_OSPEEDR_OSPEED2);
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <LED_Debug_init+0x98>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a17      	ldr	r2, [pc, #92]	@ (800120c <LED_Debug_init+0x98>)
 80011ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80011b2:	6093      	str	r3, [r2, #8]

	/* Set GPIO to Output Mode (01) */
	GPIOC->MODER &= ~GPIO_MODER_MODE3;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <LED_Debug_init+0x98>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a14      	ldr	r2, [pc, #80]	@ (800120c <LED_Debug_init+0x98>)
 80011ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80011be:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE3_0;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <LED_Debug_init+0x98>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a11      	ldr	r2, [pc, #68]	@ (800120c <LED_Debug_init+0x98>)
 80011c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011ca:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODE2;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <LED_Debug_init+0x98>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0e      	ldr	r2, [pc, #56]	@ (800120c <LED_Debug_init+0x98>)
 80011d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011d6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE2_0;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <LED_Debug_init+0x98>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <LED_Debug_init+0x98>)
 80011de:	f043 0310 	orr.w	r3, r3, #16
 80011e2:	6013      	str	r3, [r2, #0]

	/* Set GPIO Output to 0 */
	GPIOC->ODR &= ~GPIO_ODR_OD2;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <LED_Debug_init+0x98>)
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	4a08      	ldr	r2, [pc, #32]	@ (800120c <LED_Debug_init+0x98>)
 80011ea:	f023 0304 	bic.w	r3, r3, #4
 80011ee:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD3;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <LED_Debug_init+0x98>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4a05      	ldr	r2, [pc, #20]	@ (800120c <LED_Debug_init+0x98>)
 80011f6:	f023 0308 	bic.w	r3, r3, #8
 80011fa:	6153      	str	r3, [r2, #20]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40021000 	.word	0x40021000
 800120c:	48000800 	.word	0x48000800

08001210 <LED_Debug_1_toggle>:

/* Toggle LED1 */
void LED_Debug_1_toggle() {
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_OD3;
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <LED_Debug_1_toggle+0x1c>)
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <LED_Debug_1_toggle+0x1c>)
 800121a:	f083 0308 	eor.w	r3, r3, #8
 800121e:	6153      	str	r3, [r2, #20]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	48000800 	.word	0x48000800

08001230 <LED_Debug_2_toggle>:

/* Toggle LED2 */
void LED_Debug_2_toggle() {
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_OD2;
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <LED_Debug_2_toggle+0x1c>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <LED_Debug_2_toggle+0x1c>)
 800123a:	f083 0304 	eor.w	r3, r3, #4
 800123e:	6153      	str	r3, [r2, #20]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	48000800 	.word	0x48000800

08001250 <LPF_init>:
#include <math.h>
#include "LPF.h"


/* Initialize First-Order Low Pass Filter */
void LPF_init(LPF_t *filter, float corner_freq, float samp_freq) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	ed87 0a02 	vstr	s0, [r7, #8]
 800125c:	edc7 0a01 	vstr	s1, [r7, #4]
	/* Store Sample Frequency */
	filter->samp_freq = samp_freq;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	60da      	str	r2, [r3, #12]

	/* Store Corner Frequency and Calculate Coefficients for Filter */
	LPF_setCorner(filter, corner_freq);
 8001266:	ed97 0a02 	vldr	s0, [r7, #8]
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f808 	bl	8001280 <LPF_setCorner>

	/* Reset Output */
	filter->output = 0.0f;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <LPF_setCorner>:

/* Adjust the Corner Frequency of LPF,
 * then Calculate Required Coefficients
 *
 * */
void LPF_setCorner(LPF_t *filter, float corner_freq) {
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	ed87 0a00 	vstr	s0, [r7]
	/* Restrict Corner Frequency to be within 0 - (samp_freq / 2) [Nyquist Law] */
	if (corner_freq > (filter->samp_freq * 0.5f)) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001292:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	ed97 7a00 	vldr	s14, [r7]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd09      	ble.n	80012bc <LPF_setCorner+0x3c>
		corner_freq = (filter->samp_freq * 0.5f);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80012b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b6:	edc7 7a00 	vstr	s15, [r7]
 80012ba:	e009      	b.n	80012d0 <LPF_setCorner+0x50>
	} else if (corner_freq < 0.0f) {
 80012bc:	edd7 7a00 	vldr	s15, [r7]
 80012c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d502      	bpl.n	80012d0 <LPF_setCorner+0x50>
		corner_freq = 0.0f;
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
	}

	/* Calculate the Required Coefficients */
	float coeff = ((2 * M_PI * corner_freq) / filter->samp_freq);
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	f7ff f8dd 	bl	8000490 <__aeabi_f2d>
 80012d6:	a31e      	add	r3, pc, #120	@ (adr r3, 8001350 <LPF_setCorner+0xd0>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f930 	bl	8000540 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f8cf 	bl	8000490 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4620      	mov	r0, r4
 80012f8:	4629      	mov	r1, r5
 80012fa:	f7ff fa4b 	bl	8000794 <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fb2d 	bl	8000964 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	60fb      	str	r3, [r7, #12]
	filter->coeff[0] = (coeff / (1.0f + coeff));
 800130e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800131a:	edd7 6a03 	vldr	s13, [r7, #12]
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	edc3 7a01 	vstr	s15, [r3, #4]
	filter->coeff[1] = (1.0f / (1.0f + coeff));
 8001328:	edd7 7a03 	vldr	s15, [r7, #12]
 800132c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001330:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bdb0      	pop	{r4, r5, r7, pc}
 800134a:	bf00      	nop
 800134c:	f3af 8000 	nop.w
 8001350:	54442d18 	.word	0x54442d18
 8001354:	401921fb 	.word	0x401921fb

08001358 <TIM2_IRQHandler>:
}


/* TIM2 Interrupt Handler */
/* Creates a 10kHz Interrupt to Begin ADC Conversion */
void TIM2_IRQHandler() {
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	/* If ARR is Reached, Toggle Output_Flag */
	Output_Flag = SET;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <TIM2_IRQHandler+0x24>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]

	/* Clear UIF */
	TIM2->SR &= ~TIM_SR_UIF;
 8001362:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6113      	str	r3, [r2, #16]
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000080 	.word	0x20000080

08001380 <main>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8001386:	f000 f99c 	bl	80016c2 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 f889 	bl	80014a0 <SystemClock_Config>

  /* Initialize LED Debugger */
  LED_Debug_init();
 800138e:	f7ff fef1 	bl	8001174 <LED_Debug_init>

  /* Initialize DMA Transfer */
  DMA_init(inBuff, outBuff, BUFFER_SIZE);
 8001392:	2240      	movs	r2, #64	@ 0x40
 8001394:	491c      	ldr	r1, [pc, #112]	@ (8001408 <main+0x88>)
 8001396:	481d      	ldr	r0, [pc, #116]	@ (800140c <main+0x8c>)
 8001398:	f7ff fce4 	bl	8000d64 <DMA_init>

  /* Initialize ADC and DAC for I/O */
  ADC_init();
 800139c:	f7ff fb32 	bl	8000a04 <ADC_init>
  DAC_init();
 80013a0:	f7ff fc0c 	bl	8000bbc <DAC_init>

  /* Enable DMA Stream */
  DMA_enable();
 80013a4:	f7ff fdce 	bl	8000f44 <DMA_enable>

  /* Clear outBuff to Prevent any Initial Unwanted Feedback */
  for (uint16_t i = 0x0; i < BUFFER_SIZE; i++) {
 80013a8:	2300      	movs	r3, #0
 80013aa:	81fb      	strh	r3, [r7, #14]
 80013ac:	e00c      	b.n	80013c8 <main+0x48>
	  inBuff[i] = 0;
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	4a16      	ldr	r2, [pc, #88]	@ (800140c <main+0x8c>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  outBuff[i] = 0;
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	4a13      	ldr	r2, [pc, #76]	@ (8001408 <main+0x88>)
 80013bc:	2100      	movs	r1, #0
 80013be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint16_t i = 0x0; i < BUFFER_SIZE; i++) {
 80013c2:	89fb      	ldrh	r3, [r7, #14]
 80013c4:	3301      	adds	r3, #1
 80013c6:	81fb      	strh	r3, [r7, #14]
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80013cc:	d9ef      	bls.n	80013ae <main+0x2e>
//  arm_rfft_fast_instance_f32 fftHandler;
//  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
//
  /* Initialize First-Order Low Pass Filter */
  LPF_t *lpfHandler;
  LPF_init(lpfHandler, CORNER_FREQ, SAMP_FREQ);
 80013ce:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001410 <main+0x90>
 80013d2:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001414 <main+0x94>
 80013d6:	68b8      	ldr	r0, [r7, #8]
 80013d8:	f7ff ff3a 	bl	8001250 <LPF_init>

  /* Initialize Delay Effect Filter */
  DelayFilter_t *dftHandler;
  Delay_Filter_init(dftHandler, DELAY_SIZE, DELAY_CUTOFF);
 80013dc:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80013e0:	210a      	movs	r1, #10
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fe2c 	bl	8001040 <Delay_Filter_init>
//
//  /* Initialize TIM2 to Begin Sample Collection */
//  TIM_init();

  /* Begin ADC Conversion to Continuously Collect Guitar Samples */
  ADC_collect();
 80013e8:	f7ff fbd8 	bl	8000b9c <ADC_collect>
//		  /* Clear ADC Flag */
//		  Input_Flag = CLEAR;
//	  }


	  if (Data_Ready_Flag) {
 80013ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <main+0x98>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0fa      	beq.n	80013ec <main+0x6c>
		  /* Process Ready Data While DMA Transfer Continues */
		  processData(dftHandler);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f810 	bl	800141c <processData>

		  /* Debug: Toggle LED */
		  LED_Debug_1_toggle();
 80013fc:	f7ff ff08 	bl	8001210 <LED_Debug_1_toggle>

		  /* Clear Flag */
		  Data_Ready_Flag = CLEAR;
 8001400:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <main+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
	  if (Data_Ready_Flag) {
 8001406:	e7f1      	b.n	80013ec <main+0x6c>
 8001408:	20000104 	.word	0x20000104
 800140c:	20000084 	.word	0x20000084
 8001410:	473b8000 	.word	0x473b8000
 8001414:	459c4000 	.word	0x459c4000
 8001418:	20000081 	.word	0x20000081

0800141c <processData>:
}


/* Functions */
/* Process Stored Data in Buffer */
void processData(DelayFilter_t *dft) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	float inVal, outVal;

	/* Process Half of the Buffer */
	for (uint16_t i = 0x0; i < (BUFFER_SIZE / 2); i++) {
 8001424:	2300      	movs	r3, #0
 8001426:	82fb      	strh	r3, [r7, #22]
 8001428:	e02b      	b.n	8001482 <processData+0x66>
		/* Take Input and Convert to Float */
		inVal = INT16_TO_FLOAT(*(inBuffPtr++));
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <processData+0x78>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	1c9a      	adds	r2, r3, #2
 8001430:	4918      	ldr	r1, [pc, #96]	@ (8001494 <processData+0x78>)
 8001432:	600a      	str	r2, [r1, #0]
 8001434:	881b      	ldrh	r3, [r3, #0]
 8001436:	b21b      	sxth	r3, r3
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001440:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001498 <processData+0x7c>
 8001444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001448:	edc7 7a04 	vstr	s15, [r7, #16]

		/* Apply Signal Modification */
//		float modVal = LPF_apply(lpf, inVal);
//		outVal = (modVal * GAIN);
		float outVal = Delay_Filter_apply(dft, inVal);
 800144c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fe79 	bl	8001148 <Delay_Filter_apply>
 8001456:	ed87 0a03 	vstr	s0, [r7, #12]


		/* Convert Output to int16_t and Send to DAC */
		*(outBuffPtr++) = (int16_t) FLOAT_TO_INT16(outVal);
 800145a:	edd7 7a03 	vldr	s15, [r7, #12]
 800145e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001498 <processData+0x7c>
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <processData+0x80>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	1c9a      	adds	r2, r3, #2
 800146c:	490b      	ldr	r1, [pc, #44]	@ (800149c <processData+0x80>)
 800146e:	600a      	str	r2, [r1, #0]
 8001470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001474:	ee17 2a90 	vmov	r2, s15
 8001478:	b212      	sxth	r2, r2
 800147a:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0x0; i < (BUFFER_SIZE / 2); i++) {
 800147c:	8afb      	ldrh	r3, [r7, #22]
 800147e:	3301      	adds	r3, #1
 8001480:	82fb      	strh	r3, [r7, #22]
 8001482:	8afb      	ldrh	r3, [r7, #22]
 8001484:	2b1f      	cmp	r3, #31
 8001486:	d9d0      	bls.n	800142a <processData+0xe>
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000000 	.word	0x20000000
 8001498:	47000000 	.word	0x47000000
 800149c:	20000004 	.word	0x20000004

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b096      	sub	sp, #88	@ 0x58
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	2244      	movs	r2, #68	@ 0x44
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f958 	bl	8002764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014c6:	f000 fa65 	bl	8001994 <HAL_PWREx_ControlVoltageScaling>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014d0:	f000 f82c 	bl	800152c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80014d4:	2310      	movs	r3, #16
 80014d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80014e0:	2390      	movs	r3, #144	@ 0x90
 80014e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 faa7 	bl	8001a40 <HAL_RCC_OscConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80014f8:	f000 f818 	bl	800152c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fc:	230f      	movs	r3, #15
 80014fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001510:	463b      	mov	r3, r7
 8001512:	2101      	movs	r1, #1
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fe6f 	bl	80021f8 <HAL_RCC_ClockConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001520:	f000 f804 	bl	800152c <Error_Handler>
  }
}
 8001524:	bf00      	nop
 8001526:	3758      	adds	r7, #88	@ 0x58
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <Error_Handler+0x8>

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <HAL_MspInit+0x44>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001542:	4a0e      	ldr	r2, [pc, #56]	@ (800157c <HAL_MspInit+0x44>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6613      	str	r3, [r2, #96]	@ 0x60
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_MspInit+0x44>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <HAL_MspInit+0x44>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	4a08      	ldr	r2, [pc, #32]	@ (800157c <HAL_MspInit+0x44>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6593      	str	r3, [r2, #88]	@ 0x58
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_MspInit+0x44>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <NMI_Handler+0x4>

08001588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <MemManage_Handler+0x4>

08001598 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d6:	f000 f8c9 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <_sbrk+0x5c>)
 80015ea:	4b15      	ldr	r3, [pc, #84]	@ (8001640 <_sbrk+0x60>)
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f4:	4b13      	ldr	r3, [pc, #76]	@ (8001644 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <_sbrk+0x64>)
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <_sbrk+0x68>)
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	429a      	cmp	r2, r3
 800160e:	d207      	bcs.n	8001620 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001610:	f001 f8c0 	bl	8002794 <__errno>
 8001614:	4603      	mov	r3, r0
 8001616:	220c      	movs	r2, #12
 8001618:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
 800161e:	e009      	b.n	8001634 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001620:	4b08      	ldr	r3, [pc, #32]	@ (8001644 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001626:	4b07      	ldr	r3, [pc, #28]	@ (8001644 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <_sbrk+0x64>)
 8001630:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20018000 	.word	0x20018000
 8001640:	00000400 	.word	0x00000400
 8001644:	20000184 	.word	0x20000184
 8001648:	200002d8 	.word	0x200002d8

0800164c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	@ (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001674:	f7ff ffea 	bl	800164c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001678:	480c      	ldr	r0, [pc, #48]	@ (80016ac <LoopForever+0x6>)
  ldr r1, =_edata
 800167a:	490d      	ldr	r1, [pc, #52]	@ (80016b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800167c:	4a0d      	ldr	r2, [pc, #52]	@ (80016b4 <LoopForever+0xe>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001680:	e002      	b.n	8001688 <LoopCopyDataInit>

08001682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001686:	3304      	adds	r3, #4

08001688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800168c:	d3f9      	bcc.n	8001682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800168e:	4a0a      	ldr	r2, [pc, #40]	@ (80016b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001690:	4c0a      	ldr	r4, [pc, #40]	@ (80016bc <LoopForever+0x16>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001694:	e001      	b.n	800169a <LoopFillZerobss>

08001696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001698:	3204      	adds	r2, #4

0800169a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800169c:	d3fb      	bcc.n	8001696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800169e:	f001 f87f 	bl	80027a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016a2:	f7ff fe6d 	bl	8001380 <main>

080016a6 <LoopForever>:

LoopForever:
    b LoopForever
 80016a6:	e7fe      	b.n	80016a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80016b4:	0800284c 	.word	0x0800284c
  ldr r2, =_sbss
 80016b8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80016bc:	200002d4 	.word	0x200002d4

080016c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_2_IRQHandler>

080016c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 f91f 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d2:	200f      	movs	r0, #15
 80016d4:	f000 f80e 	bl	80016f4 <HAL_InitTick>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	e001      	b.n	80016e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016e4:	f7ff ff28 	bl	8001538 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016e8:	79fb      	ldrb	r3, [r7, #7]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001700:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_InitTick+0x6c>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d023      	beq.n	8001750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <HAL_InitTick+0x70>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <HAL_InitTick+0x6c>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f91d 	bl	800195e <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10f      	bne.n	800174a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b0f      	cmp	r3, #15
 800172e:	d809      	bhi.n	8001744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001730:	2200      	movs	r2, #0
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f000 f8f5 	bl	8001926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800173c:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <HAL_InitTick+0x74>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e007      	b.n	8001754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e004      	b.n	8001754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	73fb      	strb	r3, [r7, #15]
 800174e:	e001      	b.n	8001754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000010 	.word	0x20000010
 8001764:	20000008 	.word	0x20000008
 8001768:	2000000c 	.word	0x2000000c

0800176c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000010 	.word	0x20000010
 8001790:	20000188 	.word	0x20000188

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	@ (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000188 	.word	0x20000188

080017ac <__NVIC_SetPriorityGrouping>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	@ (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_SetPriority>:
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	@ (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	@ (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	@ 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	@ 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	@ (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff47 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff5c 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffb0 	bl	80018cc <SysTick_Config>
 800196c:	4603      	mov	r3, r0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800197c:	4b04      	ldr	r3, [pc, #16]	@ (8001990 <HAL_PWREx_GetVoltageRange+0x18>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40007000 	.word	0x40007000

08001994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a2:	d130      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019b0:	d038      	beq.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2232      	movs	r2, #50	@ 0x32
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	4a1b      	ldr	r2, [pc, #108]	@ (8001a3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	3301      	adds	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d8:	e002      	b.n	80019e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ec:	d102      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f2      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a00:	d110      	bne.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e00f      	b.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a12:	d007      	beq.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a1c:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	431bde83 	.word	0x431bde83

08001a40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e3ca      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4b97      	ldr	r3, [pc, #604]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5c:	4b94      	ldr	r3, [pc, #592]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80e4 	beq.w	8001c3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4a>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	f040 808b 	bne.w	8001b98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	f040 8087 	bne.w	8001b98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x62>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e3a2      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1a      	ldr	r2, [r3, #32]
 8001aa6:	4b82      	ldr	r3, [pc, #520]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_RCC_OscConfig+0x7c>
 8001ab2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aba:	e005      	b.n	8001ac8 <HAL_RCC_OscConfig+0x88>
 8001abc:	4b7c      	ldr	r3, [pc, #496]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d223      	bcs.n	8001b14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fd1d 	bl	8002510 <RCC_SetFlashLatencyFromMSIRange>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e383      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae0:	4b73      	ldr	r3, [pc, #460]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a72      	ldr	r2, [pc, #456]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b70      	ldr	r3, [pc, #448]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	496d      	ldr	r1, [pc, #436]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afe:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4968      	ldr	r1, [pc, #416]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
 8001b12:	e025      	b.n	8001b60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b14:	4b66      	ldr	r3, [pc, #408]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a65      	ldr	r2, [pc, #404]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b63      	ldr	r3, [pc, #396]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4960      	ldr	r1, [pc, #384]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b32:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	495b      	ldr	r1, [pc, #364]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fcdd 	bl	8002510 <RCC_SetFlashLatencyFromMSIRange>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e343      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b60:	f000 fc4a 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b52      	ldr	r3, [pc, #328]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	4950      	ldr	r1, [pc, #320]	@ (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b80:	4b4e      	ldr	r3, [pc, #312]	@ (8001cbc <HAL_RCC_OscConfig+0x27c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fdb5 	bl	80016f4 <HAL_InitTick>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d052      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	e327      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d032      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ba0:	4b43      	ldr	r3, [pc, #268]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a42      	ldr	r2, [pc, #264]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fdf2 	bl	8001794 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fdee 	bl	8001794 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e310      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a36      	ldr	r2, [pc, #216]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b34      	ldr	r3, [pc, #208]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4931      	ldr	r1, [pc, #196]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	492c      	ldr	r1, [pc, #176]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e01a      	b.n	8001c3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c06:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a29      	ldr	r2, [pc, #164]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fdbf 	bl	8001794 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fdbb 	bl	8001794 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e2dd      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c2c:	4b20      	ldr	r3, [pc, #128]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1da>
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d074      	beq.n	8001d32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x21a>
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d10e      	bne.n	8001c72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d10b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d064      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d160      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e2ba      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x24a>
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0b      	ldr	r2, [pc, #44]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e026      	b.n	8001cd8 <HAL_RCC_OscConfig+0x298>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c92:	d115      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x280>
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a05      	ldr	r2, [pc, #20]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a02      	ldr	r2, [pc, #8]	@ (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x298>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08002804 	.word	0x08002804
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	4ba0      	ldr	r3, [pc, #640]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a9f      	ldr	r2, [pc, #636]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a9c      	ldr	r2, [pc, #624]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fd58 	bl	8001794 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fd54 	bl	8001794 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e276      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b92      	ldr	r3, [pc, #584]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2a8>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fd44 	bl	8001794 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff fd40 	bl	8001794 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	@ 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e262      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d22:	4b88      	ldr	r3, [pc, #544]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d0>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d060      	beq.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x310>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d119      	bne.n	8001d7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d116      	bne.n	8001d7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d50:	4b7c      	ldr	r3, [pc, #496]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x328>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e23f      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	061b      	lsls	r3, r3, #24
 8001d76:	4973      	ldr	r1, [pc, #460]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7c:	e040      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d023      	beq.n	8001dce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d86:	4b6f      	ldr	r3, [pc, #444]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fcff 	bl	8001794 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fcfb 	bl	8001794 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e21d      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dac:	4b65      	ldr	r3, [pc, #404]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b62      	ldr	r3, [pc, #392]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	495f      	ldr	r1, [pc, #380]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
 8001dcc:	e018      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b5d      	ldr	r3, [pc, #372]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fcdb 	bl	8001794 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fcd7 	bl	8001794 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1f9      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d03c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e14:	4b4b      	ldr	r3, [pc, #300]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff fcb6 	bl	8001794 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fcb2 	bl	8001794 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1d4      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ef      	beq.n	8001e2c <HAL_RCC_OscConfig+0x3ec>
 8001e4c:	e01b      	b.n	8001e86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e54:	4a3b      	ldr	r2, [pc, #236]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fc99 	bl	8001794 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e66:	f7ff fc95 	bl	8001794 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1b7      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e78:	4b32      	ldr	r3, [pc, #200]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ef      	bne.n	8001e66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80a6 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e98:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b27      	ldr	r3, [pc, #156]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea8:	4a26      	ldr	r2, [pc, #152]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb0:	4b24      	ldr	r3, [pc, #144]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec0:	4b21      	ldr	r3, [pc, #132]	@ (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d118      	bne.n	8001efe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fc5c 	bl	8001794 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7ff fc58 	bl	8001794 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e17a      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4d8>
 8001f06:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f16:	e029      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d115      	bne.n	8001f4c <HAL_RCC_OscConfig+0x50c>
 8001f20:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f26:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f36:	4a03      	ldr	r2, [pc, #12]	@ (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	4b9c      	ldr	r3, [pc, #624]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f52:	4a9b      	ldr	r2, [pc, #620]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f5c:	4b98      	ldr	r3, [pc, #608]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f62:	4a97      	ldr	r2, [pc, #604]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff fc0e 	bl	8001794 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fc0a 	bl	8001794 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e12a      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f92:	4b8b      	ldr	r3, [pc, #556]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ed      	beq.n	8001f7c <HAL_RCC_OscConfig+0x53c>
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7ff fbf7 	bl	8001794 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff fbf3 	bl	8001794 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e113      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc0:	4b7f      	ldr	r3, [pc, #508]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ed      	bne.n	8001faa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fce:	7ffb      	ldrb	r3, [r7, #31]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	4a79      	ldr	r2, [pc, #484]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80fe 	beq.w	80021e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	f040 80d0 	bne.w	8002194 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ff4:	4b72      	ldr	r3, [pc, #456]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002004:	429a      	cmp	r2, r3
 8002006:	d130      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	3b01      	subs	r3, #1
 8002014:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d127      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002024:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11f      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002034:	2a07      	cmp	r2, #7
 8002036:	bf14      	ite	ne
 8002038:	2201      	movne	r2, #1
 800203a:	2200      	moveq	r2, #0
 800203c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203e:	4293      	cmp	r3, r2
 8002040:	d113      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	3b01      	subs	r3, #1
 8002050:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d109      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d06e      	beq.n	8002148 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b0c      	cmp	r3, #12
 800206e:	d069      	beq.n	8002144 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800207c:	4b50      	ldr	r3, [pc, #320]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0ad      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800208c:	4b4c      	ldr	r3, [pc, #304]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a4b      	ldr	r2, [pc, #300]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002098:	f7ff fb7c 	bl	8001794 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff fb78 	bl	8001794 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e09a      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	4b40      	ldr	r3, [pc, #256]	@ (80021c4 <HAL_RCC_OscConfig+0x784>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020ce:	3a01      	subs	r2, #1
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020d8:	0212      	lsls	r2, r2, #8
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020e0:	0852      	lsrs	r2, r2, #1
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0552      	lsls	r2, r2, #21
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020ec:	0852      	lsrs	r2, r2, #1
 80020ee:	3a01      	subs	r2, #1
 80020f0:	0652      	lsls	r2, r2, #25
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020f8:	0912      	lsrs	r2, r2, #4
 80020fa:	0452      	lsls	r2, r2, #17
 80020fc:	430a      	orrs	r2, r1
 80020fe:	4930      	ldr	r1, [pc, #192]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002104:	4b2e      	ldr	r3, [pc, #184]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2d      	ldr	r2, [pc, #180]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002110:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a2a      	ldr	r2, [pc, #168]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800211a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800211c:	f7ff fb3a 	bl	8001794 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fb36 	bl	8001794 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e058      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002142:	e050      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e04f      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002148:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d148      	bne.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002154:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002160:	4b17      	ldr	r3, [pc, #92]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a16      	ldr	r2, [pc, #88]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800216a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800216c:	f7ff fb12 	bl	8001794 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff fb0e 	bl	8001794 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e030      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x734>
 8002192:	e028      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d023      	beq.n	80021e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_RCC_OscConfig+0x780>)
 80021a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff faf5 	bl	8001794 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ac:	e00c      	b.n	80021c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff faf1 	bl	8001794 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d905      	bls.n	80021c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e013      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c8:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_RCC_OscConfig+0x7b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ec      	bne.n	80021ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_RCC_OscConfig+0x7b0>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4905      	ldr	r1, [pc, #20]	@ (80021f0 <HAL_RCC_OscConfig+0x7b0>)
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_RCC_OscConfig+0x7b4>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
 80021e0:	e001      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	feeefffc 	.word	0xfeeefffc

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0e7      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b75      	ldr	r3, [pc, #468]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b72      	ldr	r3, [pc, #456]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4970      	ldr	r1, [pc, #448]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b6e      	ldr	r3, [pc, #440]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0cf      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b66      	ldr	r3, [pc, #408]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002254:	429a      	cmp	r2, r3
 8002256:	d908      	bls.n	800226a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b63      	ldr	r3, [pc, #396]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4960      	ldr	r1, [pc, #384]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04c      	beq.n	8002310 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b5a      	ldr	r3, [pc, #360]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d121      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0a6      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002296:	4b54      	ldr	r3, [pc, #336]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d115      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e09a      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ae:	4b4e      	ldr	r3, [pc, #312]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e08e      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022be:	4b4a      	ldr	r3, [pc, #296]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e086      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b46      	ldr	r3, [pc, #280]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4943      	ldr	r1, [pc, #268]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e0:	f7ff fa58 	bl	8001794 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff fa54 	bl	8001794 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e06e      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b3a      	ldr	r3, [pc, #232]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d010      	beq.n	800233e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002328:	429a      	cmp	r2, r3
 800232a:	d208      	bcs.n	800233e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	492b      	ldr	r1, [pc, #172]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233e:	4b29      	ldr	r3, [pc, #164]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d210      	bcs.n	800236e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 0207 	bic.w	r2, r3, #7
 8002354:	4923      	ldr	r1, [pc, #140]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235c:	4b21      	ldr	r3, [pc, #132]	@ (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e036      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237a:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4918      	ldr	r1, [pc, #96]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4910      	ldr	r1, [pc, #64]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ac:	f000 f824 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	490b      	ldr	r1, [pc, #44]	@ (80023ec <HAL_RCC_ClockConfig+0x1f4>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	4a09      	ldr	r2, [pc, #36]	@ (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023cc:	4b09      	ldr	r3, [pc, #36]	@ (80023f4 <HAL_RCC_ClockConfig+0x1fc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f98f 	bl	80016f4 <HAL_InitTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80023da:	7afb      	ldrb	r3, [r7, #11]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08002804 	.word	0x08002804
 80023f0:	20000008 	.word	0x20000008
 80023f4:	2000000c 	.word	0x2000000c

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	4b3e      	ldr	r3, [pc, #248]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002410:	4b3b      	ldr	r3, [pc, #236]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x34>
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d121      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d11e      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800242c:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002438:	4b31      	ldr	r3, [pc, #196]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e005      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002454:	4a2b      	ldr	r2, [pc, #172]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10d      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d102      	bne.n	8002476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002470:	4b25      	ldr	r3, [pc, #148]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e004      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d101      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800247c:	4b23      	ldr	r3, [pc, #140]	@ (800250c <HAL_RCC_GetSysClockFreq+0x114>)
 800247e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d134      	bne.n	80024f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0xa6>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d003      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0xac>
 800249c:	e005      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <HAL_RCC_GetSysClockFreq+0x114>)
 80024a6:	617b      	str	r3, [r7, #20]
      break;
 80024a8:	e002      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	617b      	str	r3, [r7, #20]
      break;
 80024ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b0:	4b13      	ldr	r3, [pc, #76]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	3301      	adds	r3, #1
 80024bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024be:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	0e5b      	lsrs	r3, r3, #25
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	3301      	adds	r3, #1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	08002814 	.word	0x08002814
 8002508:	00f42400 	.word	0x00f42400
 800250c:	007a1200 	.word	0x007a1200

08002510 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800251c:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002528:	f7ff fa26 	bl	8001978 <HAL_PWREx_GetVoltageRange>
 800252c:	6178      	str	r0, [r7, #20]
 800252e:	e014      	b.n	800255a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	4a24      	ldr	r2, [pc, #144]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	@ 0x58
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002548:	f7ff fa16 	bl	8001978 <HAL_PWREx_GetVoltageRange>
 800254c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002560:	d10b      	bne.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	@ 0x80
 8002566:	d919      	bls.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2ba0      	cmp	r3, #160	@ 0xa0
 800256c:	d902      	bls.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256e:	2302      	movs	r3, #2
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	e013      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e010      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b80      	cmp	r3, #128	@ 0x80
 800257e:	d902      	bls.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002580:	2303      	movs	r3, #3
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e00a      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b80      	cmp	r3, #128	@ 0x80
 800258a:	d102      	bne.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800258c:	2302      	movs	r3, #2
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e004      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b70      	cmp	r3, #112	@ 0x70
 8002596:	d101      	bne.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002598:	2301      	movs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 0207 	bic.w	r2, r3, #7
 80025a4:	4909      	ldr	r1, [pc, #36]	@ (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025ac:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40022000 	.word	0x40022000

080025d0 <calloc>:
 80025d0:	4b02      	ldr	r3, [pc, #8]	@ (80025dc <calloc+0xc>)
 80025d2:	460a      	mov	r2, r1
 80025d4:	4601      	mov	r1, r0
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	f000 b802 	b.w	80025e0 <_calloc_r>
 80025dc:	20000014 	.word	0x20000014

080025e0 <_calloc_r>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	fba1 5402 	umull	r5, r4, r1, r2
 80025e6:	b93c      	cbnz	r4, 80025f8 <_calloc_r+0x18>
 80025e8:	4629      	mov	r1, r5
 80025ea:	f000 f82f 	bl	800264c <_malloc_r>
 80025ee:	4606      	mov	r6, r0
 80025f0:	b928      	cbnz	r0, 80025fe <_calloc_r+0x1e>
 80025f2:	2600      	movs	r6, #0
 80025f4:	4630      	mov	r0, r6
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	220c      	movs	r2, #12
 80025fa:	6002      	str	r2, [r0, #0]
 80025fc:	e7f9      	b.n	80025f2 <_calloc_r+0x12>
 80025fe:	462a      	mov	r2, r5
 8002600:	4621      	mov	r1, r4
 8002602:	f000 f8af 	bl	8002764 <memset>
 8002606:	e7f5      	b.n	80025f4 <_calloc_r+0x14>

08002608 <sbrk_aligned>:
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	4e0f      	ldr	r6, [pc, #60]	@ (8002648 <sbrk_aligned+0x40>)
 800260c:	460c      	mov	r4, r1
 800260e:	6831      	ldr	r1, [r6, #0]
 8002610:	4605      	mov	r5, r0
 8002612:	b911      	cbnz	r1, 800261a <sbrk_aligned+0x12>
 8002614:	f000 f8ae 	bl	8002774 <_sbrk_r>
 8002618:	6030      	str	r0, [r6, #0]
 800261a:	4621      	mov	r1, r4
 800261c:	4628      	mov	r0, r5
 800261e:	f000 f8a9 	bl	8002774 <_sbrk_r>
 8002622:	1c43      	adds	r3, r0, #1
 8002624:	d103      	bne.n	800262e <sbrk_aligned+0x26>
 8002626:	f04f 34ff 	mov.w	r4, #4294967295
 800262a:	4620      	mov	r0, r4
 800262c:	bd70      	pop	{r4, r5, r6, pc}
 800262e:	1cc4      	adds	r4, r0, #3
 8002630:	f024 0403 	bic.w	r4, r4, #3
 8002634:	42a0      	cmp	r0, r4
 8002636:	d0f8      	beq.n	800262a <sbrk_aligned+0x22>
 8002638:	1a21      	subs	r1, r4, r0
 800263a:	4628      	mov	r0, r5
 800263c:	f000 f89a 	bl	8002774 <_sbrk_r>
 8002640:	3001      	adds	r0, #1
 8002642:	d1f2      	bne.n	800262a <sbrk_aligned+0x22>
 8002644:	e7ef      	b.n	8002626 <sbrk_aligned+0x1e>
 8002646:	bf00      	nop
 8002648:	2000018c 	.word	0x2000018c

0800264c <_malloc_r>:
 800264c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002650:	1ccd      	adds	r5, r1, #3
 8002652:	f025 0503 	bic.w	r5, r5, #3
 8002656:	3508      	adds	r5, #8
 8002658:	2d0c      	cmp	r5, #12
 800265a:	bf38      	it	cc
 800265c:	250c      	movcc	r5, #12
 800265e:	2d00      	cmp	r5, #0
 8002660:	4606      	mov	r6, r0
 8002662:	db01      	blt.n	8002668 <_malloc_r+0x1c>
 8002664:	42a9      	cmp	r1, r5
 8002666:	d904      	bls.n	8002672 <_malloc_r+0x26>
 8002668:	230c      	movs	r3, #12
 800266a:	6033      	str	r3, [r6, #0]
 800266c:	2000      	movs	r0, #0
 800266e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002748 <_malloc_r+0xfc>
 8002676:	f000 f869 	bl	800274c <__malloc_lock>
 800267a:	f8d8 3000 	ldr.w	r3, [r8]
 800267e:	461c      	mov	r4, r3
 8002680:	bb44      	cbnz	r4, 80026d4 <_malloc_r+0x88>
 8002682:	4629      	mov	r1, r5
 8002684:	4630      	mov	r0, r6
 8002686:	f7ff ffbf 	bl	8002608 <sbrk_aligned>
 800268a:	1c43      	adds	r3, r0, #1
 800268c:	4604      	mov	r4, r0
 800268e:	d158      	bne.n	8002742 <_malloc_r+0xf6>
 8002690:	f8d8 4000 	ldr.w	r4, [r8]
 8002694:	4627      	mov	r7, r4
 8002696:	2f00      	cmp	r7, #0
 8002698:	d143      	bne.n	8002722 <_malloc_r+0xd6>
 800269a:	2c00      	cmp	r4, #0
 800269c:	d04b      	beq.n	8002736 <_malloc_r+0xea>
 800269e:	6823      	ldr	r3, [r4, #0]
 80026a0:	4639      	mov	r1, r7
 80026a2:	4630      	mov	r0, r6
 80026a4:	eb04 0903 	add.w	r9, r4, r3
 80026a8:	f000 f864 	bl	8002774 <_sbrk_r>
 80026ac:	4581      	cmp	r9, r0
 80026ae:	d142      	bne.n	8002736 <_malloc_r+0xea>
 80026b0:	6821      	ldr	r1, [r4, #0]
 80026b2:	1a6d      	subs	r5, r5, r1
 80026b4:	4629      	mov	r1, r5
 80026b6:	4630      	mov	r0, r6
 80026b8:	f7ff ffa6 	bl	8002608 <sbrk_aligned>
 80026bc:	3001      	adds	r0, #1
 80026be:	d03a      	beq.n	8002736 <_malloc_r+0xea>
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	442b      	add	r3, r5
 80026c4:	6023      	str	r3, [r4, #0]
 80026c6:	f8d8 3000 	ldr.w	r3, [r8]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	bb62      	cbnz	r2, 8002728 <_malloc_r+0xdc>
 80026ce:	f8c8 7000 	str.w	r7, [r8]
 80026d2:	e00f      	b.n	80026f4 <_malloc_r+0xa8>
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	1b52      	subs	r2, r2, r5
 80026d8:	d420      	bmi.n	800271c <_malloc_r+0xd0>
 80026da:	2a0b      	cmp	r2, #11
 80026dc:	d917      	bls.n	800270e <_malloc_r+0xc2>
 80026de:	1961      	adds	r1, r4, r5
 80026e0:	42a3      	cmp	r3, r4
 80026e2:	6025      	str	r5, [r4, #0]
 80026e4:	bf18      	it	ne
 80026e6:	6059      	strne	r1, [r3, #4]
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	bf08      	it	eq
 80026ec:	f8c8 1000 	streq.w	r1, [r8]
 80026f0:	5162      	str	r2, [r4, r5]
 80026f2:	604b      	str	r3, [r1, #4]
 80026f4:	4630      	mov	r0, r6
 80026f6:	f000 f82f 	bl	8002758 <__malloc_unlock>
 80026fa:	f104 000b 	add.w	r0, r4, #11
 80026fe:	1d23      	adds	r3, r4, #4
 8002700:	f020 0007 	bic.w	r0, r0, #7
 8002704:	1ac2      	subs	r2, r0, r3
 8002706:	bf1c      	itt	ne
 8002708:	1a1b      	subne	r3, r3, r0
 800270a:	50a3      	strne	r3, [r4, r2]
 800270c:	e7af      	b.n	800266e <_malloc_r+0x22>
 800270e:	6862      	ldr	r2, [r4, #4]
 8002710:	42a3      	cmp	r3, r4
 8002712:	bf0c      	ite	eq
 8002714:	f8c8 2000 	streq.w	r2, [r8]
 8002718:	605a      	strne	r2, [r3, #4]
 800271a:	e7eb      	b.n	80026f4 <_malloc_r+0xa8>
 800271c:	4623      	mov	r3, r4
 800271e:	6864      	ldr	r4, [r4, #4]
 8002720:	e7ae      	b.n	8002680 <_malloc_r+0x34>
 8002722:	463c      	mov	r4, r7
 8002724:	687f      	ldr	r7, [r7, #4]
 8002726:	e7b6      	b.n	8002696 <_malloc_r+0x4a>
 8002728:	461a      	mov	r2, r3
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	42a3      	cmp	r3, r4
 800272e:	d1fb      	bne.n	8002728 <_malloc_r+0xdc>
 8002730:	2300      	movs	r3, #0
 8002732:	6053      	str	r3, [r2, #4]
 8002734:	e7de      	b.n	80026f4 <_malloc_r+0xa8>
 8002736:	230c      	movs	r3, #12
 8002738:	6033      	str	r3, [r6, #0]
 800273a:	4630      	mov	r0, r6
 800273c:	f000 f80c 	bl	8002758 <__malloc_unlock>
 8002740:	e794      	b.n	800266c <_malloc_r+0x20>
 8002742:	6005      	str	r5, [r0, #0]
 8002744:	e7d6      	b.n	80026f4 <_malloc_r+0xa8>
 8002746:	bf00      	nop
 8002748:	20000190 	.word	0x20000190

0800274c <__malloc_lock>:
 800274c:	4801      	ldr	r0, [pc, #4]	@ (8002754 <__malloc_lock+0x8>)
 800274e:	f000 b84b 	b.w	80027e8 <__retarget_lock_acquire_recursive>
 8002752:	bf00      	nop
 8002754:	200002d0 	.word	0x200002d0

08002758 <__malloc_unlock>:
 8002758:	4801      	ldr	r0, [pc, #4]	@ (8002760 <__malloc_unlock+0x8>)
 800275a:	f000 b846 	b.w	80027ea <__retarget_lock_release_recursive>
 800275e:	bf00      	nop
 8002760:	200002d0 	.word	0x200002d0

08002764 <memset>:
 8002764:	4402      	add	r2, r0
 8002766:	4603      	mov	r3, r0
 8002768:	4293      	cmp	r3, r2
 800276a:	d100      	bne.n	800276e <memset+0xa>
 800276c:	4770      	bx	lr
 800276e:	f803 1b01 	strb.w	r1, [r3], #1
 8002772:	e7f9      	b.n	8002768 <memset+0x4>

08002774 <_sbrk_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4d06      	ldr	r5, [pc, #24]	@ (8002790 <_sbrk_r+0x1c>)
 8002778:	2300      	movs	r3, #0
 800277a:	4604      	mov	r4, r0
 800277c:	4608      	mov	r0, r1
 800277e:	602b      	str	r3, [r5, #0]
 8002780:	f7fe ff2e 	bl	80015e0 <_sbrk>
 8002784:	1c43      	adds	r3, r0, #1
 8002786:	d102      	bne.n	800278e <_sbrk_r+0x1a>
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	b103      	cbz	r3, 800278e <_sbrk_r+0x1a>
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	bd38      	pop	{r3, r4, r5, pc}
 8002790:	200002cc 	.word	0x200002cc

08002794 <__errno>:
 8002794:	4b01      	ldr	r3, [pc, #4]	@ (800279c <__errno+0x8>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000014 	.word	0x20000014

080027a0 <__libc_init_array>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	4d0d      	ldr	r5, [pc, #52]	@ (80027d8 <__libc_init_array+0x38>)
 80027a4:	4c0d      	ldr	r4, [pc, #52]	@ (80027dc <__libc_init_array+0x3c>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	2600      	movs	r6, #0
 80027ac:	42a6      	cmp	r6, r4
 80027ae:	d109      	bne.n	80027c4 <__libc_init_array+0x24>
 80027b0:	4d0b      	ldr	r5, [pc, #44]	@ (80027e0 <__libc_init_array+0x40>)
 80027b2:	4c0c      	ldr	r4, [pc, #48]	@ (80027e4 <__libc_init_array+0x44>)
 80027b4:	f000 f81a 	bl	80027ec <_init>
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	2600      	movs	r6, #0
 80027be:	42a6      	cmp	r6, r4
 80027c0:	d105      	bne.n	80027ce <__libc_init_array+0x2e>
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c8:	4798      	blx	r3
 80027ca:	3601      	adds	r6, #1
 80027cc:	e7ee      	b.n	80027ac <__libc_init_array+0xc>
 80027ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d2:	4798      	blx	r3
 80027d4:	3601      	adds	r6, #1
 80027d6:	e7f2      	b.n	80027be <__libc_init_array+0x1e>
 80027d8:	08002844 	.word	0x08002844
 80027dc:	08002844 	.word	0x08002844
 80027e0:	08002844 	.word	0x08002844
 80027e4:	08002848 	.word	0x08002848

080027e8 <__retarget_lock_acquire_recursive>:
 80027e8:	4770      	bx	lr

080027ea <__retarget_lock_release_recursive>:
 80027ea:	4770      	bx	lr

080027ec <_init>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr

080027f8 <_fini>:
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	bf00      	nop
 80027fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fe:	bc08      	pop	{r3}
 8002800:	469e      	mov	lr, r3
 8002802:	4770      	bx	lr
