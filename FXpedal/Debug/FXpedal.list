
FXpedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001768  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013498  080018f0  080018f0  000028f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014d88  08014d88  0001600c  2**0
                  CONTENTS
  4 .ARM          00000000  08014d88  08014d88  0001600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014d88  08014d88  0001600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014d88  08014d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014d8c  08014d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08014d90  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08014d9c  0001600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08014d9c  00016030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006096  00000000  00000000  0001603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001488  00000000  00000000  0001c0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  0001d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000043f  00000000  00000000  0001db78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002515b  00000000  00000000  0001dfb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006db8  00000000  00000000  00043112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2968  00000000  00000000  00049eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b3  00000000  00000000  0012c832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000151c  00000000  00000000  0012c8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012de04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000001a6  00000000  00000000  0012de67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0012e00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080018d8 	.word	0x080018d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080018d8 	.word	0x080018d8

080001c8 <ADC_init>:
 * Single Conversion, initiated with SC Bit
 * Using sampler; Hold timer with sample time of 2.5 clocks
 * 12-bit Conversion using 3.3V Reference
 * Configure analog input pin
 */
void ADC_init() {
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	/* Configure Analog Input Pin for Channel 1 (PC0) */
	/* Enable GPIOC Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80001ce:	4b66      	ldr	r3, [pc, #408]	@ (8000368 <ADC_init+0x1a0>)
 80001d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d2:	4a65      	ldr	r2, [pc, #404]	@ (8000368 <ADC_init+0x1a0>)
 80001d4:	f043 0304 	orr.w	r3, r3, #4
 80001d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* Configure PC0 to be PP, No PUPDR, and High-Speed */
	GPIOC->OTYPER &= GPIO_OTYPER_OT0;
 80001da:	4b64      	ldr	r3, [pc, #400]	@ (800036c <ADC_init+0x1a4>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a63      	ldr	r2, [pc, #396]	@ (800036c <ADC_init+0x1a4>)
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR &= GPIO_PUPDR_PUPD0;
 80001e6:	4b61      	ldr	r3, [pc, #388]	@ (800036c <ADC_init+0x1a4>)
 80001e8:	68db      	ldr	r3, [r3, #12]
 80001ea:	4a60      	ldr	r2, [pc, #384]	@ (800036c <ADC_init+0x1a4>)
 80001ec:	f003 0303 	and.w	r3, r3, #3
 80001f0:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED0;
 80001f2:	4b5e      	ldr	r3, [pc, #376]	@ (800036c <ADC_init+0x1a4>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4a5d      	ldr	r2, [pc, #372]	@ (800036c <ADC_init+0x1a4>)
 80001f8:	f043 0303 	orr.w	r3, r3, #3
 80001fc:	6093      	str	r3, [r2, #8]
	/* Set GPIO to Analog Mode for ADC (11) */
	GPIOC->MODER |= GPIO_MODER_MODE0;
 80001fe:	4b5b      	ldr	r3, [pc, #364]	@ (800036c <ADC_init+0x1a4>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a5a      	ldr	r2, [pc, #360]	@ (800036c <ADC_init+0x1a4>)
 8000204:	f043 0303 	orr.w	r3, r3, #3
 8000208:	6013      	str	r3, [r2, #0]
	/* Connect Analog Switch to the ADC Input (1) */
	GPIOC->ASCR |= GPIO_ASCR_ASC0;
 800020a:	4b58      	ldr	r3, [pc, #352]	@ (800036c <ADC_init+0x1a4>)
 800020c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800020e:	4a57      	ldr	r2, [pc, #348]	@ (800036c <ADC_init+0x1a4>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Enable 24MHz ADC Clock and set to HCLK/1 (Synchronous Mode) */
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000216:	4b54      	ldr	r3, [pc, #336]	@ (8000368 <ADC_init+0x1a0>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021a:	4a53      	ldr	r2, [pc, #332]	@ (8000368 <ADC_init+0x1a0>)
 800021c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000220:	64d3      	str	r3, [r2, #76]	@ 0x4c
	ADC123_COMMON->CCR |= ADC_CCR_CKMODE_0;
 8000222:	4b53      	ldr	r3, [pc, #332]	@ (8000370 <ADC_init+0x1a8>)
 8000224:	689b      	ldr	r3, [r3, #8]
 8000226:	4a52      	ldr	r2, [pc, #328]	@ (8000370 <ADC_init+0x1a8>)
 8000228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800022c:	6093      	str	r3, [r2, #8]

	/* Power Up ADC (Turn off Deep Power Down Mode) */
	ADC1->CR &= ~ADC_CR_DEEPPWD;
 800022e:	4b51      	ldr	r3, [pc, #324]	@ (8000374 <ADC_init+0x1ac>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	4a50      	ldr	r2, [pc, #320]	@ (8000374 <ADC_init+0x1ac>)
 8000234:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000238:	6093      	str	r3, [r2, #8]
	/* Enable Voltage Regulator */
	ADC1->CR |= ADC_CR_ADVREGEN;
 800023a:	4b4e      	ldr	r3, [pc, #312]	@ (8000374 <ADC_init+0x1ac>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	4a4d      	ldr	r2, [pc, #308]	@ (8000374 <ADC_init+0x1ac>)
 8000240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000244:	6093      	str	r3, [r2, #8]
	/* Wait 20 us to ensure regulator startup time has elapsed */
	for (uint8_t i = 0; i < TWENTYU_DELAY; i++);
 8000246:	2300      	movs	r3, #0
 8000248:	71fb      	strb	r3, [r7, #7]
 800024a:	e002      	b.n	8000252 <ADC_init+0x8a>
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	3301      	adds	r3, #1
 8000250:	71fb      	strb	r3, [r7, #7]
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	2b4f      	cmp	r3, #79	@ 0x4f
 8000256:	d9f9      	bls.n	800024c <ADC_init+0x84>
	while (!(ADC1->CR & ADC_CR_ADVREGEN));
 8000258:	bf00      	nop
 800025a:	4b46      	ldr	r3, [pc, #280]	@ (8000374 <ADC_init+0x1ac>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f9      	beq.n	800025a <ADC_init+0x92>

	/* Ensure ADC is Disabled*/
	ADC1->CR &= ~ADC_CR_ADEN;
 8000266:	4b43      	ldr	r3, [pc, #268]	@ (8000374 <ADC_init+0x1ac>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4a42      	ldr	r2, [pc, #264]	@ (8000374 <ADC_init+0x1ac>)
 800026c:	f023 0301 	bic.w	r3, r3, #1
 8000270:	6093      	str	r3, [r2, #8]

	/* Select Input Mode for Calibration (Single-ended Input [0]) */
	ADC1->CR &= ~ADC_CR_ADCALDIF;
 8000272:	4b40      	ldr	r3, [pc, #256]	@ (8000374 <ADC_init+0x1ac>)
 8000274:	689b      	ldr	r3, [r3, #8]
 8000276:	4a3f      	ldr	r2, [pc, #252]	@ (8000374 <ADC_init+0x1ac>)
 8000278:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800027c:	6093      	str	r3, [r2, #8]
	/* Calibrate ADC and Wait Until Complete (ADCAL returns to 0) */
	ADC1->CR |= ADC_CR_ADCAL;
 800027e:	4b3d      	ldr	r3, [pc, #244]	@ (8000374 <ADC_init+0x1ac>)
 8000280:	689b      	ldr	r3, [r3, #8]
 8000282:	4a3c      	ldr	r2, [pc, #240]	@ (8000374 <ADC_init+0x1ac>)
 8000284:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000288:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);
 800028a:	bf00      	nop
 800028c:	4b39      	ldr	r3, [pc, #228]	@ (8000374 <ADC_init+0x1ac>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	2b00      	cmp	r3, #0
 8000292:	dbfb      	blt.n	800028c <ADC_init+0xc4>

	/* Set Channel 5 (PC0) as Single-ended Mode (0) */
	ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_1;
 8000294:	4b37      	ldr	r3, [pc, #220]	@ (8000374 <ADC_init+0x1ac>)
 8000296:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800029a:	4a36      	ldr	r2, [pc, #216]	@ (8000374 <ADC_init+0x1ac>)
 800029c:	f023 0302 	bic.w	r3, r3, #2
 80002a0:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	/* Configure ADC1 (Clear ADSTART Initially) */
	ADC1->CR &= ~ADC_CR_ADSTART;
 80002a4:	4b33      	ldr	r3, [pc, #204]	@ (8000374 <ADC_init+0x1ac>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a32      	ldr	r2, [pc, #200]	@ (8000374 <ADC_init+0x1ac>)
 80002aa:	f023 0304 	bic.w	r3, r3, #4
 80002ae:	6093      	str	r3, [r2, #8]
	/* Set to Single Conversion Mode (0) */
	ADC1->CFGR &= ~ADC_CFGR_CONT;
 80002b0:	4b30      	ldr	r3, [pc, #192]	@ (8000374 <ADC_init+0x1ac>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000374 <ADC_init+0x1ac>)
 80002b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002ba:	60d3      	str	r3, [r2, #12]
	/* Set to Right-Aligned Data (0) */
	ADC1->CFGR &= ~ADC_CFGR_ALIGN;
 80002bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000374 <ADC_init+0x1ac>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	4a2c      	ldr	r2, [pc, #176]	@ (8000374 <ADC_init+0x1ac>)
 80002c2:	f023 0320 	bic.w	r3, r3, #32
 80002c6:	60d3      	str	r3, [r2, #12]
	/* Set to 12-bit Resolution (00) */
	ADC1->CFGR &= ~ADC_CFGR_RES;
 80002c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000374 <ADC_init+0x1ac>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a29      	ldr	r2, [pc, #164]	@ (8000374 <ADC_init+0x1ac>)
 80002ce:	f023 0318 	bic.w	r3, r3, #24
 80002d2:	60d3      	str	r3, [r2, #12]
	/* Set Channel 1 as a Single Regular Sequence (1) */
	ADC1->SQR1 |= ADC_SQR1_SQ1_0;
 80002d4:	4b27      	ldr	r3, [pc, #156]	@ (8000374 <ADC_init+0x1ac>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a26      	ldr	r2, [pc, #152]	@ (8000374 <ADC_init+0x1ac>)
 80002da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
	/* Set Sample Time to 6.5 Clocks to Channel 1 (001) */
//	ADC1->SMPR1 |= ADC_SMPR1_SMP1;
//	ADC1->SMPR1 &= ~ADC_SMPR1_SMP1_0;
	ADC1->SMPR1 |= ADC_SMPR1_SMP1;
 80002e0:	4b24      	ldr	r3, [pc, #144]	@ (8000374 <ADC_init+0x1ac>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a23      	ldr	r2, [pc, #140]	@ (8000374 <ADC_init+0x1ac>)
 80002e6:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80002ea:	6153      	str	r3, [r2, #20]
	/* Allow Conversions to be Set by Software (00) */
	ADC1->CFGR &= ~ADC_CFGR_EXTEN;
 80002ec:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <ADC_init+0x1ac>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a20      	ldr	r2, [pc, #128]	@ (8000374 <ADC_init+0x1ac>)
 80002f2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002f6:	60d3      	str	r3, [r2, #12]

	/* Enable Interrupts at End of Conversions (EOC) */
	ADC1->IER |= ADC_IER_EOCIE;
 80002f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000374 <ADC_init+0x1ac>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000374 <ADC_init+0x1ac>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6053      	str	r3, [r2, #4]
	/* Clear EOC Flag */
	ADC1->ISR |= ADC_ISR_EOC;
 8000304:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <ADC_init+0x1ac>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a1a      	ldr	r2, [pc, #104]	@ (8000374 <ADC_init+0x1ac>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6013      	str	r3, [r2, #0]
	/* Enable Global Interrupt in NVIC with Second-Highest Priority */
	NVIC->IP[ADC1_IRQn] = ADC_NVIC_PRIORITY;
 8000310:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <ADC_init+0x1b0>)
 8000312:	2200      	movs	r2, #0
 8000314:	f883 2312 	strb.w	r2, [r3, #786]	@ 0x312
	NVIC->ISER[ADC_NVIC] |= (0x1 << (ADC1_IRQn & 0x1F));
 8000318:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <ADC_init+0x1b0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a16      	ldr	r2, [pc, #88]	@ (8000378 <ADC_init+0x1b0>)
 800031e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000322:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000324:	b662      	cpsie	i
}
 8000326:	bf00      	nop
	__enable_irq();

	/* Clear ADC Ready Flag (Write 1 to Bit), Then Enable ADC */
	ADC1->ISR |= ADC_ISR_ADRDY;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <ADC_init+0x1ac>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a11      	ldr	r2, [pc, #68]	@ (8000374 <ADC_init+0x1ac>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]
	ADC1->CR &= ~ADC_CR_ADDIS;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <ADC_init+0x1ac>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a0e      	ldr	r2, [pc, #56]	@ (8000374 <ADC_init+0x1ac>)
 800033a:	f023 0302 	bic.w	r3, r3, #2
 800033e:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADEN;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <ADC_init+0x1ac>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a0b      	ldr	r2, [pc, #44]	@ (8000374 <ADC_init+0x1ac>)
 8000346:	f043 0301 	orr.w	r3, r3, #1
 800034a:	6093      	str	r3, [r2, #8]
	/* Hardware Sets ADRDY Flag; Wait for Bit to be Set */
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 800034c:	bf00      	nop
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <ADC_init+0x1ac>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <ADC_init+0x186>
}
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40021000 	.word	0x40021000
 800036c:	48000800 	.word	0x48000800
 8000370:	50040300 	.word	0x50040300
 8000374:	50040000 	.word	0x50040000
 8000378:	e000e100 	.word	0xe000e100

0800037c <ADC_collect>:

/* Begin a New Conversion
 * Sets ADSTART to Begin a New Conversion Sample
 * ADSTART is cleared by hardware when initiated
 */
void ADC_collect(void) {
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	/* Begin ADC Conversion */
	ADC1->CR |= ADC_CR_ADSTART;
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <ADC_collect+0x1c>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <ADC_collect+0x1c>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6093      	str	r3, [r2, #8]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	50040000 	.word	0x50040000

0800039c <ADC1_2_IRQHandler>:

/* ADC Interrupt Handler */
/* Save Digital Conversion to a Global Variable
 * Set a Global Flag
 */
void ADC1_IRQHandler() {
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	/* If Conversion has Ended, EOC Flag is Set */
	/* Save Digital Value to Global Variable */
	if ((GtrSamp_DigVal = ADC1->DR) < 20) {
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <ADC1_2_IRQHandler+0x2c>)
 80003a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <ADC1_2_IRQHandler+0x30>)
 80003a8:	801a      	strh	r2, [r3, #0]
 80003aa:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <ADC1_2_IRQHandler+0x30>)
 80003ac:	881b      	ldrh	r3, [r3, #0]
 80003ae:	2b13      	cmp	r3, #19
 80003b0:	d802      	bhi.n	80003b8 <ADC1_2_IRQHandler+0x1c>
		GtrSamp_DigVal = 0;
 80003b2:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <ADC1_2_IRQHandler+0x30>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	801a      	strh	r2, [r3, #0]
	}
//	GtrSamp_DigVal = ADC1->DR;
	/* Reading from ADC1_DR Clears EOC Flag */

	/* Set Global Flag */
	Input_Flag = SET;
 80003b8:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <ADC1_2_IRQHandler+0x34>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	701a      	strb	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	50040000 	.word	0x50040000
 80003cc:	20000028 	.word	0x20000028
 80003d0:	2000002a 	.word	0x2000002a

080003d4 <DAC_init>:

/* Initialize and Configure DAC Peripheral */
/* Pins Used:
 * GPIOA - PA4, PA5, PA6, PA7
 */
void DAC_init() {
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	/* Enable Clock Register for SPI1 */
	  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80003d8:	4b43      	ldr	r3, [pc, #268]	@ (80004e8 <DAC_init+0x114>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003dc:	4a42      	ldr	r2, [pc, #264]	@ (80004e8 <DAC_init+0x114>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80003e4:	4b40      	ldr	r3, [pc, #256]	@ (80004e8 <DAC_init+0x114>)
 80003e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003e8:	4a3f      	ldr	r2, [pc, #252]	@ (80004e8 <DAC_init+0x114>)
 80003ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003ee:	6613      	str	r3, [r2, #96]	@ 0x60

	/* Initialize GPIO for SPI1 for DAC */
	  GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80003f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80003fe:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 |
 8000400:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800040a:	f443 432a 	orr.w	r3, r3, #43520	@ 0xaa00
 800040e:	6013      	str	r3, [r2, #0]
			  	  	  	  GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1); // Alt. Func. (10)
	  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT4 | GPIO_OTYPER_OT5 | GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7); // PP (0)
 8000410:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800041a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800041e:	6053      	str	r3, [r2, #4]
	  GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 |
 8000420:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800042a:	f443 437f 	orr.w	r3, r3, #65280	@ 0xff00
 800042e:	6093      	str	r3, [r2, #8]
			  	  	  	  GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);	// Very High-Speed (11)
	  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7); // No PU/PD (00) for PA4,6
 8000430:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800043a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800043e:	60d3      	str	r3, [r2, #12]
	  GPIOA->PUPDR |= (GPIO_PUPDR_PUPD5_0 | GPIO_PUPDR_PUPD7_0); // PU (01) for PA5,7
 8000440:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800044a:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 800044e:	60d3      	str	r3, [r2, #12]
	  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 8000450:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000454:	6a1b      	ldr	r3, [r3, #32]
 8000456:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800045a:	b29b      	uxth	r3, r3
 800045c:	6213      	str	r3, [r2, #32]
	  GPIOA->AFR[0] |= ((GPIO_AFRL_AFSEL4_0 | GPIO_AFRL_AFSEL4_2) | (GPIO_AFRL_AFSEL5_0 | GPIO_AFRL_AFSEL5_2) |
 800045e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000462:	6a1b      	ldr	r3, [r3, #32]
 8000464:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000468:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 800046c:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000470:	6213      	str	r3, [r2, #32]
			  	  	  (GPIO_AFRL_AFSEL6_0 | GPIO_AFRL_AFSEL6_2) | (GPIO_AFRL_AFSEL7_0 | GPIO_AFRL_AFSEL7_2)); // AF5 (0101)

	/* Initialize SPI Control Register */
	  SPI1->CR1 &= ~SPI_CR1_BR;		// Baud Rate set to CLK/1 (000)
 8000472:	4b1e      	ldr	r3, [pc, #120]	@ (80004ec <DAC_init+0x118>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a1d      	ldr	r2, [pc, #116]	@ (80004ec <DAC_init+0x118>)
 8000478:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800047c:	6013      	str	r3, [r2, #0]
	  SPI1->CR2 &= ~(SPI_CR2_DS);
 800047e:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <DAC_init+0x118>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	4a1a      	ldr	r2, [pc, #104]	@ (80004ec <DAC_init+0x118>)
 8000484:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000488:	6053      	str	r3, [r2, #4]
	  SPI1->CR2 |= (SPI_CR2_DS_3 | SPI_CR2_DS_1 | SPI_CR2_DS_0); // Data Size to 12 Bits (1011)
 800048a:	4b18      	ldr	r3, [pc, #96]	@ (80004ec <DAC_init+0x118>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	4a17      	ldr	r2, [pc, #92]	@ (80004ec <DAC_init+0x118>)
 8000490:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8000494:	6053      	str	r3, [r2, #4]
	  SPI1->CR1 &= ~SPI_CR1_CPOL;	// Clock Polarity (0)
 8000496:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <DAC_init+0x118>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a14      	ldr	r2, [pc, #80]	@ (80004ec <DAC_init+0x118>)
 800049c:	f023 0302 	bic.w	r3, r3, #2
 80004a0:	6013      	str	r3, [r2, #0]
	  SPI1->CR1 &= ~SPI_CR1_CPHA;	// Clock Phase (0)
 80004a2:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <DAC_init+0x118>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a11      	ldr	r2, [pc, #68]	@ (80004ec <DAC_init+0x118>)
 80004a8:	f023 0301 	bic.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
	  SPI1->CR1 |= SPI_CR1_MSTR;	// Enable Master Mode
 80004ae:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <DAC_init+0x118>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <DAC_init+0x118>)
 80004b4:	f043 0304 	orr.w	r3, r3, #4
 80004b8:	6013      	str	r3, [r2, #0]
	  SPI1->CR2 |= SPI_CR2_NSSP;	// Set Pulse for CS
 80004ba:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <DAC_init+0x118>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4a0b      	ldr	r2, [pc, #44]	@ (80004ec <DAC_init+0x118>)
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	6053      	str	r3, [r2, #4]
	  SPI1->CR2 |= SPI_CR2_SSOE;	// Enable CS Output
 80004c6:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <DAC_init+0x118>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	4a08      	ldr	r2, [pc, #32]	@ (80004ec <DAC_init+0x118>)
 80004cc:	f043 0304 	orr.w	r3, r3, #4
 80004d0:	6053      	str	r3, [r2, #4]
	  SPI1->CR1 |= SPI_CR1_SPE;		// Enable SPI Peripheral
 80004d2:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <DAC_init+0x118>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a05      	ldr	r2, [pc, #20]	@ (80004ec <DAC_init+0x118>)
 80004d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004dc:	6013      	str	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40013000 	.word	0x40013000

080004f0 <DAC_Write>:


/* Send Data to the DAC (Includes DAC Configuration Bits to Data Input) */
void DAC_Write(uint16_t LUT_volt) {
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	/* Wait for Tx to be empty */
	//while (!(SPI1->SR & SPI_SR_TXE));

	/* Write 12 Bits to DAC */
	/* Add Configuration Bits (11) to Bits 13 and 14 of the Input */
	LUT_volt &= BITMASK;
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000500:	80fb      	strh	r3, [r7, #6]
	LUT_volt |= DAC_CAL << DAC_SHIFT;
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000508:	80fb      	strh	r3, [r7, #6]
	/* Shift Data into Data Register */
	SPI1->DR = LUT_volt;
 800050a:	4a04      	ldr	r2, [pc, #16]	@ (800051c <DAC_Write+0x2c>)
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	60d3      	str	r3, [r2, #12]

	/* Wait for Tx to be empty again and non-busy bus */
	//while ((!(SPI1->SR & SPI_SR_TXE)) && (SPI1->SR & SPI_SR_BSY));
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40013000 	.word	0x40013000

08000520 <TIM_init>:
/* Extern Variables */
uint8_t Output_Flag;


/* Initialize Timer (Set to 24MHz, Prescaled to 500kHz) */
void TIM_init() {
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* Enabling clock for TIM2 (24MHz) */
  RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000524:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <TIM_init+0xa0>)
 8000526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000528:	4a25      	ldr	r2, [pc, #148]	@ (80005c0 <TIM_init+0xa0>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6593      	str	r3, [r2, #88]	@ 0x58

  TIM2->CR1 &= ~TIM_CR1_CEN;	// Temporarily turn off Timer
 8000530:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800053a:	f023 0301 	bic.w	r3, r3, #1
 800053e:	6013      	str	r3, [r2, #0]
  TIM2->PSC = TIM2_PRESCALER;	// Scale Clock down to 500kHz to Save Power
 8000540:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000544:	222f      	movs	r2, #47	@ 0x2f
 8000546:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->ARR = TIM2_ARR;			// Creates 10kHz Interrupt
 8000548:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800054c:	220b      	movs	r2, #11
 800054e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set TIM2 interrupts to be highest priority */
  NVIC->IP[TIM2_IRQn] = TIM2_PRIORITY;
 8000550:	4b1c      	ldr	r3, [pc, #112]	@ (80005c4 <TIM_init+0xa4>)
 8000552:	2201      	movs	r2, #1
 8000554:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  /* Enable NVIC to handle TIM2 interrupts */
  NVIC->ISER[TIM2_NVIC] = (1 << (TIM2_IRQn & 0x1F));
 8000558:	4b1a      	ldr	r3, [pc, #104]	@ (80005c4 <TIM_init+0xa4>)
 800055a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800055e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000560:	b662      	cpsie	i
}
 8000562:	bf00      	nop
  __enable_irq();

  /* Set Timer Conditions and Enable */
  TIM2->CR1 &= ~TIM_CR1_UDIS;	// Enable UEVs
 8000564:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800056e:	f023 0302 	bic.w	r3, r3, #2
 8000572:	6013      	str	r3, [r2, #0]
  TIM2->DIER |= (TIM_DIER_UIE);	// Enable hardware interrupt
 8000574:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	60d3      	str	r3, [r2, #12]
  TIM2->CR1 |= TIM_CR1_CEN;	// Enable timer
 8000584:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6013      	str	r3, [r2, #0]
  TIM2->EGR |= TIM_EGR_UG;	// Force Update Event to reset timer
 8000594:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6153      	str	r3, [r2, #20]
  TIM2->EGR |= ~TIM_EGR_UG;	// Toggle off Force Update Event
 80005a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005ae:	f063 0301 	orn	r3, r3, #1
 80005b2:	6153      	str	r3, [r2, #20]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	e000e100 	.word	0xe000e100

080005c8 <TIM2_IRQHandler>:
}


/* TIM2 Interrupt Handler */
/* Creates a 10kHz Interrupt to Begin ADC Conversion */
void TIM2_IRQHandler() {
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	/* If ARR is Reached, Toggle Output_Flag */
	Output_Flag = SET;
 80005cc:	4b07      	ldr	r3, [pc, #28]	@ (80005ec <TIM2_IRQHandler+0x24>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	701a      	strb	r2, [r3, #0]

	/* Clear UIF */
	TIM2->SR &= ~TIM_SR_UIF;
 80005d2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005dc:	f023 0301 	bic.w	r3, r3, #1
 80005e0:	6113      	str	r3, [r2, #16]
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	2000002b 	.word	0x2000002b

080005f0 <main>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 80005f6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80005f8:	f000 f937 	bl	800086a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f85a 	bl	80006b4 <SystemClock_Config>

  /* Initialize ADC and DAC for I/O */
  ADC_init();
 8000600:	f7ff fde2 	bl	80001c8 <ADC_init>
  DAC_init();
 8000604:	f7ff fee6 	bl	80003d4 <DAC_init>

  /* Create Arrays and Variables for Circular Buffering */
  float inBuff[BUFFER_SIZE], outBuff[BUFFER_SIZE];
  uint16_t buffIDX = 0x0;
 8000608:	2300      	movs	r3, #0
 800060a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800060e:	f102 021c 	add.w	r2, r2, #28
 8000612:	8013      	strh	r3, [r2, #0]
  arm_rfft_fast_instance_f32 fftHandler;
  /* Clear outBuff to Prevent any Initial Unwanted Feedback */
  for (uint16_t i = 0x0; i < BUFFER_SIZE; i++) {
 8000614:	2300      	movs	r3, #0
 8000616:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800061a:	f102 021e 	add.w	r2, r2, #30
 800061e:	8013      	strh	r3, [r2, #0]
 8000620:	e017      	b.n	8000652 <main+0x62>
	  outBuff[i] = 0.0f;
 8000622:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000626:	f103 031e 	add.w	r3, r3, #30
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	f107 0220 	add.w	r2, r7, #32
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	4413      	add	r3, r2
 8000634:	3b04      	subs	r3, #4
 8000636:	f04f 0200 	mov.w	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
  for (uint16_t i = 0x0; i < BUFFER_SIZE; i++) {
 800063c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000640:	f103 031e 	add.w	r3, r3, #30
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800064c:	f102 021e 	add.w	r2, r2, #30
 8000650:	8013      	strh	r3, [r2, #0]
 8000652:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000656:	f103 031e 	add.w	r3, r3, #30
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000660:	d3df      	bcc.n	8000622 <main+0x32>
  }

  /* Initialize FFT Handler */
  arm_rfft_fast_init_f32(&fftHandler, BUFFER_SIZE);
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	3b1c      	subs	r3, #28
 8000668:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f883 	bl	8001778 <arm_rfft_fast_init_f32>

  /* Initialize TIM2 to Begin Sample Collection */
  TIM_init();
 8000672:	f7ff ff55 	bl	8000520 <TIM_init>


  while (1)
  {
	  /* Check if ARR has been Reached: Output and Collect New Sample */
	  if (Output_Flag) {
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <main+0xb8>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d004      	beq.n	8000688 <main+0x98>
//		  /* Output Value from Output Buffer to DAC (Converted to uint16_t from float) */
//		  DAC_Write((uint16_t) (FLOAT_TO_UINT16(outBuff[buffIDX]) * GAIN));

		  /* Begin ADC Conversion to Collect Guitar Sample */
		  ADC_collect();
 800067e:	f7ff fe7d 	bl	800037c <ADC_collect>

		  /* Clear ARR Flag */
		  Output_Flag = CLEAR;
 8000682:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <main+0xb8>)
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	  }

	  /* Process Collected Sample */
	  if (Input_Flag) {
 8000688:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <main+0xbc>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f2      	beq.n	8000676 <main+0x86>
//
//			  /* Apply iFFT and Replace Output Buffer */
//			  arm_rfft_fast_f32(&fftHandler, outBuff, outBuff, IFFT);
//		  }

		  DAC_Write((GtrSamp_DigVal * GAIN));
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <main+0xc0>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	b29b      	uxth	r3, r3
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff29 	bl	80004f0 <DAC_Write>
		  /* Clear ADC Flag */
		  Input_Flag = CLEAR;
 800069e:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <main+0xbc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
	  if (Output_Flag) {
 80006a4:	e7e7      	b.n	8000676 <main+0x86>
 80006a6:	bf00      	nop
 80006a8:	2000002b 	.word	0x2000002b
 80006ac:	2000002a 	.word	0x2000002a
 80006b0:	20000028 	.word	0x20000028

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b096      	sub	sp, #88	@ 0x58
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2244      	movs	r2, #68	@ 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 f8dc 	bl	8001880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006da:	f000 fa2f 	bl	8000b3c <HAL_PWREx_ControlVoltageScaling>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e4:	f000 f82c 	bl	8000740 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006e8:	2310      	movs	r3, #16
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80006f4:	2390      	movs	r3, #144	@ 0x90
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fa71 	bl	8000be8 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800070c:	f000 f818 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	2101      	movs	r1, #1
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe39 	bl	80013a0 <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000734:	f000 f804 	bl	8000740 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3758      	adds	r7, #88	@ 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <Error_Handler+0x8>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000756:	4a0e      	ldr	r2, [pc, #56]	@ (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6613      	str	r3, [r2, #96]	@ 0x60
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <HAL_MspInit+0x44>)
 8000760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	4a08      	ldr	r2, [pc, #32]	@ (8000790 <HAL_MspInit+0x44>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000774:	6593      	str	r3, [r2, #88]	@ 0x58
 8000776:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_MspInit+0x44>)
 8000778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800077a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <NMI_Handler+0x4>

0800079c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <MemManage_Handler+0x4>

080007ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <BusFault_Handler+0x4>

080007b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <UsageFault_Handler+0x4>

080007bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ea:	f000 f893 	bl	8000914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <SystemInit+0x20>)
 80007fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007fe:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <SystemInit+0x20>)
 8000800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000850 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800081c:	f7ff ffea 	bl	80007f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <LoopForever+0x6>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	@ (8000858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	@ (800085c <LoopForever+0xe>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	@ (8000864 <LoopForever+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000846:	f001 f823 	bl	8001890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800084a:	f7ff fed1 	bl	80005f0 <main>

0800084e <LoopForever>:

LoopForever:
    b LoopForever
 800084e:	e7fe      	b.n	800084e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000850:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800085c:	08014d90 	.word	0x08014d90
  ldr r2, =_sbss
 8000860:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000864:	20000030 	.word	0x20000030

08000868 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC3_IRQHandler>

0800086a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f91f 	bl	8000ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800087a:	200f      	movs	r0, #15
 800087c:	f000 f80e 	bl	800089c <HAL_InitTick>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d002      	beq.n	800088c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	e001      	b.n	8000890 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800088c:	f7ff ff5e 	bl	800074c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000890:	79fb      	ldrb	r3, [r7, #7]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HAL_InitTick+0x6c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d023      	beq.n	80008f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008b0:	4b16      	ldr	r3, [pc, #88]	@ (800090c <HAL_InitTick+0x70>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <HAL_InitTick+0x6c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f91d 	bl	8000b06 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d10f      	bne.n	80008f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d809      	bhi.n	80008ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f8f5 	bl	8000ace <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000910 <HAL_InitTick+0x74>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	e007      	b.n	80008fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008ec:	2301      	movs	r3, #1
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e004      	b.n	80008fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
 80008f6:	e001      	b.n	80008fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000008 	.word	0x20000008
 800090c:	20000000 	.word	0x20000000
 8000910:	20000004 	.word	0x20000004

08000914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	@ (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	2000002c 	.word	0x2000002c

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	@ (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000002c 	.word	0x2000002c

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	@ (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	db0a      	blt.n	80009e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	490c      	ldr	r1, [pc, #48]	@ (8000a04 <__NVIC_SetPriority+0x4c>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	0112      	lsls	r2, r2, #4
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	440b      	add	r3, r1
 80009dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e0:	e00a      	b.n	80009f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4908      	ldr	r1, [pc, #32]	@ (8000a08 <__NVIC_SetPriority+0x50>)
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	3b04      	subs	r3, #4
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	440b      	add	r3, r1
 80009f6:	761a      	strb	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000e100 	.word	0xe000e100
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b089      	sub	sp, #36	@ 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f1c3 0307 	rsb	r3, r3, #7
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	bf28      	it	cs
 8000a2a:	2304      	movcs	r3, #4
 8000a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3304      	adds	r3, #4
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d902      	bls.n	8000a3c <NVIC_EncodePriority+0x30>
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3b03      	subs	r3, #3
 8000a3a:	e000      	b.n	8000a3e <NVIC_EncodePriority+0x32>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a40:	f04f 32ff 	mov.w	r2, #4294967295
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	401a      	ands	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a54:	f04f 31ff 	mov.w	r1, #4294967295
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5e:	43d9      	mvns	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a64:	4313      	orrs	r3, r2
         );
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3724      	adds	r7, #36	@ 0x24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a84:	d301      	bcc.n	8000a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00f      	b.n	8000aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a92:	210f      	movs	r1, #15
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f7ff ff8e 	bl	80009b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <SysTick_Config+0x40>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa2:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <SysTick_Config+0x40>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff47 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60b9      	str	r1, [r7, #8]
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae0:	f7ff ff5c 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000ae4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	68b9      	ldr	r1, [r7, #8]
 8000aea:	6978      	ldr	r0, [r7, #20]
 8000aec:	f7ff ff8e 	bl	8000a0c <NVIC_EncodePriority>
 8000af0:	4602      	mov	r2, r0
 8000af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff5d 	bl	80009b8 <__NVIC_SetPriority>
}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffb0 	bl	8000a74 <SysTick_Config>
 8000b14:	4603      	mov	r3, r0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40007000 	.word	0x40007000

08000b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b4a:	d130      	bne.n	8000bae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b4c:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b58:	d038      	beq.n	8000bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b5a:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000b62:	4a1e      	ldr	r2, [pc, #120]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2232      	movs	r2, #50	@ 0x32
 8000b70:	fb02 f303 	mul.w	r3, r2, r3
 8000b74:	4a1b      	ldr	r2, [pc, #108]	@ (8000be4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b76:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7a:	0c9b      	lsrs	r3, r3, #18
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b80:	e002      	b.n	8000b88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b94:	d102      	bne.n	8000b9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1f2      	bne.n	8000b82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ba8:	d110      	bne.n	8000bcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000baa:	2303      	movs	r3, #3
 8000bac:	e00f      	b.n	8000bce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bae:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bba:	d007      	beq.n	8000bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bc4:	4a05      	ldr	r2, [pc, #20]	@ (8000bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	40007000 	.word	0x40007000
 8000be0:	20000000 	.word	0x20000000
 8000be4:	431bde83 	.word	0x431bde83

08000be8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e3ca      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bfa:	4b97      	ldr	r3, [pc, #604]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c04:	4b94      	ldr	r3, [pc, #592]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80e4 	beq.w	8000de4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <HAL_RCC_OscConfig+0x4a>
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	2b0c      	cmp	r3, #12
 8000c26:	f040 808b 	bne.w	8000d40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	f040 8087 	bne.w	8000d40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c32:	4b89      	ldr	r3, [pc, #548]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <HAL_RCC_OscConfig+0x62>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e3a2      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6a1a      	ldr	r2, [r3, #32]
 8000c4e:	4b82      	ldr	r3, [pc, #520]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0308 	and.w	r3, r3, #8
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d004      	beq.n	8000c64 <HAL_RCC_OscConfig+0x7c>
 8000c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c62:	e005      	b.n	8000c70 <HAL_RCC_OscConfig+0x88>
 8000c64:	4b7c      	ldr	r3, [pc, #496]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d223      	bcs.n	8000cbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 fd1d 	bl	80016b8 <RCC_SetFlashLatencyFromMSIRange>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e383      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c88:	4b73      	ldr	r3, [pc, #460]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a72      	ldr	r2, [pc, #456]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c8e:	f043 0308 	orr.w	r3, r3, #8
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b70      	ldr	r3, [pc, #448]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	496d      	ldr	r1, [pc, #436]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	4968      	ldr	r1, [pc, #416]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	604b      	str	r3, [r1, #4]
 8000cba:	e025      	b.n	8000d08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cbc:	4b66      	ldr	r3, [pc, #408]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a65      	ldr	r2, [pc, #404]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000cc2:	f043 0308 	orr.w	r3, r3, #8
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b63      	ldr	r3, [pc, #396]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	4960      	ldr	r1, [pc, #384]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cda:	4b5f      	ldr	r3, [pc, #380]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	495b      	ldr	r1, [pc, #364]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 fcdd 	bl	80016b8 <RCC_SetFlashLatencyFromMSIRange>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e343      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d08:	f000 fc4a 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	4b52      	ldr	r3, [pc, #328]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	091b      	lsrs	r3, r3, #4
 8000d14:	f003 030f 	and.w	r3, r3, #15
 8000d18:	4950      	ldr	r1, [pc, #320]	@ (8000e5c <HAL_RCC_OscConfig+0x274>)
 8000d1a:	5ccb      	ldrb	r3, [r1, r3]
 8000d1c:	f003 031f 	and.w	r3, r3, #31
 8000d20:	fa22 f303 	lsr.w	r3, r2, r3
 8000d24:	4a4e      	ldr	r2, [pc, #312]	@ (8000e60 <HAL_RCC_OscConfig+0x278>)
 8000d26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d28:	4b4e      	ldr	r3, [pc, #312]	@ (8000e64 <HAL_RCC_OscConfig+0x27c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fdb5 	bl	800089c <HAL_InitTick>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d052      	beq.n	8000de2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	e327      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d032      	beq.n	8000dae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d48:	4b43      	ldr	r3, [pc, #268]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a42      	ldr	r2, [pc, #264]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d4e:	f043 0301 	orr.w	r3, r3, #1
 8000d52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fdf2 	bl	800093c <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fdee 	bl	800093c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e310      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f0      	beq.n	8000d5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d7a:	4b37      	ldr	r3, [pc, #220]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a36      	ldr	r2, [pc, #216]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	4b34      	ldr	r3, [pc, #208]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	4931      	ldr	r1, [pc, #196]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d98:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	492c      	ldr	r1, [pc, #176]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000da8:	4313      	orrs	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
 8000dac:	e01a      	b.n	8000de4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dae:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dba:	f7ff fdbf 	bl	800093c <HAL_GetTick>
 8000dbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dc2:	f7ff fdbb 	bl	800093c <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e2dd      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1f0      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x1da>
 8000de0:	e000      	b.n	8000de4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000de2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d074      	beq.n	8000eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d005      	beq.n	8000e02 <HAL_RCC_OscConfig+0x21a>
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	2b0c      	cmp	r3, #12
 8000dfa:	d10e      	bne.n	8000e1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d10b      	bne.n	8000e1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d064      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x2f0>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d160      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e2ba      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e22:	d106      	bne.n	8000e32 <HAL_RCC_OscConfig+0x24a>
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e026      	b.n	8000e80 <HAL_RCC_OscConfig+0x298>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e3a:	d115      	bne.n	8000e68 <HAL_RCC_OscConfig+0x280>
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000e42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a02      	ldr	r2, [pc, #8]	@ (8000e58 <HAL_RCC_OscConfig+0x270>)
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e014      	b.n	8000e80 <HAL_RCC_OscConfig+0x298>
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	080018f0 	.word	0x080018f0
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000004 	.word	0x20000004
 8000e68:	4ba0      	ldr	r3, [pc, #640]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a9f      	ldr	r2, [pc, #636]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b9d      	ldr	r3, [pc, #628]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a9c      	ldr	r2, [pc, #624]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d013      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e88:	f7ff fd58 	bl	800093c <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e90:	f7ff fd54 	bl	800093c <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b64      	cmp	r3, #100	@ 0x64
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e276      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ea2:	4b92      	ldr	r3, [pc, #584]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f0      	beq.n	8000e90 <HAL_RCC_OscConfig+0x2a8>
 8000eae:	e014      	b.n	8000eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fd44 	bl	800093c <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fd40 	bl	800093c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b64      	cmp	r3, #100	@ 0x64
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e262      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000eca:	4b88      	ldr	r3, [pc, #544]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x2d0>
 8000ed6:	e000      	b.n	8000eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d060      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d005      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x310>
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d119      	bne.n	8000f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d116      	bne.n	8000f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d005      	beq.n	8000f10 <HAL_RCC_OscConfig+0x328>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e23f      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b76      	ldr	r3, [pc, #472]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	061b      	lsls	r3, r3, #24
 8000f1e:	4973      	ldr	r1, [pc, #460]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f24:	e040      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d023      	beq.n	8000f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a6e      	ldr	r2, [pc, #440]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fcff 	bl	800093c <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f42:	f7ff fcfb 	bl	800093c <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e21d      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f54:	4b65      	ldr	r3, [pc, #404]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b62      	ldr	r3, [pc, #392]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	495f      	ldr	r1, [pc, #380]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
 8000f74:	e018      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f76:	4b5d      	ldr	r3, [pc, #372]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f82:	f7ff fcdb 	bl	800093c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fcd7 	bl	800093c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e1f9      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f9c:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f0      	bne.n	8000f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 0308 	and.w	r3, r3, #8
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d03c      	beq.n	800102e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d01c      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fcb6 	bl	800093c <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fcb2 	bl	800093c <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e1d4      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000fe6:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0ef      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x3ec>
 8000ff4:	e01b      	b.n	800102e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ffc:	4a3b      	ldr	r2, [pc, #236]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001006:	f7ff fc99 	bl	800093c <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100e:	f7ff fc95 	bl	800093c <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e1b7      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001020:	4b32      	ldr	r3, [pc, #200]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8001022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1ef      	bne.n	800100e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80a6 	beq.w	8001188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d10d      	bne.n	8001068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	4b27      	ldr	r3, [pc, #156]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	4a26      	ldr	r2, [pc, #152]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 8001052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001056:	6593      	str	r3, [r2, #88]	@ 0x58
 8001058:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001064:	2301      	movs	r3, #1
 8001066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001068:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <HAL_RCC_OscConfig+0x508>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001070:	2b00      	cmp	r3, #0
 8001072:	d118      	bne.n	80010a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001074:	4b1e      	ldr	r3, [pc, #120]	@ (80010f0 <HAL_RCC_OscConfig+0x508>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1d      	ldr	r2, [pc, #116]	@ (80010f0 <HAL_RCC_OscConfig+0x508>)
 800107a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800107e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001080:	f7ff fc5c 	bl	800093c <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001088:	f7ff fc58 	bl	800093c <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e17a      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <HAL_RCC_OscConfig+0x508>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d0f0      	beq.n	8001088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d108      	bne.n	80010c0 <HAL_RCC_OscConfig+0x4d8>
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 80010b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010be:	e029      	b.n	8001114 <HAL_RCC_OscConfig+0x52c>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d115      	bne.n	80010f4 <HAL_RCC_OscConfig+0x50c>
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010ce:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 80010da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010de:	4a03      	ldr	r2, [pc, #12]	@ (80010ec <HAL_RCC_OscConfig+0x504>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010e8:	e014      	b.n	8001114 <HAL_RCC_OscConfig+0x52c>
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40007000 	.word	0x40007000
 80010f4:	4b9c      	ldr	r3, [pc, #624]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80010f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010fa:	4a9b      	ldr	r2, [pc, #620]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001104:	4b98      	ldr	r3, [pc, #608]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800110a:	4a97      	ldr	r2, [pc, #604]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800110c:	f023 0304 	bic.w	r3, r3, #4
 8001110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d016      	beq.n	800114a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111c:	f7ff fc0e 	bl	800093c <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001122:	e00a      	b.n	800113a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001124:	f7ff fc0a 	bl	800093c <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001132:	4293      	cmp	r3, r2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e12a      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800113a:	4b8b      	ldr	r3, [pc, #556]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800113c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0ed      	beq.n	8001124 <HAL_RCC_OscConfig+0x53c>
 8001148:	e015      	b.n	8001176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800114a:	f7ff fbf7 	bl	800093c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001152:	f7ff fbf3 	bl	800093c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001160:	4293      	cmp	r3, r2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e113      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001168:	4b7f      	ldr	r3, [pc, #508]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1ed      	bne.n	8001152 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001176:	7ffb      	ldrb	r3, [r7, #31]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d105      	bne.n	8001188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800117c:	4b7a      	ldr	r3, [pc, #488]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	4a79      	ldr	r2, [pc, #484]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001186:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80fe 	beq.w	800138e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001196:	2b02      	cmp	r3, #2
 8001198:	f040 80d0 	bne.w	800133c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800119c:	4b72      	ldr	r3, [pc, #456]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d130      	bne.n	8001212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	3b01      	subs	r3, #1
 80011bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	429a      	cmp	r2, r3
 80011c0:	d127      	bne.n	8001212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d11f      	bne.n	8001212 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80011dc:	2a07      	cmp	r2, #7
 80011de:	bf14      	ite	ne
 80011e0:	2201      	movne	r2, #1
 80011e2:	2200      	moveq	r2, #0
 80011e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d113      	bne.n	8001212 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011f4:	085b      	lsrs	r3, r3, #1
 80011f6:	3b01      	subs	r3, #1
 80011f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d109      	bne.n	8001212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	085b      	lsrs	r3, r3, #1
 800120a:	3b01      	subs	r3, #1
 800120c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800120e:	429a      	cmp	r2, r3
 8001210:	d06e      	beq.n	80012f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d069      	beq.n	80012ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001218:	4b53      	ldr	r3, [pc, #332]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001224:	4b50      	ldr	r3, [pc, #320]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0ad      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001234:	4b4c      	ldr	r3, [pc, #304]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a4b      	ldr	r2, [pc, #300]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800123a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800123e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001240:	f7ff fb7c 	bl	800093c <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001248:	f7ff fb78 	bl	800093c <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e09a      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800125a:	4b43      	ldr	r3, [pc, #268]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001266:	4b40      	ldr	r3, [pc, #256]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	4b40      	ldr	r3, [pc, #256]	@ (800136c <HAL_RCC_OscConfig+0x784>)
 800126c:	4013      	ands	r3, r2
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001276:	3a01      	subs	r2, #1
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	4311      	orrs	r1, r2
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001280:	0212      	lsls	r2, r2, #8
 8001282:	4311      	orrs	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001288:	0852      	lsrs	r2, r2, #1
 800128a:	3a01      	subs	r2, #1
 800128c:	0552      	lsls	r2, r2, #21
 800128e:	4311      	orrs	r1, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001294:	0852      	lsrs	r2, r2, #1
 8001296:	3a01      	subs	r2, #1
 8001298:	0652      	lsls	r2, r2, #25
 800129a:	4311      	orrs	r1, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80012a0:	0912      	lsrs	r2, r2, #4
 80012a2:	0452      	lsls	r2, r2, #17
 80012a4:	430a      	orrs	r2, r1
 80012a6:	4930      	ldr	r1, [pc, #192]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012c4:	f7ff fb3a 	bl	800093c <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff fb36 	bl	800093c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e058      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012de:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80012ea:	e050      	b.n	800138e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e04f      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d148      	bne.n	800138e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80012fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001306:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a16      	ldr	r2, [pc, #88]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 800130e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001312:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001314:	f7ff fb12 	bl	800093c <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fb0e 	bl	800093c <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e030      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x734>
 800133a:	e028      	b.n	800138e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b0c      	cmp	r3, #12
 8001340:	d023      	beq.n	800138a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <HAL_RCC_OscConfig+0x780>)
 8001348:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800134c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff faf5 	bl	800093c <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001354:	e00c      	b.n	8001370 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff faf1 	bl	800093c <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d905      	bls.n	8001370 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e013      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
 8001368:	40021000 	.word	0x40021000
 800136c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_OscConfig+0x7b0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1ec      	bne.n	8001356 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_RCC_OscConfig+0x7b0>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4905      	ldr	r1, [pc, #20]	@ (8001398 <HAL_RCC_OscConfig+0x7b0>)
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_RCC_OscConfig+0x7b4>)
 8001384:	4013      	ands	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
 8001388:	e001      	b.n	800138e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3720      	adds	r7, #32
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	feeefffc 	.word	0xfeeefffc

080013a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0e7      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b75      	ldr	r3, [pc, #468]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d910      	bls.n	80013e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b72      	ldr	r3, [pc, #456]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 0207 	bic.w	r2, r3, #7
 80013ca:	4970      	ldr	r1, [pc, #448]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d2:	4b6e      	ldr	r3, [pc, #440]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0cf      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d010      	beq.n	8001412 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	4b66      	ldr	r3, [pc, #408]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d908      	bls.n	8001412 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001400:	4b63      	ldr	r3, [pc, #396]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	4960      	ldr	r1, [pc, #384]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 800140e:	4313      	orrs	r3, r2
 8001410:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d04c      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d107      	bne.n	8001436 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001426:	4b5a      	ldr	r3, [pc, #360]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d121      	bne.n	8001476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e0a6      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143e:	4b54      	ldr	r3, [pc, #336]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d115      	bne.n	8001476 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e09a      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001456:	4b4e      	ldr	r3, [pc, #312]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e08e      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001466:	4b4a      	ldr	r3, [pc, #296]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e086      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001476:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f023 0203 	bic.w	r2, r3, #3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4943      	ldr	r1, [pc, #268]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001488:	f7ff fa58 	bl	800093c <HAL_GetTick>
 800148c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001490:	f7ff fa54 	bl	800093c <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e06e      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 020c 	and.w	r2, r3, #12
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d1eb      	bne.n	8001490 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d010      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d208      	bcs.n	80014e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	492b      	ldr	r1, [pc, #172]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d210      	bcs.n	8001516 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f4:	4b25      	ldr	r3, [pc, #148]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 0207 	bic.w	r2, r3, #7
 80014fc:	4923      	ldr	r1, [pc, #140]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <HAL_RCC_ClockConfig+0x1ec>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e036      	b.n	8001584 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0304 	and.w	r3, r3, #4
 800151e:	2b00      	cmp	r3, #0
 8001520:	d008      	beq.n	8001534 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001522:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	4918      	ldr	r1, [pc, #96]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001530:	4313      	orrs	r3, r2
 8001532:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d009      	beq.n	8001554 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4910      	ldr	r1, [pc, #64]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001550:	4313      	orrs	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001554:	f000 f824 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 8001558:	4602      	mov	r2, r0
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	490b      	ldr	r1, [pc, #44]	@ (8001594 <HAL_RCC_ClockConfig+0x1f4>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	f003 031f 	and.w	r3, r3, #31
 800156c:	fa22 f303 	lsr.w	r3, r2, r3
 8001570:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001572:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_ClockConfig+0x1fc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f98f 	bl	800089c <HAL_InitTick>
 800157e:	4603      	mov	r3, r0
 8001580:	72fb      	strb	r3, [r7, #11]

  return status;
 8001582:	7afb      	ldrb	r3, [r7, #11]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40022000 	.word	0x40022000
 8001590:	40021000 	.word	0x40021000
 8001594:	080018f0 	.word	0x080018f0
 8001598:	20000000 	.word	0x20000000
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	@ 0x24
 80015a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ae:	4b3e      	ldr	r3, [pc, #248]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b8:	4b3b      	ldr	r3, [pc, #236]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	2b0c      	cmp	r3, #12
 80015cc:	d121      	bne.n	8001612 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d11e      	bne.n	8001612 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015d4:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015e0:	4b31      	ldr	r3, [pc, #196]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e6:	0a1b      	lsrs	r3, r3, #8
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	61fb      	str	r3, [r7, #28]
 80015ee:	e005      	b.n	80015fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015f0:	4b2d      	ldr	r3, [pc, #180]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80015fc:	4a2b      	ldr	r2, [pc, #172]	@ (80016ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001604:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10d      	bne.n	8001628 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b04      	cmp	r3, #4
 8001616:	d102      	bne.n	800161e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800161a:	61bb      	str	r3, [r7, #24]
 800161c:	e004      	b.n	8001628 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2b08      	cmp	r3, #8
 8001622:	d101      	bne.n	8001628 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001624:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001626:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d134      	bne.n	8001698 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_RCC_GetSysClockFreq+0xa6>
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b03      	cmp	r3, #3
 8001642:	d003      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0xac>
 8001644:	e005      	b.n	8001652 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001646:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001648:	617b      	str	r3, [r7, #20]
      break;
 800164a:	e005      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800164e:	617b      	str	r3, [r7, #20]
      break;
 8001650:	e002      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	617b      	str	r3, [r7, #20]
      break;
 8001656:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	3301      	adds	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	fb03 f202 	mul.w	r2, r3, r2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	0e5b      	lsrs	r3, r3, #25
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	3301      	adds	r3, #1
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001698:	69bb      	ldr	r3, [r7, #24]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	08001900 	.word	0x08001900
 80016b0:	00f42400 	.word	0x00f42400
 80016b4:	007a1200 	.word	0x007a1200

080016b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80016d0:	f7ff fa26 	bl	8000b20 <HAL_PWREx_GetVoltageRange>
 80016d4:	6178      	str	r0, [r7, #20]
 80016d6:	e014      	b.n	8001702 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016d8:	4b25      	ldr	r3, [pc, #148]	@ (8001770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016dc:	4a24      	ldr	r2, [pc, #144]	@ (8001770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e4:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80016f0:	f7ff fa16 	bl	8000b20 <HAL_PWREx_GetVoltageRange>
 80016f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80016f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001770 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001708:	d10b      	bne.n	8001722 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b80      	cmp	r3, #128	@ 0x80
 800170e:	d919      	bls.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2ba0      	cmp	r3, #160	@ 0xa0
 8001714:	d902      	bls.n	800171c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001716:	2302      	movs	r3, #2
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	e013      	b.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800171c:	2301      	movs	r3, #1
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	e010      	b.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b80      	cmp	r3, #128	@ 0x80
 8001726:	d902      	bls.n	800172e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001728:	2303      	movs	r3, #3
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	e00a      	b.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b80      	cmp	r3, #128	@ 0x80
 8001732:	d102      	bne.n	800173a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001734:	2302      	movs	r3, #2
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	e004      	b.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b70      	cmp	r3, #112	@ 0x70
 800173e:	d101      	bne.n	8001744 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001744:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f023 0207 	bic.w	r2, r3, #7
 800174c:	4909      	ldr	r1, [pc, #36]	@ (8001774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	429a      	cmp	r2, r3
 8001760:	d001      	beq.n	8001766 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40021000 	.word	0x40021000
 8001774:	40022000 	.word	0x40022000

08001778 <arm_rfft_fast_init_f32>:
 8001778:	084b      	lsrs	r3, r1, #1
 800177a:	2b80      	cmp	r3, #128	@ 0x80
 800177c:	b410      	push	{r4}
 800177e:	8201      	strh	r1, [r0, #16]
 8001780:	8003      	strh	r3, [r0, #0]
 8001782:	d047      	beq.n	8001814 <arm_rfft_fast_init_f32+0x9c>
 8001784:	d917      	bls.n	80017b6 <arm_rfft_fast_init_f32+0x3e>
 8001786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800178a:	d03d      	beq.n	8001808 <arm_rfft_fast_init_f32+0x90>
 800178c:	d929      	bls.n	80017e2 <arm_rfft_fast_init_f32+0x6a>
 800178e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001792:	d020      	beq.n	80017d6 <arm_rfft_fast_init_f32+0x5e>
 8001794:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001798:	d113      	bne.n	80017c2 <arm_rfft_fast_init_f32+0x4a>
 800179a:	4921      	ldr	r1, [pc, #132]	@ (8001820 <arm_rfft_fast_init_f32+0xa8>)
 800179c:	4a21      	ldr	r2, [pc, #132]	@ (8001824 <arm_rfft_fast_init_f32+0xac>)
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <arm_rfft_fast_init_f32+0xb0>)
 80017a0:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80017a4:	8184      	strh	r4, [r0, #12]
 80017a6:	6081      	str	r1, [r0, #8]
 80017a8:	6042      	str	r2, [r0, #4]
 80017aa:	6143      	str	r3, [r0, #20]
 80017ac:	2000      	movs	r0, #0
 80017ae:	b240      	sxtb	r0, r0
 80017b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d01c      	beq.n	80017f4 <arm_rfft_fast_init_f32+0x7c>
 80017ba:	2b40      	cmp	r3, #64	@ 0x40
 80017bc:	d006      	beq.n	80017cc <arm_rfft_fast_init_f32+0x54>
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d01d      	beq.n	80017fe <arm_rfft_fast_init_f32+0x86>
 80017c2:	20ff      	movs	r0, #255	@ 0xff
 80017c4:	b240      	sxtb	r0, r0
 80017c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	2438      	movs	r4, #56	@ 0x38
 80017ce:	4917      	ldr	r1, [pc, #92]	@ (800182c <arm_rfft_fast_init_f32+0xb4>)
 80017d0:	4a17      	ldr	r2, [pc, #92]	@ (8001830 <arm_rfft_fast_init_f32+0xb8>)
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <arm_rfft_fast_init_f32+0xbc>)
 80017d4:	e7e6      	b.n	80017a4 <arm_rfft_fast_init_f32+0x2c>
 80017d6:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80017da:	4917      	ldr	r1, [pc, #92]	@ (8001838 <arm_rfft_fast_init_f32+0xc0>)
 80017dc:	4a17      	ldr	r2, [pc, #92]	@ (800183c <arm_rfft_fast_init_f32+0xc4>)
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <arm_rfft_fast_init_f32+0xc8>)
 80017e0:	e7e0      	b.n	80017a4 <arm_rfft_fast_init_f32+0x2c>
 80017e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e6:	d1ec      	bne.n	80017c2 <arm_rfft_fast_init_f32+0x4a>
 80017e8:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 80017ec:	4915      	ldr	r1, [pc, #84]	@ (8001844 <arm_rfft_fast_init_f32+0xcc>)
 80017ee:	4a16      	ldr	r2, [pc, #88]	@ (8001848 <arm_rfft_fast_init_f32+0xd0>)
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <arm_rfft_fast_init_f32+0xd4>)
 80017f2:	e7d7      	b.n	80017a4 <arm_rfft_fast_init_f32+0x2c>
 80017f4:	2430      	movs	r4, #48	@ 0x30
 80017f6:	4916      	ldr	r1, [pc, #88]	@ (8001850 <arm_rfft_fast_init_f32+0xd8>)
 80017f8:	4a16      	ldr	r2, [pc, #88]	@ (8001854 <arm_rfft_fast_init_f32+0xdc>)
 80017fa:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <arm_rfft_fast_init_f32+0xe0>)
 80017fc:	e7d2      	b.n	80017a4 <arm_rfft_fast_init_f32+0x2c>
 80017fe:	2414      	movs	r4, #20
 8001800:	4916      	ldr	r1, [pc, #88]	@ (800185c <arm_rfft_fast_init_f32+0xe4>)
 8001802:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <arm_rfft_fast_init_f32+0xe8>)
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <arm_rfft_fast_init_f32+0xec>)
 8001806:	e7cd      	b.n	80017a4 <arm_rfft_fast_init_f32+0x2c>
 8001808:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 800180c:	4916      	ldr	r1, [pc, #88]	@ (8001868 <arm_rfft_fast_init_f32+0xf0>)
 800180e:	4a17      	ldr	r2, [pc, #92]	@ (800186c <arm_rfft_fast_init_f32+0xf4>)
 8001810:	4b17      	ldr	r3, [pc, #92]	@ (8001870 <arm_rfft_fast_init_f32+0xf8>)
 8001812:	e7c7      	b.n	80017a4 <arm_rfft_fast_init_f32+0x2c>
 8001814:	24d0      	movs	r4, #208	@ 0xd0
 8001816:	4917      	ldr	r1, [pc, #92]	@ (8001874 <arm_rfft_fast_init_f32+0xfc>)
 8001818:	4a17      	ldr	r2, [pc, #92]	@ (8001878 <arm_rfft_fast_init_f32+0x100>)
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <arm_rfft_fast_init_f32+0x104>)
 800181c:	e7c2      	b.n	80017a4 <arm_rfft_fast_init_f32+0x2c>
 800181e:	bf00      	nop
 8001820:	08010738 	.word	0x08010738
 8001824:	08001930 	.word	0x08001930
 8001828:	08007aa0 	.word	0x08007aa0
 800182c:	08005a30 	.word	0x08005a30
 8001830:	080124f8 	.word	0x080124f8
 8001834:	080149e8 	.word	0x080149e8
 8001838:	0800e420 	.word	0x0800e420
 800183c:	0800c320 	.word	0x0800c320
 8001840:	08005aa0 	.word	0x08005aa0
 8001844:	08014678 	.word	0x08014678
 8001848:	0800baa0 	.word	0x0800baa0
 800184c:	080126f8 	.word	0x080126f8
 8001850:	0800f2d8 	.word	0x0800f2d8
 8001854:	0800e320 	.word	0x0800e320
 8001858:	08005930 	.word	0x08005930
 800185c:	0800f230 	.word	0x0800f230
 8001860:	0800c2a0 	.word	0x0800c2a0
 8001864:	0800f258 	.word	0x0800f258
 8001868:	08012ef8 	.word	0x08012ef8
 800186c:	0800f738 	.word	0x0800f738
 8001870:	08013278 	.word	0x08013278
 8001874:	08014be8 	.word	0x08014be8
 8001878:	0800f338 	.word	0x0800f338
 800187c:	08014278 	.word	0x08014278

08001880 <memset>:
 8001880:	4402      	add	r2, r0
 8001882:	4603      	mov	r3, r0
 8001884:	4293      	cmp	r3, r2
 8001886:	d100      	bne.n	800188a <memset+0xa>
 8001888:	4770      	bx	lr
 800188a:	f803 1b01 	strb.w	r1, [r3], #1
 800188e:	e7f9      	b.n	8001884 <memset+0x4>

08001890 <__libc_init_array>:
 8001890:	b570      	push	{r4, r5, r6, lr}
 8001892:	4d0d      	ldr	r5, [pc, #52]	@ (80018c8 <__libc_init_array+0x38>)
 8001894:	4c0d      	ldr	r4, [pc, #52]	@ (80018cc <__libc_init_array+0x3c>)
 8001896:	1b64      	subs	r4, r4, r5
 8001898:	10a4      	asrs	r4, r4, #2
 800189a:	2600      	movs	r6, #0
 800189c:	42a6      	cmp	r6, r4
 800189e:	d109      	bne.n	80018b4 <__libc_init_array+0x24>
 80018a0:	4d0b      	ldr	r5, [pc, #44]	@ (80018d0 <__libc_init_array+0x40>)
 80018a2:	4c0c      	ldr	r4, [pc, #48]	@ (80018d4 <__libc_init_array+0x44>)
 80018a4:	f000 f818 	bl	80018d8 <_init>
 80018a8:	1b64      	subs	r4, r4, r5
 80018aa:	10a4      	asrs	r4, r4, #2
 80018ac:	2600      	movs	r6, #0
 80018ae:	42a6      	cmp	r6, r4
 80018b0:	d105      	bne.n	80018be <__libc_init_array+0x2e>
 80018b2:	bd70      	pop	{r4, r5, r6, pc}
 80018b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b8:	4798      	blx	r3
 80018ba:	3601      	adds	r6, #1
 80018bc:	e7ee      	b.n	800189c <__libc_init_array+0xc>
 80018be:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c2:	4798      	blx	r3
 80018c4:	3601      	adds	r6, #1
 80018c6:	e7f2      	b.n	80018ae <__libc_init_array+0x1e>
 80018c8:	08014d88 	.word	0x08014d88
 80018cc:	08014d88 	.word	0x08014d88
 80018d0:	08014d88 	.word	0x08014d88
 80018d4:	08014d8c 	.word	0x08014d8c

080018d8 <_init>:
 80018d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018da:	bf00      	nop
 80018dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018de:	bc08      	pop	{r3}
 80018e0:	469e      	mov	lr, r3
 80018e2:	4770      	bx	lr

080018e4 <_fini>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	bf00      	nop
 80018e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ea:	bc08      	pop	{r3}
 80018ec:	469e      	mov	lr, r3
 80018ee:	4770      	bx	lr
