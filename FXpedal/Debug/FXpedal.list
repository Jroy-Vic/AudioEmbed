
FXpedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002f20  08002f20  00003f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f78  08002f78  00004064  2**0
                  CONTENTS
  4 .ARM          00000000  08002f78  08002f78  00004064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f78  08002f78  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f78  08002f78  00003f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f7c  08002f7c  00003f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08002f80  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000064  08002fe4  00004064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08002fe4  000041f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a12  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8b  00000000  00000000  0000aaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0000c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053b  00000000  00000000  0000cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026caf  00000000  00000000  0000d1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b793  00000000  00000000  00033e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2e4c  00000000  00000000  0003f60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122459  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e40  00000000  00000000  0012249c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001242dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f08 	.word	0x08002f08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	08002f08 	.word	0x08002f08

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <ADC_init>:
 * Single Conversion, initiated with SC Bit
 * Using sampler; Hold timer with sample time of 2.5 clocks
 * 12-bit Conversion using 3.3V Reference
 * Configure analog input pin
 */
void ADC_init() {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
	/* Configure Analog Input Pin for Channel 1 (PC0) */
	/* Enable GPIOC Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8000bbc <ADC_init+0x1b8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a6b      	ldr	r2, [pc, #428]	@ (8000bbc <ADC_init+0x1b8>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
	/* Configure PC0 to be PP, No PUPDR, and High-Speed */
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT0;
 8000a16:	4b6a      	ldr	r3, [pc, #424]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	4a69      	ldr	r2, [pc, #420]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a1c:	f023 0301 	bic.w	r3, r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPD0;
 8000a22:	4b67      	ldr	r3, [pc, #412]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	4a66      	ldr	r2, [pc, #408]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a28:	f023 0303 	bic.w	r3, r3, #3
 8000a2c:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR |= GPIO_OSPEEDR_OSPEED0;
 8000a2e:	4b64      	ldr	r3, [pc, #400]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	4a63      	ldr	r2, [pc, #396]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a34:	f043 0303 	orr.w	r3, r3, #3
 8000a38:	6093      	str	r3, [r2, #8]
	/* Set GPIO to Analog Mode for ADC (11) */
	GPIOC->MODER |= GPIO_MODER_MODE0;
 8000a3a:	4b61      	ldr	r3, [pc, #388]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4a60      	ldr	r2, [pc, #384]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a40:	f043 0303 	orr.w	r3, r3, #3
 8000a44:	6013      	str	r3, [r2, #0]
	/* Connect Analog Switch to the ADC Input (1) */
	GPIOC->ASCR |= GPIO_ASCR_ASC0;
 8000a46:	4b5e      	ldr	r3, [pc, #376]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4a:	4a5d      	ldr	r2, [pc, #372]	@ (8000bc0 <ADC_init+0x1bc>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Enable 48MHz ADC Clock and set to Synchronous Mode */
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN;
 8000a52:	4b5a      	ldr	r3, [pc, #360]	@ (8000bbc <ADC_init+0x1b8>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a59      	ldr	r2, [pc, #356]	@ (8000bbc <ADC_init+0x1b8>)
 8000a58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	ADC123_COMMON->CCR |= ADC_CCR_CKMODE;
 8000a5e:	4b59      	ldr	r3, [pc, #356]	@ (8000bc4 <ADC_init+0x1c0>)
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	4a58      	ldr	r2, [pc, #352]	@ (8000bc4 <ADC_init+0x1c0>)
 8000a64:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8000a68:	6093      	str	r3, [r2, #8]

	/* Power Up ADC (Turn off Deep Power Down Mode) */
	ADC1->CR &= ~ADC_CR_DEEPPWD;
 8000a6a:	4b57      	ldr	r3, [pc, #348]	@ (8000bc8 <ADC_init+0x1c4>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	4a56      	ldr	r2, [pc, #344]	@ (8000bc8 <ADC_init+0x1c4>)
 8000a70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000a74:	6093      	str	r3, [r2, #8]
	/* Enable Voltage Regulator */
	ADC1->CR |= ADC_CR_ADVREGEN;
 8000a76:	4b54      	ldr	r3, [pc, #336]	@ (8000bc8 <ADC_init+0x1c4>)
 8000a78:	689b      	ldr	r3, [r3, #8]
 8000a7a:	4a53      	ldr	r2, [pc, #332]	@ (8000bc8 <ADC_init+0x1c4>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	6093      	str	r3, [r2, #8]
	/* Wait 20 us to ensure regulator startup time has elapsed */
	for (uint8_t i = 0; i < TWENTYU_DELAY; i++);
 8000a82:	2300      	movs	r3, #0
 8000a84:	71fb      	strb	r3, [r7, #7]
 8000a86:	e002      	b.n	8000a8e <ADC_init+0x8a>
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b4f      	cmp	r3, #79	@ 0x4f
 8000a92:	d9f9      	bls.n	8000a88 <ADC_init+0x84>
	while (!(ADC1->CR & ADC_CR_ADVREGEN));
 8000a94:	bf00      	nop
 8000a96:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc8 <ADC_init+0x1c4>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <ADC_init+0x92>

	/* Ensure ADC is Disabled*/
	ADC1->CR &= ~ADC_CR_ADEN;
 8000aa2:	4b49      	ldr	r3, [pc, #292]	@ (8000bc8 <ADC_init+0x1c4>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4a48      	ldr	r2, [pc, #288]	@ (8000bc8 <ADC_init+0x1c4>)
 8000aa8:	f023 0301 	bic.w	r3, r3, #1
 8000aac:	6093      	str	r3, [r2, #8]

	/* Select Input Mode for Calibration (Single-ended Input [0]) */
	ADC1->CR &= ~ADC_CR_ADCALDIF;
 8000aae:	4b46      	ldr	r3, [pc, #280]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	4a45      	ldr	r2, [pc, #276]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ab4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8000ab8:	6093      	str	r3, [r2, #8]
	/* Calibrate ADC and Wait Until Complete (ADCAL returns to 0) */
	ADC1->CR |= ADC_CR_ADCAL;
 8000aba:	4b43      	ldr	r3, [pc, #268]	@ (8000bc8 <ADC_init+0x1c4>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	4a42      	ldr	r2, [pc, #264]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ac4:	6093      	str	r3, [r2, #8]
	while (ADC1->CR & ADC_CR_ADCAL);
 8000ac6:	bf00      	nop
 8000ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc8 <ADC_init+0x1c4>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	dbfb      	blt.n	8000ac8 <ADC_init+0xc4>

	/* Set Channel 1 (PC0) as Single-ended Mode (0) */
	ADC1->DIFSEL &= ~ADC_DIFSEL_DIFSEL_1;
 8000ad0:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000ad6:	4a3c      	ldr	r2, [pc, #240]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ad8:	f023 0302 	bic.w	r3, r3, #2
 8000adc:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

	/* Configure ADC1 (Clear ADSTART Initially) */
	ADC1->CR &= ~ADC_CR_ADSTART;
 8000ae0:	4b39      	ldr	r3, [pc, #228]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a38      	ldr	r2, [pc, #224]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ae6:	f023 0304 	bic.w	r3, r3, #4
 8000aea:	6093      	str	r3, [r2, #8]
	/* Set to Continuous Conversion Mode (1) */
	ADC1->CFGR |= ADC_CFGR_CONT;
 8000aec:	4b36      	ldr	r3, [pc, #216]	@ (8000bc8 <ADC_init+0x1c4>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a35      	ldr	r2, [pc, #212]	@ (8000bc8 <ADC_init+0x1c4>)
 8000af2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000af6:	60d3      	str	r3, [r2, #12]
	/* Set to Right-Aligned Data (0) */
	ADC1->CFGR &= ~ADC_CFGR_ALIGN;
 8000af8:	4b33      	ldr	r3, [pc, #204]	@ (8000bc8 <ADC_init+0x1c4>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	4a32      	ldr	r2, [pc, #200]	@ (8000bc8 <ADC_init+0x1c4>)
 8000afe:	f023 0320 	bic.w	r3, r3, #32
 8000b02:	60d3      	str	r3, [r2, #12]
	/* Set to 12-bit Resolution (00) */
	ADC1->CFGR &= ~ADC_CFGR_RES;
 8000b04:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b0a:	f023 0318 	bic.w	r3, r3, #24
 8000b0e:	60d3      	str	r3, [r2, #12]
	/* Set Channel 1 as a Single Regular Sequence (1) */
	ADC1->SQR1 |= ADC_SQR1_SQ1_0;
 8000b10:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4a2c      	ldr	r2, [pc, #176]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b1a:	6313      	str	r3, [r2, #48]	@ 0x30
	/* Set Sample Time to 92.5 Clocks to Channel 1 (101) */
	ADC1->SMPR1 &= ~ADC_SMPR1_SMP1;
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4a29      	ldr	r2, [pc, #164]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b22:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000b26:	6153      	str	r3, [r2, #20]
	ADC1->SMPR1 |= (0b101 << ADC_SMPR1_SMP1_Pos);
 8000b28:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	4a26      	ldr	r2, [pc, #152]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b2e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8000b32:	6153      	str	r3, [r2, #20]

	/* Configure ADC1 to Receive Trigger from TIM6_TRGO (1101) */
	ADC1->CFGR &= ~ADC_CFGR_EXTSEL;
 8000b34:	4b24      	ldr	r3, [pc, #144]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4a23      	ldr	r2, [pc, #140]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b3a:	f423 7370 	bic.w	r3, r3, #960	@ 0x3c0
 8000b3e:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= (0b1101 << ADC_CFGR_EXTSEL_Pos);
 8000b40:	4b21      	ldr	r3, [pc, #132]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a20      	ldr	r2, [pc, #128]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b46:	f443 7350 	orr.w	r3, r3, #832	@ 0x340
 8000b4a:	60d3      	str	r3, [r2, #12]
	/* Allow Conversions to be Set by Rising Edge of TIM6_TRGO (01) */
	ADC1->CFGR &= ~ADC_CFGR_EXTEN;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	4a1d      	ldr	r2, [pc, #116]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b52:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000b56:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= ADC_CFGR_EXTEN_0;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b62:	60d3      	str	r3, [r2, #12]

	/* Clear ADC Ready Flag (Write 1 to Bit), Then Enable ADC */
	ADC1->ISR |= ADC_ISR_ADRDY;
 8000b64:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6013      	str	r3, [r2, #0]
	ADC1->CR &= ~ADC_CR_ADDIS;
 8000b70:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b76:	f023 0302 	bic.w	r3, r3, #2
 8000b7a:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADEN;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	4a11      	ldr	r2, [pc, #68]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6093      	str	r3, [r2, #8]
	/* Hardware Sets ADRDY Flag; Wait for Bit to be Set */
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8000b88:	bf00      	nop
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f9      	beq.n	8000b8a <ADC_init+0x186>

	/* Enable ADC DMA Transfer */
	ADC1->CFGR |= ADC_CFGR_DMAEN;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc8 <ADC_init+0x1c4>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	60d3      	str	r3, [r2, #12]
	ADC1->CFGR |= ADC_CFGR_DMACFG;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ba4:	68db      	ldr	r3, [r3, #12]
 8000ba6:	4a08      	ldr	r2, [pc, #32]	@ (8000bc8 <ADC_init+0x1c4>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	60d3      	str	r3, [r2, #12]
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48000800 	.word	0x48000800
 8000bc4:	50040300 	.word	0x50040300
 8000bc8:	50040000 	.word	0x50040000

08000bcc <ADC_collect>:

/* Begin Continuous Conversion
 * Sets ADSTART to Begin a New Conversion Sample
 * ADSTART is cleared by hardware when initiated
 */
void ADC_collect(void) {
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	/* Begin ADC Conversion */
	ADC1->CR |= ADC_CR_ADSTART;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	@ (8000be8 <ADC_collect+0x1c>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <ADC_collect+0x1c>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	6093      	str	r3, [r2, #8]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	50040000 	.word	0x50040000

08000bec <DAC_init>:

/* Initialize and Configure DAC1 Peripheral */
/* Pins Used:
 * GPIOA - PA4
 */
void DAC_init() {
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	/* Enable Clock Register for GPIOA and DAC1 */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000bf0:	4b32      	ldr	r3, [pc, #200]	@ (8000cbc <DAC_init+0xd0>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a31      	ldr	r2, [pc, #196]	@ (8000cbc <DAC_init+0xd0>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= RCC_APB1ENR1_DAC1EN;
 8000bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <DAC_init+0xd0>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c00:	4a2e      	ldr	r2, [pc, #184]	@ (8000cbc <DAC_init+0xd0>)
 8000c02:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c06:	6593      	str	r3, [r2, #88]	@ 0x58

	/* Initialize GPIOA for DAC1_CH1 */
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT4;		// OTYPE - PP (0)
 8000c08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c12:	f023 0310 	bic.w	r3, r3, #16
 8000c16:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPD4;
 8000c18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c26:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= GPIO_PUPDR_PUPD4_1; 	// PUPD - PD (10)
 8000c28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c36:	60d3      	str	r3, [r2, #12]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED4;	// OSPEED - High-Speed (11)
 8000c38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c42:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000c46:	6093      	str	r3, [r2, #8]
	GPIOA->MODER |= GPIO_MODER_MODE4;		// Alt. Func. - Analog (11)
 8000c48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c52:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000c56:	6013      	str	r3, [r2, #0]
	GPIOA->ASCR &= ~GPIO_ASCR_ASC4;			// ASC - Output (0)
 8000c58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c62:	f023 0310 	bic.w	r3, r3, #16
 8000c66:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/* Ensure DAC1_CH1 is Disabled */
	DAC1->CR &= ~DAC_CR_EN1;
 8000c68:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <DAC_init+0xd4>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a14      	ldr	r2, [pc, #80]	@ (8000cc0 <DAC_init+0xd4>)
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	6013      	str	r3, [r2, #0]

	/* Enable DAC1_CH1 Output Buffer to Reduce Issues with Impedance Matching */
	DAC1->MCR &= ~DAC_MCR_MODE1;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <DAC_init+0xd4>)
 8000c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c78:	4a11      	ldr	r2, [pc, #68]	@ (8000cc0 <DAC_init+0xd4>)
 8000c7a:	f023 0307 	bic.w	r3, r3, #7
 8000c7e:	63d3      	str	r3, [r2, #60]	@ 0x3c

	/* Enable TIM6_TRGO Trigger on Channel 1 (000) */
	DAC1->CR &= ~DAC_CR_TSEL1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <DAC_init+0xd4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc0 <DAC_init+0xd4>)
 8000c86:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8000c8a:	6013      	str	r3, [r2, #0]

	/* Enable DAC1 Channel 1 */
	DAC1->CR |= DAC_CR_EN1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <DAC_init+0xd4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <DAC_init+0xd4>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]
	DAC1->CR |= DAC_CR_TEN1;
 8000c98:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <DAC_init+0xd4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <DAC_init+0xd4>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	6013      	str	r3, [r2, #0]

	/* Enable DAC1 Channel 1 DMA Transfer */
	DAC1->CR |= DAC_CR_DMAEN1;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <DAC_init+0xd4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <DAC_init+0xd4>)
 8000caa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cae:	6013      	str	r3, [r2, #0]


}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40007400 	.word	0x40007400

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	@ (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <DMA_init>:
/* Initialize DMA Peripheral-to-Memory
 * / Memory-to-Peripheral Transfer */
/* ADC to DAC DMA Transfer, using Circular Buffer
 * ADC1: Channel 1
 * DAC1: Channel 1*/
void DMA_init(int16_t *inBuff, int16_t *outBuff, uint16_t buff_size) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	80fb      	strh	r3, [r7, #6]
	/* Initialize Clock for DMA1/2 */
	RCC->AHB1ENR |= (RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN);
 8000d62:	4b6b      	ldr	r3, [pc, #428]	@ (8000f10 <DMA_init+0x1bc>)
 8000d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d66:	4a6a      	ldr	r2, [pc, #424]	@ (8000f10 <DMA_init+0x1bc>)
 8000d68:	f043 0303 	orr.w	r3, r3, #3
 8000d6c:	6493      	str	r3, [r2, #72]	@ 0x48

	/* Disable DMA1 Channel 1/DMA2 Channel 4 to Configure */
	DMA1_Channel1->CCR &= ~DMA_CCR_EN;
 8000d6e:	4b69      	ldr	r3, [pc, #420]	@ (8000f14 <DMA_init+0x1c0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a68      	ldr	r2, [pc, #416]	@ (8000f14 <DMA_init+0x1c0>)
 8000d74:	f023 0301 	bic.w	r3, r3, #1
 8000d78:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~DMA_CCR_EN;
 8000d7a:	4b67      	ldr	r3, [pc, #412]	@ (8000f18 <DMA_init+0x1c4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a66      	ldr	r2, [pc, #408]	@ (8000f18 <DMA_init+0x1c4>)
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	6013      	str	r3, [r2, #0]

	/* Set Peripheral Register Address (ADC1) in DMA1_CPAR1 */
	DMA1_Channel1->CPAR = (uint32_t) &(ADC1->DR);
 8000d86:	4b63      	ldr	r3, [pc, #396]	@ (8000f14 <DMA_init+0x1c0>)
 8000d88:	4a64      	ldr	r2, [pc, #400]	@ (8000f1c <DMA_init+0x1c8>)
 8000d8a:	609a      	str	r2, [r3, #8]
	/* Set Peripheral Register Address (DAC1) in DMA2_CPAR4 */
	DMA2_Channel4->CPAR = (uint32_t) &(DAC1->DHR12R1);
 8000d8c:	4b62      	ldr	r3, [pc, #392]	@ (8000f18 <DMA_init+0x1c4>)
 8000d8e:	4a64      	ldr	r2, [pc, #400]	@ (8000f20 <DMA_init+0x1cc>)
 8000d90:	609a      	str	r2, [r3, #8]

	/* Set Memory Address (inBuff) in DMA1_CMAR1 */
	DMA1_Channel1->CMAR = (uint32_t) inBuff;
 8000d92:	4a60      	ldr	r2, [pc, #384]	@ (8000f14 <DMA_init+0x1c0>)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	60d3      	str	r3, [r2, #12]
	/* Set Memory Address (outBuff) in DMA2_CMAR4 */
	DMA2_Channel4->CMAR = (uint32_t) outBuff;
 8000d98:	4a5f      	ldr	r2, [pc, #380]	@ (8000f18 <DMA_init+0x1c4>)
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	60d3      	str	r3, [r2, #12]

	/* Configure the Number of Data to Transfer in DMA_CNDTR1/4 */
	DMA1_Channel1->CNDTR = buff_size;
 8000d9e:	4a5d      	ldr	r2, [pc, #372]	@ (8000f14 <DMA_init+0x1c0>)
 8000da0:	88fb      	ldrh	r3, [r7, #6]
 8000da2:	6053      	str	r3, [r2, #4]
	DMA2_Channel4->CNDTR = buff_size;
 8000da4:	4a5c      	ldr	r2, [pc, #368]	@ (8000f18 <DMA_init+0x1c4>)
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	6053      	str	r3, [r2, #4]

	/* Configure Channel Select for DMA1/2 for ADC1/DAC_CH1 (C1S = 0x0/C4S = 0x3) */
	DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8000daa:	4b5e      	ldr	r3, [pc, #376]	@ (8000f24 <DMA_init+0x1d0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a5d      	ldr	r2, [pc, #372]	@ (8000f24 <DMA_init+0x1d0>)
 8000db0:	f023 030f 	bic.w	r3, r3, #15
 8000db4:	6013      	str	r3, [r2, #0]
	DMA2_CSELR->CSELR &= ~DMA_CSELR_C4S;
 8000db6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f28 <DMA_init+0x1d4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a5b      	ldr	r2, [pc, #364]	@ (8000f28 <DMA_init+0x1d4>)
 8000dbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000dc0:	6013      	str	r3, [r2, #0]
	DMA2_CSELR->CSELR |= (0x3 << DMA_CSELR_C4S_Pos);
 8000dc2:	4b59      	ldr	r3, [pc, #356]	@ (8000f28 <DMA_init+0x1d4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a58      	ldr	r2, [pc, #352]	@ (8000f28 <DMA_init+0x1d4>)
 8000dc8:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000dcc:	6013      	str	r3, [r2, #0]
	 * Circular Mode: CIRC - Enabled (1)
	 * Peripheral and Memory Incremented Mode: MINC - Enabled (1), PINC - Disabled (0)
	 * Peripheral and Memory Data Size: MSIZE - 16 Bits (01), PSIZE - 16 Bits (01)
	 * Interrupt Enable: TCIE - Enabled (1), HTIE - Enabled (1)
	 * */
	DMA1_Channel1->CCR |= DMA_CCR_PL;
 8000dce:	4b51      	ldr	r3, [pc, #324]	@ (8000f14 <DMA_init+0x1c0>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a50      	ldr	r2, [pc, #320]	@ (8000f14 <DMA_init+0x1c0>)
 8000dd4:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000dd8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~(DMA_CCR_MEM2MEM | DMA_CCR_DIR);
 8000dda:	4b4e      	ldr	r3, [pc, #312]	@ (8000f14 <DMA_init+0x1c0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a4d      	ldr	r2, [pc, #308]	@ (8000f14 <DMA_init+0x1c0>)
 8000de0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000de4:	f023 0310 	bic.w	r3, r3, #16
 8000de8:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_CIRC;
 8000dea:	4b4a      	ldr	r3, [pc, #296]	@ (8000f14 <DMA_init+0x1c0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a49      	ldr	r2, [pc, #292]	@ (8000f14 <DMA_init+0x1c0>)
 8000df0:	f043 0320 	orr.w	r3, r3, #32
 8000df4:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= DMA_CCR_MINC;
 8000df6:	4b47      	ldr	r3, [pc, #284]	@ (8000f14 <DMA_init+0x1c0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a46      	ldr	r2, [pc, #280]	@ (8000f14 <DMA_init+0x1c0>)
 8000dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e00:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~DMA_CCR_PINC;
 8000e02:	4b44      	ldr	r3, [pc, #272]	@ (8000f14 <DMA_init+0x1c0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a43      	ldr	r2, [pc, #268]	@ (8000f14 <DMA_init+0x1c0>)
 8000e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e0c:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <DMA_init+0x1c0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a40      	ldr	r2, [pc, #256]	@ (8000f14 <DMA_init+0x1c0>)
 8000e14:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e18:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0);
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	@ (8000f14 <DMA_init+0x1c0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000f14 <DMA_init+0x1c0>)
 8000e20:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8000e24:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_TCIE | DMA_CCR_HTIE);
 8000e26:	4b3b      	ldr	r3, [pc, #236]	@ (8000f14 <DMA_init+0x1c0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f14 <DMA_init+0x1c0>)
 8000e2c:	f043 0306 	orr.w	r3, r3, #6
 8000e30:	6013      	str	r3, [r2, #0]
		 * Circular Mode: CIRC - Enabled (1)
		 * Peripheral and Memory Incremented Mode: MINC - Enabled (1), PINC - Disabled (0)
		 * Peripheral and Memory Data Size: MSIZE - 16 Bits (01), PSIZE - 16 Bits (01)
		 * Interrupt Enable: TCIE - Enabled (1), HTIE - Enabled (1)
		 * */
	DMA2_Channel4->CCR |= DMA_CCR_PL;
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <DMA_init+0x1c4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a38      	ldr	r2, [pc, #224]	@ (8000f18 <DMA_init+0x1c4>)
 8000e38:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000e3c:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~DMA_CCR_MEM2MEM;
 8000e3e:	4b36      	ldr	r3, [pc, #216]	@ (8000f18 <DMA_init+0x1c4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a35      	ldr	r2, [pc, #212]	@ (8000f18 <DMA_init+0x1c4>)
 8000e44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e48:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_DIR;
 8000e4a:	4b33      	ldr	r3, [pc, #204]	@ (8000f18 <DMA_init+0x1c4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a32      	ldr	r2, [pc, #200]	@ (8000f18 <DMA_init+0x1c4>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_CIRC;
 8000e56:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <DMA_init+0x1c4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f18 <DMA_init+0x1c4>)
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_MINC;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	@ (8000f18 <DMA_init+0x1c4>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a2c      	ldr	r2, [pc, #176]	@ (8000f18 <DMA_init+0x1c4>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6c:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~DMA_CCR_PINC;
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <DMA_init+0x1c4>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a29      	ldr	r2, [pc, #164]	@ (8000f18 <DMA_init+0x1c4>)
 8000e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000e78:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR &= ~(DMA_CCR_MSIZE | DMA_CCR_PSIZE);
 8000e7a:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <DMA_init+0x1c4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a26      	ldr	r2, [pc, #152]	@ (8000f18 <DMA_init+0x1c4>)
 8000e80:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e84:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= (DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0);
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <DMA_init+0x1c4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <DMA_init+0x1c4>)
 8000e8c:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8000e90:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= (DMA_CCR_TCIE | DMA_CCR_HTIE);
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <DMA_init+0x1c4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a20      	ldr	r2, [pc, #128]	@ (8000f18 <DMA_init+0x1c4>)
 8000e98:	f043 0306 	orr.w	r3, r3, #6
 8000e9c:	6013      	str	r3, [r2, #0]

	/* Enable NVIC for Interrupts */
	NVIC_SetPriority(DMA1_Channel1_IRQn, DMA1_CH1_NVIC_PRIORITY);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff2d 	bl	8000d00 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ea6:	200b      	movs	r0, #11
 8000ea8:	f7ff ff0c 	bl	8000cc4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(DMA2_Channel4_IRQn, DMA2_CH4_NVIC_PRIORITY);
 8000eac:	2101      	movs	r1, #1
 8000eae:	203b      	movs	r0, #59	@ 0x3b
 8000eb0:	f7ff ff26 	bl	8000d00 <__NVIC_SetPriority>
	NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000eb4:	203b      	movs	r0, #59	@ 0x3b
 8000eb6:	f7ff ff05 	bl	8000cc4 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000eba:	b662      	cpsie	i
}
 8000ebc:	bf00      	nop
	__enable_irq();

	/* Clear Any Pending Interrupts Before Enabling DMA Channel */
	DMA1->IFCR |= DMA_IFCR_CGIF1;
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <DMA_init+0x1d8>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f2c <DMA_init+0x1d8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= DMA_IFCR_CHTIF1;
 8000eca:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <DMA_init+0x1d8>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <DMA_init+0x1d8>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6053      	str	r3, [r2, #4]
	DMA1->IFCR |= DMA_IFCR_CTCIF1;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <DMA_init+0x1d8>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <DMA_init+0x1d8>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6053      	str	r3, [r2, #4]
	DMA2->IFCR |= DMA_IFCR_CGIF4;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <DMA_init+0x1dc>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <DMA_init+0x1dc>)
 8000ee8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eec:	6053      	str	r3, [r2, #4]
	DMA2->IFCR |= DMA_IFCR_CHTIF4;
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <DMA_init+0x1dc>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <DMA_init+0x1dc>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef8:	6053      	str	r3, [r2, #4]
	DMA2->IFCR |= DMA_IFCR_CTCIF4;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <DMA_init+0x1dc>)
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	4a0c      	ldr	r2, [pc, #48]	@ (8000f30 <DMA_init+0x1dc>)
 8000f00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f04:	6053      	str	r3, [r2, #4]
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40020008 	.word	0x40020008
 8000f18:	40020444 	.word	0x40020444
 8000f1c:	50040040 	.word	0x50040040
 8000f20:	40007408 	.word	0x40007408
 8000f24:	400200a8 	.word	0x400200a8
 8000f28:	400204a8 	.word	0x400204a8
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400

08000f34 <DMA_enable>:


/* Enable DMA Channels */
void DMA_enable() {
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	/* Activate Channel 1 and 4 */
	DMA1_Channel1->CCR |= DMA_CCR_EN;
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <DMA_enable+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <DMA_enable+0x28>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6013      	str	r3, [r2, #0]
	DMA2_Channel4->CCR |= DMA_CCR_EN;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <DMA_enable+0x2c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <DMA_enable+0x2c>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40020008 	.word	0x40020008
 8000f60:	40020444 	.word	0x40020444

08000f64 <DMA1_Channel1_IRQHandler>:


/* Interrupt Handlers */

/* Interrupt Handler for DMA1 Channel 1 (Input Data) */
void DMA1_Channel1_IRQHandler(void) {
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
	/* If Half of the Buffer is Filled (Ping) */
	if (DMA1->ISR & DMA_ISR_HTIF1) {
 8000f68:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <DMA1_Channel1_IRQHandler+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00f      	beq.n	8000f94 <DMA1_Channel1_IRQHandler+0x30>
		/* Reset Buffer Pointer to First Half to Process */
		inBuffPtr = &inBuff[0];
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <DMA1_Channel1_IRQHandler+0x68>)
 8000f76:	4a16      	ldr	r2, [pc, #88]	@ (8000fd0 <DMA1_Channel1_IRQHandler+0x6c>)
 8000f78:	601a      	str	r2, [r3, #0]
		outBuffPtr = &outBuff[0];
 8000f7a:	4b16      	ldr	r3, [pc, #88]	@ (8000fd4 <DMA1_Channel1_IRQHandler+0x70>)
 8000f7c:	4a16      	ldr	r2, [pc, #88]	@ (8000fd8 <DMA1_Channel1_IRQHandler+0x74>)
 8000f7e:	601a      	str	r2, [r3, #0]

		/* Set Data Ready Flag */
		Data_Ready_Flag = SET;
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <DMA1_Channel1_IRQHandler+0x78>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]

		/* Clear Interrupt Flag */
		DMA1->IFCR |= DMA_IFCR_CHTIF1;
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <DMA1_Channel1_IRQHandler+0x64>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <DMA1_Channel1_IRQHandler+0x64>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6053      	str	r3, [r2, #4]
		Data_Ready_Flag = SET;

		/* Clear Interrupt Flag */
		DMA1->IFCR |= DMA_IFCR_CTCIF1;
	}
}
 8000f92:	e014      	b.n	8000fbe <DMA1_Channel1_IRQHandler+0x5a>
	else if (DMA1->ISR & DMA_ISR_TCIF1) {
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <DMA1_Channel1_IRQHandler+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00e      	beq.n	8000fbe <DMA1_Channel1_IRQHandler+0x5a>
		inBuffPtr = &inBuff[(BUFFER_SIZE / 2)];
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <DMA1_Channel1_IRQHandler+0x68>)
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <DMA1_Channel1_IRQHandler+0x7c>)
 8000fa4:	601a      	str	r2, [r3, #0]
		outBuffPtr = &outBuff[(BUFFER_SIZE / 2)];
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <DMA1_Channel1_IRQHandler+0x70>)
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <DMA1_Channel1_IRQHandler+0x80>)
 8000faa:	601a      	str	r2, [r3, #0]
		Data_Ready_Flag = SET;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <DMA1_Channel1_IRQHandler+0x78>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
		DMA1->IFCR |= DMA_IFCR_CTCIF1;
 8000fb2:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <DMA1_Channel1_IRQHandler+0x64>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a04      	ldr	r2, [pc, #16]	@ (8000fc8 <DMA1_Channel1_IRQHandler+0x64>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	6053      	str	r3, [r2, #4]
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000084 	.word	0x20000084
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000090 	.word	0x20000090
 8000fdc:	20000080 	.word	0x20000080
 8000fe0:	2000008a 	.word	0x2000008a
 8000fe4:	20000096 	.word	0x20000096

08000fe8 <DMA2_Channel4_IRQHandler>:

/* Interrupt Handler for DMA2 Channel 4 (Output Data) */
void DMA2_Channel4_IRQHandler(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	/* If Half of the Buffer is Filled (Ping) */
	if (DMA2->ISR & DMA_ISR_HTIF4) {
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <DMA2_Channel4_IRQHandler+0x44>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <DMA2_Channel4_IRQHandler+0x22>
		/* Debug: Toggle LED */
		LED_Debug_2_toggle();
 8000ff8:	f000 fa30 	bl	800145c <LED_Debug_2_toggle>

		/* Clear Interrupt Flag */
		DMA2->IFCR |= DMA_IFCR_CHTIF4;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <DMA2_Channel4_IRQHandler+0x44>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <DMA2_Channel4_IRQHandler+0x44>)
 8001002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001006:	6053      	str	r3, [r2, #4]
		LED_Debug_2_toggle();

		/* Clear Interrupt Flag */
		DMA2->IFCR |= DMA_IFCR_CTCIF4;
	}
}
 8001008:	e00d      	b.n	8001026 <DMA2_Channel4_IRQHandler+0x3e>
	else if (DMA2->ISR & DMA_ISR_TCIF4) {
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <DMA2_Channel4_IRQHandler+0x44>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d007      	beq.n	8001026 <DMA2_Channel4_IRQHandler+0x3e>
		LED_Debug_2_toggle();
 8001016:	f000 fa21 	bl	800145c <LED_Debug_2_toggle>
		DMA2->IFCR |= DMA_IFCR_CTCIF4;
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <DMA2_Channel4_IRQHandler+0x44>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a03      	ldr	r2, [pc, #12]	@ (800102c <DMA2_Channel4_IRQHandler+0x44>)
 8001020:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001024:	6053      	str	r3, [r2, #4]
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40020400 	.word	0x40020400

08001030 <Delay_init>:
#include "main.h"
#include "Delay.h"


/* Initialize Delay Filter */
void Delay_init(Delay_t *df, float delayTime_ms, float mix, float feedback, float sampleRate_Hz) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6178      	str	r0, [r7, #20]
 8001038:	ed87 0a04 	vstr	s0, [r7, #16]
 800103c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001040:	ed87 1a02 	vstr	s2, [r7, #8]
 8001044:	edc7 1a01 	vstr	s3, [r7, #4]

	/* Set Delay Line Length */
	Delay_setLength(df, delayTime_ms, sampleRate_Hz);
 8001048:	edd7 0a01 	vldr	s1, [r7, #4]
 800104c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f000 f8c9 	bl	80011e8 <Delay_setLength>

	/* Store Delay Setting */
	df->mix = mix;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	601a      	str	r2, [r3, #0]
	df->feedback = feedback;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	605a      	str	r2, [r3, #4]

	/* Clear Delay Line Circular Buffer, Reset Index */
	df->lineIDX = 0;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001068:	461a      	mov	r2, r3
 800106a:	2300      	movs	r3, #0
 800106c:	f8c2 3c48 	str.w	r3, [r2, #3144]	@ 0xc48
	for (uint32_t i = 0; i < DELAY_MAX_LEN; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	e00a      	b.n	800108c <Delay_init+0x5c>
		df->line[i] = 0.0f;
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	3302      	adds	r3, #2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < DELAY_MAX_LEN; i++) {
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001092:	4293      	cmp	r3, r2
 8001094:	d9ef      	bls.n	8001076 <Delay_init+0x46>
	}

	/* Clear Output */
	df->output = 0.0f;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 800109c:	f503 6345 	add.w	r3, r3, #3152	@ 0xc50
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]

}
 80010a6:	bf00      	nop
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <Delay_update>:


/* Calculate Delay Output */
float Delay_update(Delay_t *df, float input) {
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	ed87 0a00 	vstr	s0, [r7]

	/* Get Current Delay Line Output */
	float delayLineOutput = df->line[df->lineIDX];
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 80010c2:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	3302      	adds	r3, #2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]

	/* Compute Current Delay Line Input */
	float delayLineInput = (input + (df->feedback * delayLineOutput));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80010d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	ed97 7a00 	vldr	s14, [r7]
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e8:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Store in Delay Line Circular Buffer */
	df->line[df->lineIDX] = delayLineInput;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 80010f2:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	3302      	adds	r3, #2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	601a      	str	r2, [r3, #0]

	/* Increment Delay Line Index */
	df->lineIDX++;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001108:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 800110c:	3301      	adds	r3, #1
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	f502 4210 	add.w	r2, r2, #36864	@ 0x9000
 8001114:	f8c2 3c48 	str.w	r3, [r2, #3144]	@ 0xc48
	if (df->lineIDX >= DELAY_MAX_LEN) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 800111e:	f8d3 3c48 	ldr.w	r3, [r3, #3144]	@ 0xc48
 8001122:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001126:	4293      	cmp	r3, r2
 8001128:	d906      	bls.n	8001138 <Delay_update+0x88>
		df->lineIDX = 0;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001130:	461a      	mov	r2, r3
 8001132:	2300      	movs	r3, #0
 8001134:	f8c2 3c48 	str.w	r3, [r2, #3144]	@ 0xc48
	}

	/* Mix Dry and Wet Signals to Compute Output */
	df->output = (((1.0f - df->mix) * input) + (df->mix * delayLineOutput));
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	edd3 7a00 	vldr	s15, [r3]
 800113e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001142:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001146:	edd7 7a00 	vldr	s15, [r7]
 800114a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edd3 6a00 	vldr	s13, [r3]
 8001154:	edd7 7a03 	vldr	s15, [r7, #12]
 8001158:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001166:	f503 6345 	add.w	r3, r3, #3152	@ 0xc50
 800116a:	edc3 7a00 	vstr	s15, [r3]

	/* Limit Output */
	if (df->output > 1.0f) {
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001174:	f503 6345 	add.w	r3, r3, #3152	@ 0xc50
 8001178:	edd3 7a00 	vldr	s15, [r3]
 800117c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001188:	dd08      	ble.n	800119c <Delay_update+0xec>
		df->output = 1.0f;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001190:	f503 6345 	add.w	r3, r3, #3152	@ 0xc50
 8001194:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e014      	b.n	80011c6 <Delay_update+0x116>
	} else if (df->output < -1.0f) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 80011a2:	f503 6345 	add.w	r3, r3, #3152	@ 0xc50
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80011ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b6:	d506      	bpl.n	80011c6 <Delay_update+0x116>
		df->output = -1.0f;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 80011be:	f503 6345 	add.w	r3, r3, #3152	@ 0xc50
 80011c2:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <Delay_update+0x134>)
 80011c4:	601a      	str	r2, [r3, #0]
	}

	/* Return Current Output */
	return df->output;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 80011cc:	f503 6345 	add.w	r3, r3, #3152	@ 0xc50
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	ee07 3a90 	vmov	s15, r3

}
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	bf800000 	.word	0xbf800000

080011e8 <Delay_setLength>:


/* Set Line Length */
void Delay_setLength(Delay_t *df, float delayTime_ms, float sampleRate_Hz) {
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80011f4:	edc7 0a01 	vstr	s1, [r7, #4]

	/* Adjust Delay Line to Delay Time Setting */
	df->lineLen = (uint32_t) (0.001f * delayTime_ms * sampleRate_Hz);
 80011f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011fc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800124c <Delay_setLength+0x64>
 8001200:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001204:	edd7 7a01 	vldr	s15, [r7, #4]
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001210:	ee17 2a90 	vmov	r2, s15
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 800121a:	f8c3 2c4c 	str.w	r2, [r3, #3148]	@ 0xc4c

	/* Handle Threshold Case */
	if (df->lineLen > DELAY_MAX_LEN) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001224:	f8d3 3c4c 	ldr.w	r3, [r3, #3148]	@ 0xc4c
 8001228:	f242 7210 	movw	r2, #10000	@ 0x2710
 800122c:	4293      	cmp	r3, r2
 800122e:	d907      	bls.n	8001240 <Delay_setLength+0x58>
		df->lineLen = DELAY_MAX_LEN;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f503 4310 	add.w	r3, r3, #36864	@ 0x9000
 8001236:	461a      	mov	r2, r3
 8001238:	f242 7310 	movw	r3, #10000	@ 0x2710
 800123c:	f8c2 3c4c 	str.w	r3, [r2, #3148]	@ 0xc4c
	}

}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	3a83126f 	.word	0x3a83126f

08001250 <Delay_Filter_init>:
 * attenuation (%) is used to adjust effect strength */


/* Initialize Delay Filter
 * cutoff is in percentage (%) */
void Delay_Filter_init(DelayFilter_t *dft, uint16_t size, float cutoff) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	460b      	mov	r3, r1
 800125a:	ed87 0a01 	vstr	s0, [r7, #4]
 800125e:	817b      	strh	r3, [r7, #10]

	/* Dynamically Create Empty Memory Buffer */
	float *memBuff = (float*) calloc(size, sizeof(float));
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	2104      	movs	r1, #4
 8001264:	4618      	mov	r0, r3
 8001266:	f001 fc0d 	bl	8002a84 <calloc>
 800126a:	4603      	mov	r3, r0
 800126c:	617b      	str	r3, [r7, #20]
	dft->memBuffPtr = memBuff;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	601a      	str	r2, [r3, #0]

	/* Instantiate Delay Filter Object */
	dft->memBuffSize = size;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	897a      	ldrh	r2, [r7, #10]
 8001278:	809a      	strh	r2, [r3, #4]
	dft->attenuation = ((PEAK_ATTENUATION - cutoff) / ((float) size - 1.0f));
 800127a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800127e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001282:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001286:	897b      	ldrh	r3, [r7, #10]
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001294:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HPF_init>:
#include <math.h>
#include "HPF.h"


/* Initialize First-Order High Pass Filter */
void HPF_init(HPF_t *filter, float corner_freq, float samp_freq) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	ed87 0a02 	vstr	s0, [r7, #8]
 80012b6:	edc7 0a01 	vstr	s1, [r7, #4]
	/* Store Sample Frequency */
	filter->samp_freq = samp_freq;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	60da      	str	r2, [r3, #12]

	/* Store Corner Frequency and Calculate Coefficients for Filter */
	HPF_setCorner(filter, corner_freq);
 80012c0:	ed97 0a02 	vldr	s0, [r7, #8]
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f80f 	bl	80012e8 <HPF_setCorner>

	/* Reset Input/Output */
	filter->input = 0.0f;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
	filter->output = 0.0f;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
}
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	0000      	movs	r0, r0
 80012e4:	0000      	movs	r0, r0
	...

080012e8 <HPF_setCorner>:

/* Adjust the Corner Frequency of HPF,
 * then Calculate Required Coefficients
 *
 * */
void HPF_setCorner(HPF_t *filter, float corner_freq) {
 80012e8:	b5b0      	push	{r4, r5, r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	ed87 0a00 	vstr	s0, [r7]
	/* Restrict Corner Frequency to be within 0 - (samp_freq / 2) [Nyquist Law] */
	if (corner_freq > (filter->samp_freq * 0.5f)) {
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80012fa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	ed97 7a00 	vldr	s14, [r7]
 8001306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130e:	dd09      	ble.n	8001324 <HPF_setCorner+0x3c>
		corner_freq = (filter->samp_freq * 0.5f);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a03 	vldr	s15, [r3, #12]
 8001316:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131e:	edc7 7a00 	vstr	s15, [r7]
 8001322:	e009      	b.n	8001338 <HPF_setCorner+0x50>
	} else if (corner_freq < 0.0f) {
 8001324:	edd7 7a00 	vldr	s15, [r7]
 8001328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	d502      	bpl.n	8001338 <HPF_setCorner+0x50>
		corner_freq = 0.0f;
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	603b      	str	r3, [r7, #0]
	}

	/* Calculate the Required Coefficients */
	float coeff = ((2 * M_PI * corner_freq) / filter->samp_freq);
 8001338:	6838      	ldr	r0, [r7, #0]
 800133a:	f7ff f8a9 	bl	8000490 <__aeabi_f2d>
 800133e:	a316      	add	r3, pc, #88	@ (adr r3, 8001398 <HPF_setCorner+0xb0>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff f8fc 	bl	8000540 <__aeabi_dmul>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4614      	mov	r4, r2
 800134e:	461d      	mov	r5, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f89b 	bl	8000490 <__aeabi_f2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	f7ff fa17 	bl	8000794 <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff faf9 	bl	8000964 <__aeabi_d2f>
 8001372:	4603      	mov	r3, r0
 8001374:	60fb      	str	r3, [r7, #12]
	filter->coeff = (1.0f / (1.0f + coeff));
 8001376:	edd7 7a03 	vldr	s15, [r7, #12]
 800137a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800137e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	54442d18 	.word	0x54442d18
 800139c:	401921fb 	.word	0x401921fb

080013a0 <LED_Debug_init>:


/* Initialize GPIO Pin for LED Debug
 * Pins Used: PC2, PC3
 * */
void LED_Debug_init() {
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	/* Enable GPIOC Clock */
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80013a4:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <LED_Debug_init+0x94>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a22      	ldr	r2, [pc, #136]	@ (8001434 <LED_Debug_init+0x94>)
 80013aa:	f043 0304 	orr.w	r3, r3, #4
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Configure PC0 to be PP, PD, and Low-Speed */
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT3 |GPIO_OTYPER_OT2);
 80013b0:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <LED_Debug_init+0x98>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <LED_Debug_init+0x98>)
 80013b6:	f023 030c 	bic.w	r3, r3, #12
 80013ba:	6053      	str	r3, [r2, #4]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD3 | GPIO_PUPDR_PUPD2);
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <LED_Debug_init+0x98>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001438 <LED_Debug_init+0x98>)
 80013c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013c6:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (GPIO_PUPDR_PUPD3_1 | GPIO_PUPDR_PUPD2_1);
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <LED_Debug_init+0x98>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <LED_Debug_init+0x98>)
 80013ce:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80013d2:	60d3      	str	r3, [r2, #12]
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED3 | GPIO_OSPEEDR_OSPEED2);
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <LED_Debug_init+0x98>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <LED_Debug_init+0x98>)
 80013da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013de:	6093      	str	r3, [r2, #8]

	/* Set GPIO to Output Mode (01) */
	GPIOC->MODER &= ~GPIO_MODER_MODE3;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <LED_Debug_init+0x98>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <LED_Debug_init+0x98>)
 80013e6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80013ea:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE3_0;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <LED_Debug_init+0x98>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <LED_Debug_init+0x98>)
 80013f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~GPIO_MODER_MODE2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <LED_Debug_init+0x98>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <LED_Debug_init+0x98>)
 80013fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001402:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE2_0;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <LED_Debug_init+0x98>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0b      	ldr	r2, [pc, #44]	@ (8001438 <LED_Debug_init+0x98>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]

	/* Set GPIO Output to 0 */
	GPIOC->ODR &= ~GPIO_ODR_OD2;
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <LED_Debug_init+0x98>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <LED_Debug_init+0x98>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6153      	str	r3, [r2, #20]
	GPIOC->ODR &= ~GPIO_ODR_OD3;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <LED_Debug_init+0x98>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <LED_Debug_init+0x98>)
 8001422:	f023 0308 	bic.w	r3, r3, #8
 8001426:	6153      	str	r3, [r2, #20]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	48000800 	.word	0x48000800

0800143c <LED_Debug_1_toggle>:

/* Toggle LED1 */
void LED_Debug_1_toggle() {
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_OD3;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <LED_Debug_1_toggle+0x1c>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	4a04      	ldr	r2, [pc, #16]	@ (8001458 <LED_Debug_1_toggle+0x1c>)
 8001446:	f083 0308 	eor.w	r3, r3, #8
 800144a:	6153      	str	r3, [r2, #20]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	48000800 	.word	0x48000800

0800145c <LED_Debug_2_toggle>:

/* Toggle LED2 */
void LED_Debug_2_toggle() {
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_OD2;
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <LED_Debug_2_toggle+0x1c>)
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	4a04      	ldr	r2, [pc, #16]	@ (8001478 <LED_Debug_2_toggle+0x1c>)
 8001466:	f083 0304 	eor.w	r3, r3, #4
 800146a:	6153      	str	r3, [r2, #20]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	48000800 	.word	0x48000800

0800147c <LPF_init>:
#include <math.h>
#include "LPF.h"


/* Initialize First-Order Low Pass Filter */
void LPF_init(LPF_t *filter, float corner_freq, float samp_freq) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	ed87 0a02 	vstr	s0, [r7, #8]
 8001488:	edc7 0a01 	vstr	s1, [r7, #4]
	/* Store Sample Frequency */
	filter->samp_freq = samp_freq;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	60da      	str	r2, [r3, #12]

	/* Store Corner Frequency and Calculate Coefficients for Filter */
	LPF_setCorner(filter, corner_freq);
 8001492:	ed97 0a02 	vldr	s0, [r7, #8]
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f80a 	bl	80014b0 <LPF_setCorner>

	/* Reset Output */
	filter->output = 0.0f;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	0000      	movs	r0, r0
	...

080014b0 <LPF_setCorner>:

/* Adjust the Corner Frequency of LPF,
 * then Calculate Required Coefficients
 *
 * */
void LPF_setCorner(LPF_t *filter, float corner_freq) {
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	ed87 0a00 	vstr	s0, [r7]
	/* Restrict Corner Frequency to be within 0 - (samp_freq / 2) [Nyquist Law] */
	if (corner_freq > (filter->samp_freq * 0.5f)) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edd3 7a03 	vldr	s15, [r3, #12]
 80014c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ca:	ed97 7a00 	vldr	s14, [r7]
 80014ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	dd09      	ble.n	80014ec <LPF_setCorner+0x3c>
		corner_freq = (filter->samp_freq * 0.5f);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a03 	vldr	s15, [r3, #12]
 80014de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	edc7 7a00 	vstr	s15, [r7]
 80014ea:	e009      	b.n	8001500 <LPF_setCorner+0x50>
	} else if (corner_freq < 0.0f) {
 80014ec:	edd7 7a00 	vldr	s15, [r7]
 80014f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	d502      	bpl.n	8001500 <LPF_setCorner+0x50>
		corner_freq = 0.0f;
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	603b      	str	r3, [r7, #0]
	}

	/* Calculate the Required Coefficients */
	float coeff = ((2 * M_PI * corner_freq) / filter->samp_freq);
 8001500:	6838      	ldr	r0, [r7, #0]
 8001502:	f7fe ffc5 	bl	8000490 <__aeabi_f2d>
 8001506:	a31e      	add	r3, pc, #120	@ (adr r3, 8001580 <LPF_setCorner+0xd0>)
 8001508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150c:	f7ff f818 	bl	8000540 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4614      	mov	r4, r2
 8001516:	461d      	mov	r5, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ffb7 	bl	8000490 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7ff f933 	bl	8000794 <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fa15 	bl	8000964 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	60fb      	str	r3, [r7, #12]
	filter->coeff[0] = (coeff / (1.0f + coeff));
 800153e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001542:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800154a:	edd7 6a03 	vldr	s13, [r7, #12]
 800154e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edc3 7a01 	vstr	s15, [r3, #4]
	filter->coeff[1] = (1.0f / (1.0f + coeff));
 8001558:	edd7 7a03 	vldr	s15, [r7, #12]
 800155c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001560:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bdb0      	pop	{r4, r5, r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	54442d18 	.word	0x54442d18
 8001584:	401921fb 	.word	0x401921fb

08001588 <NoiseGate_init>:
#include "NoiseGate.h"


/* Initialize Noise Gate Filter */
void NoiseGate_init(NoiseGateFilt_t *ngf, float threshold, float attackTime,
					float releaseTime, float holdTime, float sampleRate) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6178      	str	r0, [r7, #20]
 8001590:	ed87 0a04 	vstr	s0, [r7, #16]
 8001594:	edc7 0a03 	vstr	s1, [r7, #12]
 8001598:	ed87 1a02 	vstr	s2, [r7, #8]
 800159c:	edc7 1a01 	vstr	s3, [r7, #4]
 80015a0:	ed87 2a00 	vstr	s4, [r7]

	/* Create Noise Gate Filter (Convert Hold Time from Seconds to Milliseconds) */
	NoiseGate_setThreshold(ngf, threshold);
 80015a4:	ed97 0a04 	vldr	s0, [r7, #16]
 80015a8:	6978      	ldr	r0, [r7, #20]
 80015aa:	f000 f82d 	bl	8001608 <NoiseGate_setThreshold>
	ngf->holdTime = (0.001f * holdTime);
 80015ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80015b2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001604 <NoiseGate_init+0x7c>
 80015b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	edc3 7a01 	vstr	s15, [r3, #4]

	/* Calculate Attack and Release Coefficients for LPF */
	NoiseGate_setAttackReleaseTime(ngf, attackTime, releaseTime, sampleRate);
 80015c0:	ed97 1a00 	vldr	s2, [r7]
 80015c4:	edd7 0a02 	vldr	s1, [r7, #8]
 80015c8:	ed97 0a03 	vldr	s0, [r7, #12]
 80015cc:	6978      	ldr	r0, [r7, #20]
 80015ce:	f000 f841 	bl	8001654 <NoiseGate_setAttackReleaseTime>

	/* Save Sample Time */
	ngf->sampleTime = (1.0f / sampleRate);
 80015d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015d6:	ed97 7a00 	vldr	s14, [r7]
 80015da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	edc3 7a02 	vstr	s15, [r3, #8]

	/* Reset Counters */
	ngf->attackCnt = 0.0f;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
	ngf->releaseCnt = 0.0f;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]

	/* Reset Smoothed Gain Value */
	ngf->smoothedGain = 0.0f;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]

}
 80015fc:	bf00      	nop
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	3a83126f 	.word	0x3a83126f

08001608 <NoiseGate_setThreshold>:
	return (input * ngf->smoothedGain);
}


/* Set Threshold Value */
void NoiseGate_setThreshold(NoiseGateFilt_t *ngf, float threshold) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	ed87 0a00 	vstr	s0, [r7]

	/* Limit Threshold Value to Unity Range (0.0f - 1.0f) */
	if (threshold > 1.0f) {
 8001614:	edd7 7a00 	vldr	s15, [r7]
 8001618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800161c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	dd03      	ble.n	800162e <NoiseGate_setThreshold+0x26>
		threshold = 1.0f;
 8001626:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	e009      	b.n	8001642 <NoiseGate_setThreshold+0x3a>
	} else if (threshold < 0.0f) {
 800162e:	edd7 7a00 	vldr	s15, [r7]
 8001632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163a:	d502      	bpl.n	8001642 <NoiseGate_setThreshold+0x3a>
		threshold = 0.0f;
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
	}

	/* Store Threshold Value */
	ngf->threshold = threshold;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	601a      	str	r2, [r3, #0]

}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <NoiseGate_setAttackReleaseTime>:


/* Set Attack and Release Time */
void NoiseGate_setAttackReleaseTime(NoiseGateFilt_t *ngf, float attackTime,
					float releaseTime, float sampleTime) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001660:	edc7 0a01 	vstr	s1, [r7, #4]
 8001664:	ed87 1a00 	vstr	s2, [r7]

	/* Calculate Attack and Release Time Coefficients
	 * coeff = exp((-2.2 * R * C) / (sampleRate * attack/releaseTime))
	 *** Time Constant is in respect to Milliseconds ***
	 */
	ngf->attackCoeff = expf(-2197.22457734f / (sampleTime * attackTime));
 8001668:	ed97 7a00 	vldr	s14, [r7]
 800166c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001674:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80016bc <NoiseGate_setAttackReleaseTime+0x68>
 8001678:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800167c:	eeb0 0a47 	vmov.f32	s0, s14
 8001680:	f001 fb0e 	bl	8002ca0 <expf>
 8001684:	eef0 7a40 	vmov.f32	s15, s0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	edc3 7a03 	vstr	s15, [r3, #12]
	ngf->releaseCoeff = expf(-2197.22457734f / (sampleTime * releaseTime));
 800168e:	ed97 7a00 	vldr	s14, [r7]
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016bc <NoiseGate_setAttackReleaseTime+0x68>
 800169e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016a2:	eeb0 0a47 	vmov.f32	s0, s14
 80016a6:	f001 fafb 	bl	8002ca0 <expf>
 80016aa:	eef0 7a40 	vmov.f32	s15, s0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	edc3 7a04 	vstr	s15, [r3, #16]

}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	c5095398 	.word	0xc5095398

080016c0 <TIM_init>:

#include "TIM.h"
#include "main.h"

/* Initialize TIM2 and TIM6 */
void TIM_init() {
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	/* Enable TIM6 Clock (48MHz) */
	RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM6EN);
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <TIM_init+0x4c>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c8:	4a10      	ldr	r2, [pc, #64]	@ (800170c <TIM_init+0x4c>)
 80016ca:	f043 0310 	orr.w	r3, r3, #16
 80016ce:	6593      	str	r3, [r2, #88]	@ 0x58

	/* Configure Timer as Hardware Trigger */
	TIM6->PSC = TIM6_PRESCALER;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <TIM_init+0x50>)
 80016d2:	2211      	movs	r2, #17
 80016d4:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = TIM6_ARR;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <TIM_init+0x50>)
 80016d8:	2201      	movs	r2, #1
 80016da:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Configure TIM6 to Generate TRGO on Update Event (010) */
	TIM6->CR2 &= ~TIM_CR2_MMS;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <TIM_init+0x50>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <TIM_init+0x50>)
 80016e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016e6:	6053      	str	r3, [r2, #4]
	TIM6->CR2 |= TIM_CR2_MMS_1;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <TIM_init+0x50>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a08      	ldr	r2, [pc, #32]	@ (8001710 <TIM_init+0x50>)
 80016ee:	f043 0320 	orr.w	r3, r3, #32
 80016f2:	6053      	str	r3, [r2, #4]

	/* Enable Trigger */
	TIM6->CR1 |= TIM_CR1_CEN;
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <TIM_init+0x50>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <TIM_init+0x50>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	40001000 	.word	0x40001000

08001714 <main>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

int main(void)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	f5ad 4d1c 	sub.w	sp, sp, #39936	@ 0x9c00
 800171a:	b0ad      	sub	sp, #180	@ 0xb4
 800171c:	af02      	add	r7, sp, #8
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 800171e:	f000 fa2a 	bl	8001b76 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f917 	bl	8001954 <SystemClock_Config>

  /* Initialize LED Debugger */
  LED_Debug_init();
 8001726:	f7ff fe3b 	bl	80013a0 <LED_Debug_init>

  /* Initialize DMA Transfer */
  DMA_init(inBuff, outBuff, BUFFER_SIZE);
 800172a:	2206      	movs	r2, #6
 800172c:	494d      	ldr	r1, [pc, #308]	@ (8001864 <main+0x150>)
 800172e:	484e      	ldr	r0, [pc, #312]	@ (8001868 <main+0x154>)
 8001730:	f7ff fb10 	bl	8000d54 <DMA_init>

  /* Initialize TIM6_TRGO, ADC, and DAC for I/O */
  TIM_init();
 8001734:	f7ff ffc4 	bl	80016c0 <TIM_init>
  ADC_init();
 8001738:	f7ff f964 	bl	8000a04 <ADC_init>
  DAC_init();
 800173c:	f7ff fa56 	bl	8000bec <DAC_init>

  /* Enable DMA Stream */
  DMA_enable();
 8001740:	f7ff fbf8 	bl	8000f34 <DMA_enable>

  /* Clear outBuff to Prevent any Initial Unwanted Feedback */
  for (uint16_t i = 0x0; i < BUFFER_SIZE; i++) {
 8001744:	2300      	movs	r3, #0
 8001746:	f507 421c 	add.w	r2, r7, #39936	@ 0x9c00
 800174a:	f102 02a6 	add.w	r2, r2, #166	@ 0xa6
 800174e:	8013      	strh	r3, [r2, #0]
 8001750:	e01c      	b.n	800178c <main+0x78>
	  inBuff[i] = 0;
 8001752:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 8001756:	f103 03a6 	add.w	r3, r3, #166	@ 0xa6
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	4a42      	ldr	r2, [pc, #264]	@ (8001868 <main+0x154>)
 800175e:	2100      	movs	r1, #0
 8001760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  outBuff[i] = 0;
 8001764:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 8001768:	f103 03a6 	add.w	r3, r3, #166	@ 0xa6
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	4a3d      	ldr	r2, [pc, #244]	@ (8001864 <main+0x150>)
 8001770:	2100      	movs	r1, #0
 8001772:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint16_t i = 0x0; i < BUFFER_SIZE; i++) {
 8001776:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 800177a:	f103 03a6 	add.w	r3, r3, #166	@ 0xa6
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	f507 421c 	add.w	r2, r7, #39936	@ 0x9c00
 8001786:	f102 02a6 	add.w	r2, r2, #166	@ 0xa6
 800178a:	8013      	strh	r3, [r2, #0]
 800178c:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 8001790:	f103 03a6 	add.w	r3, r3, #166	@ 0xa6
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d9db      	bls.n	8001752 <main+0x3e>
//  arm_rfft_fast_instance_f32 fftHandler;
//  arm_rfft_fast_init_f32(&fftHandler, FFT_BUFFER_SIZE);
//
  /* Initialize First-Order Low Pass Filter */
  LPF_t lpfHandler;
  LPF_init(&lpfHandler, LPF_CORNER_FREQ, SAMP_FREQ);
 800179a:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 800179e:	f103 0394 	add.w	r3, r3, #148	@ 0x94
 80017a2:	eddf 0a32 	vldr	s1, [pc, #200]	@ 800186c <main+0x158>
 80017a6:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001870 <main+0x15c>
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fe66 	bl	800147c <LPF_init>

  /* Initialize First-Order High Pass Filter */
  HPF_t hpfHandler;
  HPF_init(&hpfHandler, HPF_CORNER_FREQ, SAMP_FREQ);
 80017b0:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 80017b4:	f103 0384 	add.w	r3, r3, #132	@ 0x84
 80017b8:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 800186c <main+0x158>
 80017bc:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8001874 <main+0x160>
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fd72 	bl	80012aa <HPF_init>

  /* Initialize Delay Effect Filter */
  DelayFilter_t dftHandler;
  Delay_Filter_init(&dftHandler, DELAY_SIZE, DELAY_CUTOFF);
 80017c6:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 80017ca:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80017ce:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001878 <main+0x164>
 80017d2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fd3a 	bl	8001250 <Delay_Filter_init>

  /* Initialize Noise Gate Filter */
  NoiseGateFilt_t ngfHandler;
  NoiseGate_init(&ngfHandler, NGF_THRESHOLD, NGF_ATTACKTIME, NGF_RELEASETIME, NGF_HOLDTIME, SAMP_FREQ);
 80017dc:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 80017e0:	f103 0358 	add.w	r3, r3, #88	@ 0x58
 80017e4:	ed9f 2a21 	vldr	s4, [pc, #132]	@ 800186c <main+0x158>
 80017e8:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80017ec:	eeb0 1a00 	vmov.f32	s2, #0	@ 0x40000000  2.0
 80017f0:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 80017f4:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001878 <main+0x164>
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fec5 	bl	8001588 <NoiseGate_init>

  /* Initialize Delay Filter */
  Delay_t dfHandler;
  Delay_init(&dfHandler, DELAY_TIME_MS, DELAY_MIX, DELAY_FEEDBACK, SAMP_FREQ);
 80017fe:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001802:	3ba4      	subs	r3, #164	@ 0xa4
 8001804:	eddf 1a19 	vldr	s3, [pc, #100]	@ 800186c <main+0x158>
 8001808:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800180c:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001810:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 800187c <main+0x168>
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fc0b 	bl	8001030 <Delay_init>
//
//  /* Initialize TIM2 to Begin Sample Collection */
//  TIM_init();

  /* Begin ADC Conversion to Continuously Collect Guitar Samples */
  ADC_collect();
 800181a:	f7ff f9d7 	bl	8000bcc <ADC_collect>
//		  /* Clear ADC Flag */
//		  Input_Flag = CLEAR;
//	  }


	  if (Data_Ready_Flag) {
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <main+0x16c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0fa      	beq.n	800181e <main+0x10a>
		  /* Process Ready Data While DMA Transfer Continues */
		  processData(&lpfHandler, &hpfHandler, &dftHandler, &ngfHandler, &dfHandler);
 8001828:	f507 441c 	add.w	r4, r7, #39936	@ 0x9c00
 800182c:	f104 0458 	add.w	r4, r4, #88	@ 0x58
 8001830:	f507 421c 	add.w	r2, r7, #39936	@ 0x9c00
 8001834:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 8001838:	f507 411c 	add.w	r1, r7, #39936	@ 0x9c00
 800183c:	f101 0184 	add.w	r1, r1, #132	@ 0x84
 8001840:	f507 401c 	add.w	r0, r7, #39936	@ 0x9c00
 8001844:	f100 0094 	add.w	r0, r0, #148	@ 0x94
 8001848:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800184c:	3ba4      	subs	r3, #164	@ 0xa4
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4623      	mov	r3, r4
 8001852:	f000 f817 	bl	8001884 <processData>

		  /* Debug: Toggle LED */
		  LED_Debug_1_toggle();
 8001856:	f7ff fdf1 	bl	800143c <LED_Debug_1_toggle>

		  /* Clear Flag */
		  Data_Ready_Flag = CLEAR;
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <main+0x16c>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
	  if (Data_Ready_Flag) {
 8001860:	e7dd      	b.n	800181e <main+0x10a>
 8001862:	bf00      	nop
 8001864:	20000090 	.word	0x20000090
 8001868:	20000084 	.word	0x20000084
 800186c:	473b8000 	.word	0x473b8000
 8001870:	47c35000 	.word	0x47c35000
 8001874:	42c80000 	.word	0x42c80000
 8001878:	3dcccccd 	.word	0x3dcccccd
 800187c:	43fa0000 	.word	0x43fa0000
 8001880:	20000080 	.word	0x20000080

08001884 <processData>:


/* Functions */
/* Process Stored Data in Buffer */
void processData(LPF_t *lpf, HPF_t *hpf, DelayFilter_t *dft, NoiseGateFilt_t *ngf,
				Delay_t *df) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
	static float inVal, outVal;

	/* Process Half of the Buffer */
	for (uint16_t i = 0x0; i < (BUFFER_SIZE / 2); i++) {
 8001892:	2300      	movs	r3, #0
 8001894:	82fb      	strh	r3, [r7, #22]
 8001896:	e04b      	b.n	8001930 <processData+0xac>
		/* Take Input and Convert to Float */
		inVal = INT16_TO_FLOAT(*(inBuffPtr++));
 8001898:	4b29      	ldr	r3, [pc, #164]	@ (8001940 <processData+0xbc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	1c9a      	adds	r2, r3, #2
 800189e:	4928      	ldr	r1, [pc, #160]	@ (8001940 <processData+0xbc>)
 80018a0:	600a      	str	r2, [r1, #0]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ae:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001944 <processData+0xc0>
 80018b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <processData+0xc4>)
 80018b8:	edc3 7a00 	vstr	s15, [r3]
		if (inVal > 1.0f) {
 80018bc:	4b22      	ldr	r3, [pc, #136]	@ (8001948 <processData+0xc4>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ce:	dd09      	ble.n	80018e4 <processData+0x60>
			inVal -= 2.0f;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <processData+0xc4>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80018da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <processData+0xc4>)
 80018e0:	edc3 7a00 	vstr	s15, [r3]
		}

		/* Apply Signal Modification */
//		inVal = HPF_apply(hpf, inVal);
//		inVal = LPF_apply(lpf, inVal);
		inVal = Delay_update(df, inVal);
 80018e4:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <processData+0xc4>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	eeb0 0a67 	vmov.f32	s0, s15
 80018ee:	6a38      	ldr	r0, [r7, #32]
 80018f0:	f7ff fbde 	bl	80010b0 <Delay_update>
 80018f4:	eef0 7a40 	vmov.f32	s15, s0
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <processData+0xc4>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]
//		inVal = NoiseGate_update(ngf, inVal);
//		inVal = Delay_Filter_apply(dft, inVal);
		outVal = (inVal * GAIN);
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <processData+0xc4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <processData+0xc8>)
 8001904:	6013      	str	r3, [r2, #0]



		/* Convert Output to int16_t and Send to DAC */
		*(outBuffPtr++) = (int16_t) FLOAT_TO_INT16(outVal);
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <processData+0xc8>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001944 <processData+0xc0>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <processData+0xcc>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	1c9a      	adds	r2, r3, #2
 800191a:	490d      	ldr	r1, [pc, #52]	@ (8001950 <processData+0xcc>)
 800191c:	600a      	str	r2, [r1, #0]
 800191e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001922:	ee17 2a90 	vmov	r2, s15
 8001926:	b212      	sxth	r2, r2
 8001928:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0x0; i < (BUFFER_SIZE / 2); i++) {
 800192a:	8afb      	ldrh	r3, [r7, #22]
 800192c:	3301      	adds	r3, #1
 800192e:	82fb      	strh	r3, [r7, #22]
 8001930:	8afb      	ldrh	r3, [r7, #22]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d9b0      	bls.n	8001898 <processData+0x14>
	}
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000000 	.word	0x20000000
 8001944:	47000000 	.word	0x47000000
 8001948:	2000009c 	.word	0x2000009c
 800194c:	200000a0 	.word	0x200000a0
 8001950:	20000004 	.word	0x20000004

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b096      	sub	sp, #88	@ 0x58
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2244      	movs	r2, #68	@ 0x44
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f001 f958 	bl	8002c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	463b      	mov	r3, r7
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001976:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800197a:	f000 fa65 	bl	8001e48 <HAL_PWREx_ControlVoltageScaling>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001984:	f000 f82c 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001988:	2310      	movs	r3, #16
 800198a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800198c:	2301      	movs	r3, #1
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001994:	2390      	movs	r3, #144	@ 0x90
 8001996:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 faa7 	bl	8001ef4 <HAL_RCC_OscConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80019ac:	f000 f818 	bl	80019e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b0:	230f      	movs	r3, #15
 80019b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019c4:	463b      	mov	r3, r7
 80019c6:	2101      	movs	r1, #1
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fe6f 	bl	80026ac <HAL_RCC_ClockConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019d4:	f000 f804 	bl	80019e0 <Error_Handler>
  }
}
 80019d8:	bf00      	nop
 80019da:	3758      	adds	r7, #88	@ 0x58
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <Error_Handler+0x8>

080019ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_MspInit+0x44>)
 80019f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_MspInit+0x44>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <NMI_Handler+0x4>

08001a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f000 f8c9 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a9c:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <_sbrk+0x5c>)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <_sbrk+0x60>)
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <_sbrk+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <_sbrk+0x64>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <_sbrk+0x68>)
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d207      	bcs.n	8001ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac4:	f001 f8c0 	bl	8002c48 <__errno>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20018000 	.word	0x20018000
 8001af4:	00000400 	.word	0x00000400
 8001af8:	200000a4 	.word	0x200000a4
 8001afc:	200001f8 	.word	0x200001f8

08001b00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b28:	f7ff ffea 	bl	8001b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b2e:	490d      	ldr	r1, [pc, #52]	@ (8001b64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <LoopForever+0xe>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b34:	e002      	b.n	8001b3c <LoopCopyDataInit>

08001b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b3a:	3304      	adds	r3, #4

08001b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b40:	d3f9      	bcc.n	8001b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b42:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b44:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <LoopForever+0x16>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b48:	e001      	b.n	8001b4e <LoopFillZerobss>

08001b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b4c:	3204      	adds	r2, #4

08001b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b50:	d3fb      	bcc.n	8001b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b52:	f001 f87f 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b56:	f7ff fddd 	bl	8001714 <main>

08001b5a <LoopForever>:

LoopForever:
    b LoopForever
 8001b5a:	e7fe      	b.n	8001b5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b68:	08002f80 	.word	0x08002f80
  ldr r2, =_sbss
 8001b6c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b70:	200001f4 	.word	0x200001f4

08001b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC1_2_IRQHandler>

08001b76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f91f 	bl	8001dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b86:	200f      	movs	r0, #15
 8001b88:	f000 f80e 	bl	8001ba8 <HAL_InitTick>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	71fb      	strb	r3, [r7, #7]
 8001b96:	e001      	b.n	8001b9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b98:	f7ff ff28 	bl	80019ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_InitTick+0x6c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d023      	beq.n	8001c04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_InitTick+0x70>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_InitTick+0x6c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f91d 	bl	8001e12 <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d809      	bhi.n	8001bf8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f8f5 	bl	8001dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf0:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <HAL_InitTick+0x74>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e007      	b.n	8001c08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e004      	b.n	8001c08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e001      	b.n	8001c08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000010 	.word	0x20000010
 8001c18:	20000008 	.word	0x20000008
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000010 	.word	0x20000010
 8001c44:	200000a8 	.word	0x200000a8

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	200000a8 	.word	0x200000a8

08001c60 <__NVIC_SetPriorityGrouping>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_SetPriority>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	db0a      	blt.n	8001cee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	490c      	ldr	r1, [pc, #48]	@ (8001d10 <__NVIC_SetPriority+0x4c>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	0112      	lsls	r2, r2, #4
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001cec:	e00a      	b.n	8001d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4908      	ldr	r1, [pc, #32]	@ (8001d14 <__NVIC_SetPriority+0x50>)
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	3b04      	subs	r3, #4
 8001cfc:	0112      	lsls	r2, r2, #4
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	440b      	add	r3, r1
 8001d02:	761a      	strb	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000e100 	.word	0xe000e100
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f1c3 0307 	rsb	r3, r3, #7
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	bf28      	it	cs
 8001d36:	2304      	movcs	r3, #4
 8001d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	2b06      	cmp	r3, #6
 8001d40:	d902      	bls.n	8001d48 <NVIC_EncodePriority+0x30>
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3b03      	subs	r3, #3
 8001d46:	e000      	b.n	8001d4a <NVIC_EncodePriority+0x32>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43da      	mvns	r2, r3
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d60:	f04f 31ff 	mov.w	r1, #4294967295
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43d9      	mvns	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4313      	orrs	r3, r2
         );
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	@ 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d90:	d301      	bcc.n	8001d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00f      	b.n	8001db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <SysTick_Config+0x40>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9e:	210f      	movs	r1, #15
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295
 8001da4:	f7ff ff8e 	bl	8001cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <SysTick_Config+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dae:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <SysTick_Config+0x40>)
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	e000e010 	.word	0xe000e010

08001dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ff47 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b086      	sub	sp, #24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dec:	f7ff ff5c 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68b9      	ldr	r1, [r7, #8]
 8001df6:	6978      	ldr	r0, [r7, #20]
 8001df8:	f7ff ff8e 	bl	8001d18 <NVIC_EncodePriority>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff5d 	bl	8001cc4 <__NVIC_SetPriority>
}
 8001e0a:	bf00      	nop
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffb0 	bl	8001d80 <SysTick_Config>
 8001e20:	4603      	mov	r3, r0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e30:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40007000 	.word	0x40007000

08001e48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e56:	d130      	bne.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e58:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e64:	d038      	beq.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e76:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2232      	movs	r2, #50	@ 0x32
 8001e7c:	fb02 f303 	mul.w	r3, r2, r3
 8001e80:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0c9b      	lsrs	r3, r3, #18
 8001e88:	3301      	adds	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	e002      	b.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea0:	d102      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f2      	bne.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb4:	d110      	bne.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e00f      	b.n	8001eda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ec6:	d007      	beq.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ed0:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	431bde83 	.word	0x431bde83

08001ef4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e3ca      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f06:	4b97      	ldr	r3, [pc, #604]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f10:	4b94      	ldr	r3, [pc, #592]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80e4 	beq.w	80020f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_RCC_OscConfig+0x4a>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b0c      	cmp	r3, #12
 8001f32:	f040 808b 	bne.w	800204c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	f040 8087 	bne.w	800204c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f3e:	4b89      	ldr	r3, [pc, #548]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_RCC_OscConfig+0x62>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e3a2      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1a      	ldr	r2, [r3, #32]
 8001f5a:	4b82      	ldr	r3, [pc, #520]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_RCC_OscConfig+0x7c>
 8001f66:	4b7f      	ldr	r3, [pc, #508]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f6e:	e005      	b.n	8001f7c <HAL_RCC_OscConfig+0x88>
 8001f70:	4b7c      	ldr	r3, [pc, #496]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f76:	091b      	lsrs	r3, r3, #4
 8001f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d223      	bcs.n	8001fc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 fd1d 	bl	80029c4 <RCC_SetFlashLatencyFromMSIRange>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e383      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f94:	4b73      	ldr	r3, [pc, #460]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a72      	ldr	r2, [pc, #456]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001f9a:	f043 0308 	orr.w	r3, r3, #8
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b70      	ldr	r3, [pc, #448]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	496d      	ldr	r1, [pc, #436]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	4968      	ldr	r1, [pc, #416]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
 8001fc6:	e025      	b.n	8002014 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc8:	4b66      	ldr	r3, [pc, #408]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a65      	ldr	r2, [pc, #404]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fce:	f043 0308 	orr.w	r3, r3, #8
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4960      	ldr	r1, [pc, #384]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	495b      	ldr	r1, [pc, #364]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d109      	bne.n	8002014 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fcdd 	bl	80029c4 <RCC_SetFlashLatencyFromMSIRange>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e343      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002014:	f000 fc4a 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b52      	ldr	r3, [pc, #328]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	4950      	ldr	r1, [pc, #320]	@ (8002168 <HAL_RCC_OscConfig+0x274>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	4a4e      	ldr	r2, [pc, #312]	@ (800216c <HAL_RCC_OscConfig+0x278>)
 8002032:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002034:	4b4e      	ldr	r3, [pc, #312]	@ (8002170 <HAL_RCC_OscConfig+0x27c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fdb5 	bl	8001ba8 <HAL_InitTick>
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d052      	beq.n	80020ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	e327      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d032      	beq.n	80020ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002054:	4b43      	ldr	r3, [pc, #268]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a42      	ldr	r2, [pc, #264]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002060:	f7ff fdf2 	bl	8001c48 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002068:	f7ff fdee 	bl	8001c48 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e310      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207a:	4b3a      	ldr	r3, [pc, #232]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002086:	4b37      	ldr	r3, [pc, #220]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a36      	ldr	r2, [pc, #216]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b34      	ldr	r3, [pc, #208]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4931      	ldr	r1, [pc, #196]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	492c      	ldr	r1, [pc, #176]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
 80020b8:	e01a      	b.n	80020f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c6:	f7ff fdbf 	bl	8001c48 <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ce:	f7ff fdbb 	bl	8001c48 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e2dd      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e0:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x1da>
 80020ec:	e000      	b.n	80020f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d074      	beq.n	80021e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x21a>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d10e      	bne.n	8002126 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d10b      	bne.n	8002126 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d064      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d160      	bne.n	80021e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e2ba      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x24a>
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0b      	ldr	r2, [pc, #44]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8002136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	e026      	b.n	800218c <HAL_RCC_OscConfig+0x298>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002146:	d115      	bne.n	8002174 <HAL_RCC_OscConfig+0x280>
 8002148:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800214e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a02      	ldr	r2, [pc, #8]	@ (8002164 <HAL_RCC_OscConfig+0x270>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x298>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	08002f20 	.word	0x08002f20
 800216c:	20000008 	.word	0x20000008
 8002170:	2000000c 	.word	0x2000000c
 8002174:	4ba0      	ldr	r3, [pc, #640]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a9f      	ldr	r2, [pc, #636]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800217a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b9d      	ldr	r3, [pc, #628]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a9c      	ldr	r2, [pc, #624]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800218a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d013      	beq.n	80021bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff fd58 	bl	8001c48 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219c:	f7ff fd54 	bl	8001c48 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b64      	cmp	r3, #100	@ 0x64
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e276      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ae:	4b92      	ldr	r3, [pc, #584]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x2a8>
 80021ba:	e014      	b.n	80021e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff fd44 	bl	8001c48 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff fd40 	bl	8001c48 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	@ 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e262      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021d6:	4b88      	ldr	r3, [pc, #544]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x2d0>
 80021e2:	e000      	b.n	80021e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d060      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_OscConfig+0x310>
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d119      	bne.n	8002232 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d116      	bne.n	8002232 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x328>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e23f      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	4973      	ldr	r1, [pc, #460]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002230:	e040      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d023      	beq.n	8002282 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223a:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7ff fcff 	bl	8001c48 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224e:	f7ff fcfb 	bl	8001c48 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e21d      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	4b65      	ldr	r3, [pc, #404]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b62      	ldr	r3, [pc, #392]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	495f      	ldr	r1, [pc, #380]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	e018      	b.n	80022b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002282:	4b5d      	ldr	r3, [pc, #372]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a5c      	ldr	r2, [pc, #368]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800228c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7ff fcdb 	bl	8001c48 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7ff fcd7 	bl	8001c48 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1f9      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d03c      	beq.n	800233a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01c      	beq.n	8002302 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c8:	4b4b      	ldr	r3, [pc, #300]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80022ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ce:	4a4a      	ldr	r2, [pc, #296]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7ff fcb6 	bl	8001c48 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff fcb2 	bl	8001c48 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1d4      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f2:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80022f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0ef      	beq.n	80022e0 <HAL_RCC_OscConfig+0x3ec>
 8002300:	e01b      	b.n	800233a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002302:	4b3d      	ldr	r3, [pc, #244]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002308:	4a3b      	ldr	r2, [pc, #236]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002312:	f7ff fc99 	bl	8001c48 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231a:	f7ff fc95 	bl	8001c48 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e1b7      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800232c:	4b32      	ldr	r3, [pc, #200]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1ef      	bne.n	800231a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80a6 	beq.w	8002494 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002348:	2300      	movs	r3, #0
 800234a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800234c:	4b2a      	ldr	r3, [pc, #168]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10d      	bne.n	8002374 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002358:	4b27      	ldr	r3, [pc, #156]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800235c:	4a26      	ldr	r2, [pc, #152]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 800235e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002362:	6593      	str	r3, [r2, #88]	@ 0x58
 8002364:	4b24      	ldr	r3, [pc, #144]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002370:	2301      	movs	r3, #1
 8002372:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002374:	4b21      	ldr	r3, [pc, #132]	@ (80023fc <HAL_RCC_OscConfig+0x508>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d118      	bne.n	80023b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002380:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <HAL_RCC_OscConfig+0x508>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1d      	ldr	r2, [pc, #116]	@ (80023fc <HAL_RCC_OscConfig+0x508>)
 8002386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800238a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238c:	f7ff fc5c 	bl	8001c48 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002394:	f7ff fc58 	bl	8001c48 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e17a      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <HAL_RCC_OscConfig+0x508>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x4d8>
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	4a0d      	ldr	r2, [pc, #52]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ca:	e029      	b.n	8002420 <HAL_RCC_OscConfig+0x52c>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d115      	bne.n	8002400 <HAL_RCC_OscConfig+0x50c>
 80023d4:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023da:	4a07      	ldr	r2, [pc, #28]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ea:	4a03      	ldr	r2, [pc, #12]	@ (80023f8 <HAL_RCC_OscConfig+0x504>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023f4:	e014      	b.n	8002420 <HAL_RCC_OscConfig+0x52c>
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40007000 	.word	0x40007000
 8002400:	4b9c      	ldr	r3, [pc, #624]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002406:	4a9b      	ldr	r2, [pc, #620]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002408:	f023 0301 	bic.w	r3, r3, #1
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002410:	4b98      	ldr	r3, [pc, #608]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002416:	4a97      	ldr	r2, [pc, #604]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d016      	beq.n	8002456 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff fc0e 	bl	8001c48 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7ff fc0a 	bl	8001c48 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e12a      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002446:	4b8b      	ldr	r3, [pc, #556]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0ed      	beq.n	8002430 <HAL_RCC_OscConfig+0x53c>
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002456:	f7ff fbf7 	bl	8001c48 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff fbf3 	bl	8001c48 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e113      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002474:	4b7f      	ldr	r3, [pc, #508]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ed      	bne.n	800245e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002482:	7ffb      	ldrb	r3, [r7, #31]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b7a      	ldr	r3, [pc, #488]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248c:	4a79      	ldr	r2, [pc, #484]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002492:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80fe 	beq.w	800269a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	f040 80d0 	bne.w	8002648 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024a8:	4b72      	ldr	r3, [pc, #456]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d130      	bne.n	800251e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	3b01      	subs	r3, #1
 80024c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d127      	bne.n	800251e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11f      	bne.n	800251e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024e8:	2a07      	cmp	r2, #7
 80024ea:	bf14      	ite	ne
 80024ec:	2201      	movne	r2, #1
 80024ee:	2200      	moveq	r2, #0
 80024f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d113      	bne.n	800251e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002500:	085b      	lsrs	r3, r3, #1
 8002502:	3b01      	subs	r3, #1
 8002504:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d109      	bne.n	800251e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	3b01      	subs	r3, #1
 8002518:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d06e      	beq.n	80025fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b0c      	cmp	r3, #12
 8002522:	d069      	beq.n	80025f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002524:	4b53      	ldr	r3, [pc, #332]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002530:	4b50      	ldr	r3, [pc, #320]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0ad      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002540:	4b4c      	ldr	r3, [pc, #304]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a4b      	ldr	r2, [pc, #300]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002546:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800254c:	f7ff fb7c 	bl	8001c48 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7ff fb78 	bl	8001c48 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e09a      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002572:	4b40      	ldr	r3, [pc, #256]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b40      	ldr	r3, [pc, #256]	@ (8002678 <HAL_RCC_OscConfig+0x784>)
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002582:	3a01      	subs	r2, #1
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	4311      	orrs	r1, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800258c:	0212      	lsls	r2, r2, #8
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002594:	0852      	lsrs	r2, r2, #1
 8002596:	3a01      	subs	r2, #1
 8002598:	0552      	lsls	r2, r2, #21
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025a0:	0852      	lsrs	r2, r2, #1
 80025a2:	3a01      	subs	r2, #1
 80025a4:	0652      	lsls	r2, r2, #25
 80025a6:	4311      	orrs	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025ac:	0912      	lsrs	r2, r2, #4
 80025ae:	0452      	lsls	r2, r2, #17
 80025b0:	430a      	orrs	r2, r1
 80025b2:	4930      	ldr	r1, [pc, #192]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80025be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80025ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d0:	f7ff fb3a 	bl	8001c48 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7ff fb36 	bl	8001c48 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e058      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f6:	e050      	b.n	800269a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e04f      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d148      	bne.n	800269a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a19      	ldr	r2, [pc, #100]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002612:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002614:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a16      	ldr	r2, [pc, #88]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002620:	f7ff fb12 	bl	8001c48 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff fb0e 	bl	8001c48 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e030      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263a:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x734>
 8002646:	e028      	b.n	800269a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d023      	beq.n	8002696 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264e:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_RCC_OscConfig+0x780>)
 8002654:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff faf5 	bl	8001c48 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002660:	e00c      	b.n	800267c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff faf1 	bl	8001c48 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d905      	bls.n	800267c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e013      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
 8002674:	40021000 	.word	0x40021000
 8002678:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <HAL_RCC_OscConfig+0x7b0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ec      	bne.n	8002662 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCC_OscConfig+0x7b0>)
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	4905      	ldr	r1, [pc, #20]	@ (80026a4 <HAL_RCC_OscConfig+0x7b0>)
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_RCC_OscConfig+0x7b4>)
 8002690:	4013      	ands	r3, r2
 8002692:	60cb      	str	r3, [r1, #12]
 8002694:	e001      	b.n	800269a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	feeefffc 	.word	0xfeeefffc

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0e7      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b75      	ldr	r3, [pc, #468]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d910      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b72      	ldr	r3, [pc, #456]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 0207 	bic.w	r2, r3, #7
 80026d6:	4970      	ldr	r1, [pc, #448]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b6e      	ldr	r3, [pc, #440]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0cf      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	4b66      	ldr	r3, [pc, #408]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002708:	429a      	cmp	r2, r3
 800270a:	d908      	bls.n	800271e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4b63      	ldr	r3, [pc, #396]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4960      	ldr	r1, [pc, #384]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d04c      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002732:	4b5a      	ldr	r3, [pc, #360]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d121      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0a6      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274a:	4b54      	ldr	r3, [pc, #336]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d115      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e09a      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d107      	bne.n	8002772 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002762:	4b4e      	ldr	r3, [pc, #312]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d109      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e08e      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002772:	4b4a      	ldr	r3, [pc, #296]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e086      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002782:	4b46      	ldr	r3, [pc, #280]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f023 0203 	bic.w	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	4943      	ldr	r1, [pc, #268]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002794:	f7ff fa58 	bl	8001c48 <HAL_GetTick>
 8002798:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800279c:	f7ff fa54 	bl	8001c48 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e06e      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b2:	4b3a      	ldr	r3, [pc, #232]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 020c 	and.w	r2, r3, #12
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d1eb      	bne.n	800279c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	4b31      	ldr	r3, [pc, #196]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027dc:	429a      	cmp	r2, r3
 80027de:	d208      	bcs.n	80027f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	492b      	ldr	r1, [pc, #172]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f2:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d210      	bcs.n	8002822 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002800:	4b25      	ldr	r3, [pc, #148]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 0207 	bic.w	r2, r3, #7
 8002808:	4923      	ldr	r1, [pc, #140]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	4313      	orrs	r3, r2
 800280e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002810:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_RCC_ClockConfig+0x1ec>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d001      	beq.n	8002822 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e036      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282e:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	4918      	ldr	r1, [pc, #96]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d009      	beq.n	8002860 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284c:	4b13      	ldr	r3, [pc, #76]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4910      	ldr	r1, [pc, #64]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	4313      	orrs	r3, r2
 800285e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002860:	f000 f824 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <HAL_RCC_ClockConfig+0x1f0>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 030f 	and.w	r3, r3, #15
 8002870:	490b      	ldr	r1, [pc, #44]	@ (80028a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
 800287c:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f8>)
 800287e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f98f 	bl	8001ba8 <HAL_InitTick>
 800288a:	4603      	mov	r3, r0
 800288c:	72fb      	strb	r3, [r7, #11]

  return status;
 800288e:	7afb      	ldrb	r3, [r7, #11]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40022000 	.word	0x40022000
 800289c:	40021000 	.word	0x40021000
 80028a0:	08002f20 	.word	0x08002f20
 80028a4:	20000008 	.word	0x20000008
 80028a8:	2000000c 	.word	0x2000000c

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	@ 0x24
 80028b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ba:	4b3e      	ldr	r3, [pc, #248]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c4:	4b3b      	ldr	r3, [pc, #236]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b0c      	cmp	r3, #12
 80028d8:	d121      	bne.n	800291e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d11e      	bne.n	800291e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028e0:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028ec:	4b31      	ldr	r3, [pc, #196]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f2:	0a1b      	lsrs	r3, r3, #8
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e005      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028fc:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002908:	4a2b      	ldr	r2, [pc, #172]	@ (80029b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002910:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800291c:	e00a      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d102      	bne.n	800292a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002924:	4b25      	ldr	r3, [pc, #148]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002926:	61bb      	str	r3, [r7, #24]
 8002928:	e004      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d101      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002930:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002932:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d134      	bne.n	80029a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800293a:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0xa6>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b03      	cmp	r3, #3
 800294e:	d003      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0xac>
 8002950:	e005      	b.n	800295e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002952:	4b1a      	ldr	r3, [pc, #104]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002954:	617b      	str	r3, [r7, #20]
      break;
 8002956:	e005      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800295a:	617b      	str	r3, [r7, #20]
      break;
 800295c:	e002      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	617b      	str	r3, [r7, #20]
      break;
 8002962:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	3301      	adds	r3, #1
 8002970:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	fb03 f202 	mul.w	r2, r3, r2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	0e5b      	lsrs	r3, r3, #25
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	3301      	adds	r3, #1
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029a4:	69bb      	ldr	r3, [r7, #24]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	@ 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	08002f30 	.word	0x08002f30
 80029bc:	00f42400 	.word	0x00f42400
 80029c0:	007a1200 	.word	0x007a1200

080029c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029d0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029dc:	f7ff fa26 	bl	8001e2c <HAL_PWREx_GetVoltageRange>
 80029e0:	6178      	str	r0, [r7, #20]
 80029e2:	e014      	b.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e8:	4a24      	ldr	r2, [pc, #144]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80029f0:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029fc:	f7ff fa16 	bl	8001e2c <HAL_PWREx_GetVoltageRange>
 8002a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a02:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a06:	4a1d      	ldr	r2, [pc, #116]	@ (8002a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a14:	d10b      	bne.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2b80      	cmp	r3, #128	@ 0x80
 8002a1a:	d919      	bls.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a20:	d902      	bls.n	8002a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a22:	2302      	movs	r3, #2
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	e013      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a28:	2301      	movs	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	e010      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b80      	cmp	r3, #128	@ 0x80
 8002a32:	d902      	bls.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a34:	2303      	movs	r3, #3
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	e00a      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	@ 0x80
 8002a3e:	d102      	bne.n	8002a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a40:	2302      	movs	r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e004      	b.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b70      	cmp	r3, #112	@ 0x70
 8002a4a:	d101      	bne.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 0207 	bic.w	r2, r3, #7
 8002a58:	4909      	ldr	r1, [pc, #36]	@ (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a60:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d001      	beq.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40022000 	.word	0x40022000

08002a84 <calloc>:
 8002a84:	4b02      	ldr	r3, [pc, #8]	@ (8002a90 <calloc+0xc>)
 8002a86:	460a      	mov	r2, r1
 8002a88:	4601      	mov	r1, r0
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	f000 b802 	b.w	8002a94 <_calloc_r>
 8002a90:	20000014 	.word	0x20000014

08002a94 <_calloc_r>:
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	fba1 5402 	umull	r5, r4, r1, r2
 8002a9a:	b93c      	cbnz	r4, 8002aac <_calloc_r+0x18>
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	f000 f82f 	bl	8002b00 <_malloc_r>
 8002aa2:	4606      	mov	r6, r0
 8002aa4:	b928      	cbnz	r0, 8002ab2 <_calloc_r+0x1e>
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	bd70      	pop	{r4, r5, r6, pc}
 8002aac:	220c      	movs	r2, #12
 8002aae:	6002      	str	r2, [r0, #0]
 8002ab0:	e7f9      	b.n	8002aa6 <_calloc_r+0x12>
 8002ab2:	462a      	mov	r2, r5
 8002ab4:	4621      	mov	r1, r4
 8002ab6:	f000 f8af 	bl	8002c18 <memset>
 8002aba:	e7f5      	b.n	8002aa8 <_calloc_r+0x14>

08002abc <sbrk_aligned>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	4e0f      	ldr	r6, [pc, #60]	@ (8002afc <sbrk_aligned+0x40>)
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	6831      	ldr	r1, [r6, #0]
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	b911      	cbnz	r1, 8002ace <sbrk_aligned+0x12>
 8002ac8:	f000 f8ae 	bl	8002c28 <_sbrk_r>
 8002acc:	6030      	str	r0, [r6, #0]
 8002ace:	4621      	mov	r1, r4
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f000 f8a9 	bl	8002c28 <_sbrk_r>
 8002ad6:	1c43      	adds	r3, r0, #1
 8002ad8:	d103      	bne.n	8002ae2 <sbrk_aligned+0x26>
 8002ada:	f04f 34ff 	mov.w	r4, #4294967295
 8002ade:	4620      	mov	r0, r4
 8002ae0:	bd70      	pop	{r4, r5, r6, pc}
 8002ae2:	1cc4      	adds	r4, r0, #3
 8002ae4:	f024 0403 	bic.w	r4, r4, #3
 8002ae8:	42a0      	cmp	r0, r4
 8002aea:	d0f8      	beq.n	8002ade <sbrk_aligned+0x22>
 8002aec:	1a21      	subs	r1, r4, r0
 8002aee:	4628      	mov	r0, r5
 8002af0:	f000 f89a 	bl	8002c28 <_sbrk_r>
 8002af4:	3001      	adds	r0, #1
 8002af6:	d1f2      	bne.n	8002ade <sbrk_aligned+0x22>
 8002af8:	e7ef      	b.n	8002ada <sbrk_aligned+0x1e>
 8002afa:	bf00      	nop
 8002afc:	200000ac 	.word	0x200000ac

08002b00 <_malloc_r>:
 8002b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b04:	1ccd      	adds	r5, r1, #3
 8002b06:	f025 0503 	bic.w	r5, r5, #3
 8002b0a:	3508      	adds	r5, #8
 8002b0c:	2d0c      	cmp	r5, #12
 8002b0e:	bf38      	it	cc
 8002b10:	250c      	movcc	r5, #12
 8002b12:	2d00      	cmp	r5, #0
 8002b14:	4606      	mov	r6, r0
 8002b16:	db01      	blt.n	8002b1c <_malloc_r+0x1c>
 8002b18:	42a9      	cmp	r1, r5
 8002b1a:	d904      	bls.n	8002b26 <_malloc_r+0x26>
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	6033      	str	r3, [r6, #0]
 8002b20:	2000      	movs	r0, #0
 8002b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002bfc <_malloc_r+0xfc>
 8002b2a:	f000 f869 	bl	8002c00 <__malloc_lock>
 8002b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b32:	461c      	mov	r4, r3
 8002b34:	bb44      	cbnz	r4, 8002b88 <_malloc_r+0x88>
 8002b36:	4629      	mov	r1, r5
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f7ff ffbf 	bl	8002abc <sbrk_aligned>
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	4604      	mov	r4, r0
 8002b42:	d158      	bne.n	8002bf6 <_malloc_r+0xf6>
 8002b44:	f8d8 4000 	ldr.w	r4, [r8]
 8002b48:	4627      	mov	r7, r4
 8002b4a:	2f00      	cmp	r7, #0
 8002b4c:	d143      	bne.n	8002bd6 <_malloc_r+0xd6>
 8002b4e:	2c00      	cmp	r4, #0
 8002b50:	d04b      	beq.n	8002bea <_malloc_r+0xea>
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	4639      	mov	r1, r7
 8002b56:	4630      	mov	r0, r6
 8002b58:	eb04 0903 	add.w	r9, r4, r3
 8002b5c:	f000 f864 	bl	8002c28 <_sbrk_r>
 8002b60:	4581      	cmp	r9, r0
 8002b62:	d142      	bne.n	8002bea <_malloc_r+0xea>
 8002b64:	6821      	ldr	r1, [r4, #0]
 8002b66:	1a6d      	subs	r5, r5, r1
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f7ff ffa6 	bl	8002abc <sbrk_aligned>
 8002b70:	3001      	adds	r0, #1
 8002b72:	d03a      	beq.n	8002bea <_malloc_r+0xea>
 8002b74:	6823      	ldr	r3, [r4, #0]
 8002b76:	442b      	add	r3, r5
 8002b78:	6023      	str	r3, [r4, #0]
 8002b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	bb62      	cbnz	r2, 8002bdc <_malloc_r+0xdc>
 8002b82:	f8c8 7000 	str.w	r7, [r8]
 8002b86:	e00f      	b.n	8002ba8 <_malloc_r+0xa8>
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	1b52      	subs	r2, r2, r5
 8002b8c:	d420      	bmi.n	8002bd0 <_malloc_r+0xd0>
 8002b8e:	2a0b      	cmp	r2, #11
 8002b90:	d917      	bls.n	8002bc2 <_malloc_r+0xc2>
 8002b92:	1961      	adds	r1, r4, r5
 8002b94:	42a3      	cmp	r3, r4
 8002b96:	6025      	str	r5, [r4, #0]
 8002b98:	bf18      	it	ne
 8002b9a:	6059      	strne	r1, [r3, #4]
 8002b9c:	6863      	ldr	r3, [r4, #4]
 8002b9e:	bf08      	it	eq
 8002ba0:	f8c8 1000 	streq.w	r1, [r8]
 8002ba4:	5162      	str	r2, [r4, r5]
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	4630      	mov	r0, r6
 8002baa:	f000 f82f 	bl	8002c0c <__malloc_unlock>
 8002bae:	f104 000b 	add.w	r0, r4, #11
 8002bb2:	1d23      	adds	r3, r4, #4
 8002bb4:	f020 0007 	bic.w	r0, r0, #7
 8002bb8:	1ac2      	subs	r2, r0, r3
 8002bba:	bf1c      	itt	ne
 8002bbc:	1a1b      	subne	r3, r3, r0
 8002bbe:	50a3      	strne	r3, [r4, r2]
 8002bc0:	e7af      	b.n	8002b22 <_malloc_r+0x22>
 8002bc2:	6862      	ldr	r2, [r4, #4]
 8002bc4:	42a3      	cmp	r3, r4
 8002bc6:	bf0c      	ite	eq
 8002bc8:	f8c8 2000 	streq.w	r2, [r8]
 8002bcc:	605a      	strne	r2, [r3, #4]
 8002bce:	e7eb      	b.n	8002ba8 <_malloc_r+0xa8>
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	6864      	ldr	r4, [r4, #4]
 8002bd4:	e7ae      	b.n	8002b34 <_malloc_r+0x34>
 8002bd6:	463c      	mov	r4, r7
 8002bd8:	687f      	ldr	r7, [r7, #4]
 8002bda:	e7b6      	b.n	8002b4a <_malloc_r+0x4a>
 8002bdc:	461a      	mov	r2, r3
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	42a3      	cmp	r3, r4
 8002be2:	d1fb      	bne.n	8002bdc <_malloc_r+0xdc>
 8002be4:	2300      	movs	r3, #0
 8002be6:	6053      	str	r3, [r2, #4]
 8002be8:	e7de      	b.n	8002ba8 <_malloc_r+0xa8>
 8002bea:	230c      	movs	r3, #12
 8002bec:	6033      	str	r3, [r6, #0]
 8002bee:	4630      	mov	r0, r6
 8002bf0:	f000 f80c 	bl	8002c0c <__malloc_unlock>
 8002bf4:	e794      	b.n	8002b20 <_malloc_r+0x20>
 8002bf6:	6005      	str	r5, [r0, #0]
 8002bf8:	e7d6      	b.n	8002ba8 <_malloc_r+0xa8>
 8002bfa:	bf00      	nop
 8002bfc:	200000b0 	.word	0x200000b0

08002c00 <__malloc_lock>:
 8002c00:	4801      	ldr	r0, [pc, #4]	@ (8002c08 <__malloc_lock+0x8>)
 8002c02:	f000 b84b 	b.w	8002c9c <__retarget_lock_acquire_recursive>
 8002c06:	bf00      	nop
 8002c08:	200001f0 	.word	0x200001f0

08002c0c <__malloc_unlock>:
 8002c0c:	4801      	ldr	r0, [pc, #4]	@ (8002c14 <__malloc_unlock+0x8>)
 8002c0e:	f000 b846 	b.w	8002c9e <__retarget_lock_release_recursive>
 8002c12:	bf00      	nop
 8002c14:	200001f0 	.word	0x200001f0

08002c18 <memset>:
 8002c18:	4402      	add	r2, r0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <memset+0xa>
 8002c20:	4770      	bx	lr
 8002c22:	f803 1b01 	strb.w	r1, [r3], #1
 8002c26:	e7f9      	b.n	8002c1c <memset+0x4>

08002c28 <_sbrk_r>:
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	4d06      	ldr	r5, [pc, #24]	@ (8002c44 <_sbrk_r+0x1c>)
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	4604      	mov	r4, r0
 8002c30:	4608      	mov	r0, r1
 8002c32:	602b      	str	r3, [r5, #0]
 8002c34:	f7fe ff2e 	bl	8001a94 <_sbrk>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d102      	bne.n	8002c42 <_sbrk_r+0x1a>
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	b103      	cbz	r3, 8002c42 <_sbrk_r+0x1a>
 8002c40:	6023      	str	r3, [r4, #0]
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	200001ec 	.word	0x200001ec

08002c48 <__errno>:
 8002c48:	4b01      	ldr	r3, [pc, #4]	@ (8002c50 <__errno+0x8>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	20000014 	.word	0x20000014

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4d0d      	ldr	r5, [pc, #52]	@ (8002c8c <__libc_init_array+0x38>)
 8002c58:	4c0d      	ldr	r4, [pc, #52]	@ (8002c90 <__libc_init_array+0x3c>)
 8002c5a:	1b64      	subs	r4, r4, r5
 8002c5c:	10a4      	asrs	r4, r4, #2
 8002c5e:	2600      	movs	r6, #0
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	4d0b      	ldr	r5, [pc, #44]	@ (8002c94 <__libc_init_array+0x40>)
 8002c66:	4c0c      	ldr	r4, [pc, #48]	@ (8002c98 <__libc_init_array+0x44>)
 8002c68:	f000 f94e 	bl	8002f08 <_init>
 8002c6c:	1b64      	subs	r4, r4, r5
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	2600      	movs	r6, #0
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08002f78 	.word	0x08002f78
 8002c90:	08002f78 	.word	0x08002f78
 8002c94:	08002f78 	.word	0x08002f78
 8002c98:	08002f7c 	.word	0x08002f7c

08002c9c <__retarget_lock_acquire_recursive>:
 8002c9c:	4770      	bx	lr

08002c9e <__retarget_lock_release_recursive>:
 8002c9e:	4770      	bx	lr

08002ca0 <expf>:
 8002ca0:	b508      	push	{r3, lr}
 8002ca2:	ed2d 8b02 	vpush	{d8}
 8002ca6:	eef0 8a40 	vmov.f32	s17, s0
 8002caa:	f000 f839 	bl	8002d20 <__ieee754_expf>
 8002cae:	eeb0 8a40 	vmov.f32	s16, s0
 8002cb2:	eeb0 0a68 	vmov.f32	s0, s17
 8002cb6:	f000 f829 	bl	8002d0c <finitef>
 8002cba:	b160      	cbz	r0, 8002cd6 <expf+0x36>
 8002cbc:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8002cfc <expf+0x5c>
 8002cc0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	dd0a      	ble.n	8002ce0 <expf+0x40>
 8002cca:	f7ff ffbd 	bl	8002c48 <__errno>
 8002cce:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8002d00 <expf+0x60>
 8002cd2:	2322      	movs	r3, #34	@ 0x22
 8002cd4:	6003      	str	r3, [r0, #0]
 8002cd6:	eeb0 0a48 	vmov.f32	s0, s16
 8002cda:	ecbd 8b02 	vpop	{d8}
 8002cde:	bd08      	pop	{r3, pc}
 8002ce0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8002d04 <expf+0x64>
 8002ce4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	d5f3      	bpl.n	8002cd6 <expf+0x36>
 8002cee:	f7ff ffab 	bl	8002c48 <__errno>
 8002cf2:	2322      	movs	r3, #34	@ 0x22
 8002cf4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8002d08 <expf+0x68>
 8002cf8:	6003      	str	r3, [r0, #0]
 8002cfa:	e7ec      	b.n	8002cd6 <expf+0x36>
 8002cfc:	42b17217 	.word	0x42b17217
 8002d00:	7f800000 	.word	0x7f800000
 8002d04:	c2cff1b5 	.word	0xc2cff1b5
 8002d08:	00000000 	.word	0x00000000

08002d0c <finitef>:
 8002d0c:	ee10 3a10 	vmov	r3, s0
 8002d10:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8002d14:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8002d18:	bfac      	ite	ge
 8002d1a:	2000      	movge	r0, #0
 8002d1c:	2001      	movlt	r0, #1
 8002d1e:	4770      	bx	lr

08002d20 <__ieee754_expf>:
 8002d20:	ee10 2a10 	vmov	r2, s0
 8002d24:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8002d28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002d2c:	d902      	bls.n	8002d34 <__ieee754_expf+0x14>
 8002d2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002d32:	4770      	bx	lr
 8002d34:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8002d38:	d106      	bne.n	8002d48 <__ieee754_expf+0x28>
 8002d3a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8002e74 <__ieee754_expf+0x154>
 8002d3e:	2900      	cmp	r1, #0
 8002d40:	bf18      	it	ne
 8002d42:	eeb0 0a67 	vmovne.f32	s0, s15
 8002d46:	4770      	bx	lr
 8002d48:	484b      	ldr	r0, [pc, #300]	@ (8002e78 <__ieee754_expf+0x158>)
 8002d4a:	4282      	cmp	r2, r0
 8002d4c:	dd02      	ble.n	8002d54 <__ieee754_expf+0x34>
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f000 b8d4 	b.w	8002efc <__math_oflowf>
 8002d54:	2a00      	cmp	r2, #0
 8002d56:	da05      	bge.n	8002d64 <__ieee754_expf+0x44>
 8002d58:	4a48      	ldr	r2, [pc, #288]	@ (8002e7c <__ieee754_expf+0x15c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d902      	bls.n	8002d64 <__ieee754_expf+0x44>
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f000 b8c6 	b.w	8002ef0 <__math_uflowf>
 8002d64:	4a46      	ldr	r2, [pc, #280]	@ (8002e80 <__ieee754_expf+0x160>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002d6c:	d952      	bls.n	8002e14 <__ieee754_expf+0xf4>
 8002d6e:	4a45      	ldr	r2, [pc, #276]	@ (8002e84 <__ieee754_expf+0x164>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8002d76:	d834      	bhi.n	8002de2 <__ieee754_expf+0xc2>
 8002d78:	4b43      	ldr	r3, [pc, #268]	@ (8002e88 <__ieee754_expf+0x168>)
 8002d7a:	4413      	add	r3, r2
 8002d7c:	ed93 7a00 	vldr	s14, [r3]
 8002d80:	4b42      	ldr	r3, [pc, #264]	@ (8002e8c <__ieee754_expf+0x16c>)
 8002d82:	4413      	add	r3, r2
 8002d84:	ee30 7a47 	vsub.f32	s14, s0, s14
 8002d88:	f1c1 0201 	rsb	r2, r1, #1
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	1a52      	subs	r2, r2, r1
 8002d92:	ee37 0a67 	vsub.f32	s0, s14, s15
 8002d96:	ee20 6a00 	vmul.f32	s12, s0, s0
 8002d9a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8002e90 <__ieee754_expf+0x170>
 8002d9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002e94 <__ieee754_expf+0x174>
 8002da2:	eee6 6a05 	vfma.f32	s13, s12, s10
 8002da6:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8002e98 <__ieee754_expf+0x178>
 8002daa:	eea6 5a86 	vfma.f32	s10, s13, s12
 8002dae:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002e9c <__ieee754_expf+0x17c>
 8002db2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8002db6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8002ea0 <__ieee754_expf+0x180>
 8002dba:	eea6 5a86 	vfma.f32	s10, s13, s12
 8002dbe:	eef0 6a40 	vmov.f32	s13, s0
 8002dc2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8002dc6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002dca:	ee20 5a26 	vmul.f32	s10, s0, s13
 8002dce:	bb92      	cbnz	r2, 8002e36 <__ieee754_expf+0x116>
 8002dd0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8002dd4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8002dd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002ddc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8002de0:	4770      	bx	lr
 8002de2:	4b30      	ldr	r3, [pc, #192]	@ (8002ea4 <__ieee754_expf+0x184>)
 8002de4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002ea8 <__ieee754_expf+0x188>
 8002de8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8002eac <__ieee754_expf+0x18c>
 8002dec:	4413      	add	r3, r2
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002df6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfe:	ee17 2a90 	vmov	r2, s15
 8002e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e06:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8002e0a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8002eb0 <__ieee754_expf+0x190>
 8002e0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e12:	e7be      	b.n	8002d92 <__ieee754_expf+0x72>
 8002e14:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8002e18:	d20b      	bcs.n	8002e32 <__ieee754_expf+0x112>
 8002e1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002eb4 <__ieee754_expf+0x194>
 8002e1e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8002e22:	eef4 6ae5 	vcmpe.f32	s13, s11
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	dd02      	ble.n	8002e32 <__ieee754_expf+0x112>
 8002e2c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8002e30:	4770      	bx	lr
 8002e32:	2200      	movs	r2, #0
 8002e34:	e7af      	b.n	8002d96 <__ieee754_expf+0x76>
 8002e36:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002e3a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8002e3e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8002e42:	bfb8      	it	lt
 8002e44:	3264      	addlt	r2, #100	@ 0x64
 8002e46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002e4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e4e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8002e52:	ee17 3a90 	vmov	r3, s15
 8002e56:	bfab      	itete	ge
 8002e58:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8002e5c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8002e60:	ee00 3a10 	vmovge	s0, r3
 8002e64:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8002eb8 <__ieee754_expf+0x198>
 8002e68:	bfbc      	itt	lt
 8002e6a:	ee00 3a10 	vmovlt	s0, r3
 8002e6e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8002e72:	4770      	bx	lr
 8002e74:	00000000 	.word	0x00000000
 8002e78:	42b17217 	.word	0x42b17217
 8002e7c:	42cff1b5 	.word	0x42cff1b5
 8002e80:	3eb17218 	.word	0x3eb17218
 8002e84:	3f851591 	.word	0x3f851591
 8002e88:	08002f68 	.word	0x08002f68
 8002e8c:	08002f60 	.word	0x08002f60
 8002e90:	3331bb4c 	.word	0x3331bb4c
 8002e94:	b5ddea0e 	.word	0xb5ddea0e
 8002e98:	388ab355 	.word	0x388ab355
 8002e9c:	bb360b61 	.word	0xbb360b61
 8002ea0:	3e2aaaab 	.word	0x3e2aaaab
 8002ea4:	08002f70 	.word	0x08002f70
 8002ea8:	3fb8aa3b 	.word	0x3fb8aa3b
 8002eac:	3f317180 	.word	0x3f317180
 8002eb0:	3717f7d1 	.word	0x3717f7d1
 8002eb4:	7149f2ca 	.word	0x7149f2ca
 8002eb8:	0d800000 	.word	0x0d800000

08002ebc <with_errnof>:
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	ed2d 8b02 	vpush	{d8}
 8002ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	f7ff febe 	bl	8002c48 <__errno>
 8002ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8002ed0:	ecbd 8b02 	vpop	{d8}
 8002ed4:	6004      	str	r4, [r0, #0]
 8002ed6:	bd10      	pop	{r4, pc}

08002ed8 <xflowf>:
 8002ed8:	b130      	cbz	r0, 8002ee8 <xflowf+0x10>
 8002eda:	eef1 7a40 	vneg.f32	s15, s0
 8002ede:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002ee2:	2022      	movs	r0, #34	@ 0x22
 8002ee4:	f7ff bfea 	b.w	8002ebc <with_errnof>
 8002ee8:	eef0 7a40 	vmov.f32	s15, s0
 8002eec:	e7f7      	b.n	8002ede <xflowf+0x6>
	...

08002ef0 <__math_uflowf>:
 8002ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002ef8 <__math_uflowf+0x8>
 8002ef4:	f7ff bff0 	b.w	8002ed8 <xflowf>
 8002ef8:	10000000 	.word	0x10000000

08002efc <__math_oflowf>:
 8002efc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002f04 <__math_oflowf+0x8>
 8002f00:	f7ff bfea 	b.w	8002ed8 <xflowf>
 8002f04:	70000000 	.word	0x70000000

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
